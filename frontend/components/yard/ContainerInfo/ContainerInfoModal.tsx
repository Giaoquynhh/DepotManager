import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { getGateStatusText, getStatusColor } from '../../utils/containerUtils';
import { PDFSlip } from '../PDFSlip/PDFSlip';
import { forkliftApi } from '@services/forklift';
import { yardApi } from '@services/yard';
import { mutate } from 'swr';

interface ContainerInfoModalProps {
  isOpen: boolean;
  containerInfo: any;
  isDuplicate: boolean;
  existingContainers: any[];
  onClose: () => void;
}

export const ContainerInfoModal: React.FC<ContainerInfoModalProps> = ({
  isOpen,
  containerInfo,
  isDuplicate,
  existingContainers,
  onClose
}) => {
  const [showPositionSuggestions, setShowPositionSuggestions] = useState(false);
  const [selectedPosition, setSelectedPosition] = useState<any>(null);
  const [showPDFSlip, setShowPDFSlip] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [suggestions, setSuggestions] = useState<Array<{ slot: any; score: number }>>([]);
  const router = useRouter();

  console.log('üîç ContainerInfoModal render:', {
    isOpen,
    containerInfo: containerInfo ? 'C√≥ data' : 'Kh√¥ng c√≥ data',
    isDuplicate,
    existingContainersLength: existingContainers?.length || 0
  });

  if (!isOpen) return null; // Only check isOpen here

  // Mock data cho g·ª£i √Ω v·ªã tr√≠
  const positionSuggestions = [
    { id: 1, block: 'B1', slot: '11', yard: 'B√£i B1', status: 'Tr·ªëng', distance: 'G·∫ßn nh·∫•t' },
    { id: 2, block: 'B1', slot: '12', yard: 'B√£i B1', status: 'Tr·ªëng', distance: 'G·∫ßn nh·∫•t' },
    { id: 3, block: 'B2', slot: '05', yard: 'B√£i B2', status: 'Tr·ªëng', distance: 'Trung b√¨nh' },
    { id: 4, block: 'A1', slot: '08', yard: 'B√£i A1', status: 'Tr·ªëng', distance: 'Xa nh·∫•t' },
    { id: 5, block: 'C1', slot: '03', yard: 'B√£i C1', status: 'Tr·ªëng', distance: 'Trung b√¨nh' }
  ];

  const handleContinue = async () => {
    setShowPositionSuggestions(true);
    if (containerInfo?.container_no) {
      try {
        const data = await yardApi.suggest(containerInfo.container_no);
        setSuggestions(Array.isArray(data) ? data : []);
      } catch (e) {
        console.error('L·ªói l·∫•y g·ª£i √Ω v·ªã tr√≠:', e);
        setSuggestions([]);
      }
    }
  };

  const handleSelectPosition = (position: any) => {
    setSelectedPosition(position);
    // ·ªû ƒë√¢y c√≥ th·ªÉ th√™m logic ƒë·ªÉ in phi·∫øu
    console.log('üìç V·ªã tr√≠ ƒë√£ ch·ªçn:', position);
  };

  const handleGenerateSlip = () => {
    if (selectedPosition) {
      setShowPDFSlip(true);
      console.log('üñ®Ô∏è T·∫°o phi·∫øu v·ªõi v·ªã tr√≠:', selectedPosition);
    }
  };

  const handleBackToInfo = () => {
    setShowPositionSuggestions(false);
    setSelectedPosition(null);
  };

  const handleBackToSuggestions = () => {
    setShowPDFSlip(false);
  };

  const handleFinish = async () => {
    if (!containerInfo) return;
    try {
      setSubmitting(true);
      if (selectedPosition?.slot?.id) {
        await yardApi.assign(containerInfo.container_no, selectedPosition.slot.id);
        await mutate('yard_map');
      }
      await forkliftApi.assign({ container_no: containerInfo.container_no, to_slot_id: selectedPosition?.slot?.id });
      onClose();
      router.push('/Forklift');
    } catch (error) {
      console.error('L·ªói khi t·∫°o c√¥ng vi·ªác xe n√¢ng:', error);
      onClose();
    } finally {
      setSubmitting(false);
    }
  };

  if (showPDFSlip) {
    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content pdf-modal" onClick={(e) => e.stopPropagation()}>
          <div className="modal-header">
            <h3 className="modal-title">Phi·∫øu ƒë·∫∑t container</h3>
            <button className="modal-close" onClick={onClose}>&times;</button>
          </div>
          
          <div className="modal-body">
            <PDFSlip 
              containerInfo={containerInfo} 
              selectedPosition={selectedPosition} 
            />
          </div>

          <div className="modal-footer">
            <button className="btn btn-secondary" onClick={handleBackToSuggestions}>
              Quay l·∫°i
            </button>
            <button className="btn btn-primary" onClick={handleFinish} disabled={submitting}>
              {submitting ? 'ƒêang x·ª≠ l√Ω...' : 'Ho√†n t·∫•t'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (showPositionSuggestions) {
    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content" onClick={(e) => e.stopPropagation()}>
          <div className="modal-header">
            <h3 className="modal-title">G·ª£i √Ω v·ªã tr√≠</h3>
            <button className="modal-close" onClick={onClose}>&times;</button>
          </div>
          
          <div className="modal-body">
            <div className="position-suggestions">
              <h4>Ch·ªçn v·ªã tr√≠ ph√π h·ª£p cho container:</h4>
              <div className="suggestions-grid">
                {suggestions.map((s) => (
                  <div
                    key={s.slot.id}
                    className={`suggestion-card ${selectedPosition?.slot?.id === s.slot.id ? 'selected' : ''}`}
                    onClick={() => handleSelectPosition(s)}
                  >
                    <div className="suggestion-header">
                      <span className="position-code">{s.slot.code}</span>
                      <span className="status-badge available">Tr·ªëng</span>
                    </div>
                    <div className="suggestion-details">
                      <span className="yard-name">{s.slot.block?.code || s.slot.block_code || 'B√£i'}</span>
                      <span className="distance">ƒêi·ªÉm: {Math.round((s.score || 0) * 100) / 100}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="modal-footer">
            <button className="btn btn-secondary" onClick={handleBackToInfo}>
              Quay l·∫°i
            </button>
            {selectedPosition && (
              <button className="btn btn-primary" onClick={handleGenerateSlip}>
                T·∫°o phi·∫øu
              </button>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h3 className="modal-title">Th√¥ng tin Container</h3>
          <button className="modal-close" onClick={onClose}>&times;</button>
        </div>
        
        <div className="modal-body">
          {!containerInfo ? (
            <div className="no-info-message">
              <div className="no-info-icon">‚ùå</div>
              <h4>Container kh√¥ng c√≥ th√¥ng tin</h4>
              <p>Container n√†y kh√¥ng c√≥ tr·∫°ng th√°i Gate In ho·∫∑c ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng.</p>
            </div>
          ) : (
            <>
              {isDuplicate && (
                <div className="duplicate-warning">
                  <div className="warning-icon">‚ö†Ô∏è</div>
                  <div className="warning-content">
                    <h4>Container No n√†y ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!</h4>
                    <p>Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ho·∫∑c s·ª≠ d·ª•ng Container No kh√°c.</p>
                  </div>
                </div>
              )}

              <div className="info-section">
                <div className="info-header">
                  <div className="info-header-icon">üì¶</div>
                  <h4>TH√îNG TIN C∆† B·∫¢N</h4>
                </div>
                <div className="info-grid">
                  <div className="info-card">
                    <div className="info-card-icon">üî¢</div>
                    <div className="info-card-content">
                      <span className="info-label">CONTAINER NO</span>
                      <span className="info-value container-no">{containerInfo.container_no}</span>
                    </div>
                  </div>

                  <div className="info-card">
                    <div className="info-card-icon">üö™</div>
                    <div className="info-card-content">
                      <span className="info-label">TR·∫†NG TH√ÅI C·ªîNG</span>
                      <span className="info-value status-badge gate-status">
                        GATE IN
                      </span>
                    </div>
                  </div>

                  <div className="info-card">
                    <div className="info-card-icon">üìç</div>
                    <div className="info-card-content">
                      <span className="info-label">C·ªîNG XE ƒê√É V√ÄO</span>
                      <span className="info-value location">
                        C·ªïng 1
                      </span>
                    </div>
                  </div>

                  <div className="info-card">
                    <div className="info-card-icon">üìä</div>
                    <div className="info-card-content">
                      <span className="info-label">√î S·ªê</span>
                      <span className={`info-value status-badge ${getStatusColor(containerInfo.status)}`}>
                        {containerInfo.status_text}
                      </span>
                    </div>
                  </div>

                  <div className="info-card">
                    <div className="info-card-icon">üè∑Ô∏è</div>
                    <div className="info-card-content">
                      <span className="info-label">LO·∫†I</span>
                      <span className="info-value type-badge">
                        {containerInfo.type || 'Ch∆∞a x√°c ƒë·ªãnh'}
                      </span>
                    </div>
                  </div>

                  <div className="info-card">
                    <div className="info-card-icon">üè≠</div>
                    <div className="info-card-content">
                      <span className="info-label">B√ÉI</span>
                      <span className="info-value yard">
                        {containerInfo.yard_name || 'Ch∆∞a x√°c ƒë·ªãnh'}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {isDuplicate && existingContainers.length > 0 && (
                <div className="info-section">
                  <h4>CONTAINER ƒêANG T·ªíN T·∫†I</h4>
                  <div className="duplicate-list">
                    {existingContainers.slice(0, 5).map((container: any) => (
                      <div key={container.id} className="duplicate-item">
                        <div className="duplicate-header">
                          <span className="duplicate-container-no">{container.container_no}</span>
                          <span className={`duplicate-status status-badge ${getStatusColor(container.status)}`}>
                            {container.status}
                          </span>
                        </div>
                        <div className="duplicate-details">
                          <span>Lo·∫°i: {container.type || 'N/A'}</span>
                          <span>B√£i: {container.yard_name || 'N/A'}</span>
                        </div>
                      </div>
                    ))}
                    {existingContainers.length > 5 && (
                      <div className="duplicate-more">
                        V√† {existingContainers.length - 5} container kh√°c...
                      </div>
                    )}
                  </div>
                </div>
              )}
            </>
          )}
        </div>

        <div className="modal-footer">
          <button className="btn btn-secondary" onClick={onClose}>
            ƒê√≥ng
          </button>
          {containerInfo && (
            <button className="btn btn-primary" onClick={handleContinue}>
              Ti·∫øp t·ª•c
            </button>
          )}
        </div>
      </div>
    </div>
  );
};
