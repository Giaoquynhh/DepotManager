import { useEffect, useState } from 'react';
import { maintenanceApi } from '@services/maintenance';
import { mutate } from 'swr';
import ContainerRepairModal from './ContainerRepairModal';
import PendingContainersModalContainer from './PendingContainersModalContainer';

interface PendingContainersModalProps {
  isOpen: boolean;
  onClose: () => void;
  onRepairCreated?: () => void;
}

export default function PendingContainersModal({ isOpen, onClose, onRepairCreated }: PendingContainersModalProps) {
  // State qu·∫£n l√Ω danh s√°ch container IMPORT ƒëang ch·ªù ki·ªÉm tra
  const [requests, setRequests] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [checkResults, setCheckResults] = useState<{[key: string]: 'PASS' | 'FAIL' | 'FAIL_WITH_OPTIONS' | 'UNREPAIRABLE' | 'REPAIRABLE' | null}>({});
  const [isCreateRepairModalOpen, setIsCreateRepairModalOpen] = useState(false);
  const [selectedContainerForRepair, setSelectedContainerForRepair] = useState<any>(null);

  const fetchPendingContainers = async () => {
    if (!isOpen) return;
    
    setLoading(true);
    setError('');
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      // L·∫•y t·∫•t c·∫£ container c√≥ tr·∫°ng th√°i GATE_IN (s·∫Ω filter theo lo·∫°i IMPORT ·ªü frontend)
      const response = await fetch('/backend/gate/requests/search?status=GATE_IN&limit=100', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      // L·ªçc ch·ªâ l·∫•y container c√≥ lo·∫°i IMPORT
      const importContainers = (data.data || []).filter((request: any) => {
        return request.type === 'IMPORT';
      });
      
      console.log('üîç Total containers from API:', data.data?.length || 0);
      console.log('üîç Import containers after filtering:', importContainers.length);
      console.log('üîç Filtered containers:', importContainers);
      
      setRequests(importContainers);
      
    } catch (err: any) {
      console.error('Error fetching pending containers:', err);
      
      if (err.name === 'AbortError') {
        setError('Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.');
      } else if (err.name === 'TypeError' && err.message.includes('fetch')) {
        setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† ƒë·∫£m b·∫£o backend server ƒëang ch·∫°y.');
      } else if (err.message.includes('401')) {
        setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      } else if (err.message.includes('403')) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu n√†y.');
      } else if (err.message.includes('404')) {
        setError('API endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng li√™n h·ªá admin.');
      } else if (err.message.includes('500')) {
        setError('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError(err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCheckContainer = async (requestId: string) => {
    try {
      // C·∫≠p nh·∫≠t request status th√†nh CHECKING trong database
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }

      // C·∫≠p nh·∫≠t request status th√†nh CHECKING
      const updateResponse = await fetch(`/backend/requests/${requestId}/status`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: 'CHECKING' })
      });

      if (!updateResponse.ok) {
        const errorData = await updateResponse.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${updateResponse.status}: ${updateResponse.statusText}`);
      }

      // Lo·∫°i b·ªè container kh·ªèi danh s√°ch v√¨ ƒë√£ chuy·ªÉn sang CHECKING
      setRequests(prev => prev.filter(req => req.id !== requestId));

      // T·∫°o phi·∫øu s·ª≠a ch·ªØa cho container
      const container = requests.find(req => req.id === requestId);
      if (container) {
        const repairPayload = {
          code: `REP-${Date.now()}`,
          container_no: container.container_no || null,
          problem_description: 'Container ƒëang ƒë∆∞·ª£c ki·ªÉm tra',
          estimated_cost: 0,
          items: []
        };

        try {
          const repairResult = await maintenanceApi.createRepair(repairPayload);
          if (repairResult) {
            console.log('ƒê√£ t·∫°o phi·∫øu s·ª≠a ch·ªØa:', repairResult);
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu s·ª≠a ch·ªØa th√†nh CHECKING
            try {
              await maintenanceApi.updateRepairStatus(repairResult.id, 'CHECKING', 'Container ƒëang ƒë∆∞·ª£c ki·ªÉm tra');
              console.log('ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu s·ª≠a ch·ªØa th√†nh CHECKING');
            } catch (statusErr) {
              console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu s·ª≠a ch·ªØa:', statusErr);
            }
            // Refresh danh s√°ch phi·∫øu s·ª≠a ch·ªØa
            mutate(['repairs', 'CHECKING']);
            
            // Th√¥ng b√°o cho trang Repairs refresh danh s√°ch
            if (onRepairCreated) {
              onRepairCreated();
            }
          }
        } catch (repairErr) {
          console.error('L·ªói khi t·∫°o phi·∫øu s·ª≠a ch·ªØa:', repairErr);
          // Kh√¥ng throw error v√¨ vi·ªác t·∫°o phi·∫øu s·ª≠a ch·ªØa kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác ki·ªÉm tra
        }
      }

      alert('ƒê√£ b·∫Øt ƒë·∫ßu ki·ªÉm tra container. Tr·∫°ng th√°i ƒë√£ chuy·ªÉn sang CHECKING v√† ƒë√£ t·∫°o phi·∫øu s·ª≠a ch·ªØa.');
    } catch (err: any) {
      console.error('Error starting container check:', err);
      alert(`L·ªói khi b·∫Øt ƒë·∫ßu ki·ªÉm tra container: ${err.message}`);
    }
  };

  const handleCheckResult = async (requestId: string, result: 'PASS' | 'FAIL') => {
    try {
      // T√¨m container v√† phi·∫øu s·ª≠a ch·ªØa
      const container = requests.find(req => req.id === requestId);
      if (!container) {
        alert('Kh√¥ng t√¨m th·∫•y container');
        return;
      }

      // T√¨m phi·∫øu s·ª≠a ch·ªØa c√≥ tr·∫°ng th√°i CHECKING
      const repairTickets = await maintenanceApi.listRepairs('CHECKING');
      const repairTicket = repairTickets.find(ticket => ticket.container_no === container.container_no);
      
      if (repairTicket) {
        // Ho√†n th√†nh ki·ªÉm tra phi·∫øu s·ª≠a ch·ªØa
        await maintenanceApi.completeRepairCheck(repairTicket.id, result);
        
        // C·∫≠p nh·∫≠t request status n·∫øu c·∫ßn
        if (result === 'PASS') {
          // C·∫≠p nh·∫≠t request status th√†nh CHECKED
          try {
            const token = localStorage.getItem('token');
            if (token) {
              await fetch(`/backend/requests/${requestId}/status`, {
                method: 'PATCH',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: 'CHECKED' })
              });
            }
          } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t request status:', error);
          }
          
          setRequests(prev => prev.filter(req => req.id !== requestId));
          alert('K·∫øt qu·∫£ ki·ªÉm tra: ƒê·∫°t chu·∫©n. Container ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ch·ªù.');
        } else {
          setCheckResults(prev => ({
            ...prev,
            [requestId]: 'FAIL_WITH_OPTIONS'
          }));
        }
        
        // Refresh danh s√°ch phi·∫øu s·ª≠a ch·ªØa
        mutate(['repairs', 'CHECKING']);
        mutate(['repairs', 'CHECKED']);
        mutate(['repairs', 'REJECTED']);
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y phi·∫øu s·ª≠a ch·ªØa, x·ª≠ l√Ω nh∆∞ c≈©
        if (result === 'PASS') {
          setRequests(prev => prev.filter(req => req.id !== requestId));
          alert('K·∫øt qu·∫£ ki·ªÉm tra: ƒê·∫°t chu·∫©n. Container ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ch·ªù.');
        } else {
          setCheckResults(prev => ({
            ...prev,
            [requestId]: 'FAIL_WITH_OPTIONS'
          }));
        }
      }
    } catch (error: any) {
      console.error('L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ ki·ªÉm tra:', error);
      alert(`L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ ki·ªÉm tra: ${error?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  const handleFailOption = async (requestId: string, option: 'UNREPAIRABLE' | 'REPAIRABLE') => {
    try {
      if (option === 'UNREPAIRABLE') {
        // T√¨m container v√† phi·∫øu s·ª≠a ch·ªØa
        const container = requests.find(req => req.id === requestId);
        if (!container) {
          alert('Kh√¥ng t√¨m th·∫•y container');
          return;
        }

        // T√¨m phi·∫øu s·ª≠a ch·ªØa c√≥ tr·∫°ng th√°i CHECKING
        const repairTickets = await maintenanceApi.listRepairs('CHECKING');
        const repairTicket = repairTickets.find(ticket => ticket.container_no === container.container_no);
        
        if (repairTicket) {
          // Ho√†n th√†nh ki·ªÉm tra v·ªõi k·∫øt qu·∫£ FAIL (REJECTED)
          await maintenanceApi.completeRepairCheck(repairTicket.id, 'FAIL', 'Container kh√¥ng ƒë·∫°t chu·∫©n');
          
          // C·∫≠p nh·∫≠t request status th√†nh REJECTED
          try {
            const token = localStorage.getItem('token');
            if (token) {
              await fetch(`/backend/requests/${requestId}/status`, {
                method: 'PATCH',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: 'REJECTED' })
              });
            }
          } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t request status:', error);
          }
          
          // Refresh danh s√°ch phi·∫øu s·ª≠a ch·ªØa
          mutate(['repairs', 'CHECKING']);
          mutate(['repairs', 'REJECTED']);
        }

        const reason = 'Container kh√¥ng ƒë·∫°t chu·∫©n';
        setCheckResults(prev => ({
          ...prev,
          [requestId]: option
        }));
        setRequests(prev => prev.filter(req => req.id !== requestId));
        alert(`K·∫øt qu·∫£ ki·ªÉm tra: ${reason}. Container ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ch·ªù.`);
      } else {
        const container = requests.find(req => req.id === requestId);
        
        const findEquipmentForContainer = async () => {
          try {
            const token = localStorage.getItem('token');
            if (!token) {
              throw new Error('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }
            
            const response = await fetch(`/backend/maintenance/equipments?type=CONTAINER&code=${container?.container_no}`, {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            });
            
            if (response.ok) {
              const equipments = await response.json();
              if (equipments.data && equipments.data.length > 0) {
                const equipment = equipments.data[0];
                setSelectedContainerForRepair({
                  ...container,
                  equipment_id: equipment.id,
                  equipment_code: equipment.code
                });
              } else {
                setSelectedContainerForRepair({
                  ...container,
                  equipment_id: '1',
                  equipment_code: container?.container_no || 'Unknown'
                });
              }
            } else {
              setSelectedContainerForRepair({
                ...container,
                equipment_id: '1',
                equipment_code: container?.container_no || 'Unknown'
              });
            }
          } catch (err) {
            console.error('Error finding equipment:', err);
            setSelectedContainerForRepair({
              ...container,
              equipment_id: '1',
              equipment_code: container?.container_no || 'Unknown'
            });
          }
          
          setIsCreateRepairModalOpen(true);
        };
        
        findEquipmentForContainer();
      }
    } catch (error: any) {
      console.error('L·ªói khi x·ª≠ l√Ω t√πy ch·ªçn th·∫•t b·∫°i:', error);
      alert(`L·ªói khi x·ª≠ l√Ω t√πy ch·ªçn th·∫•t b·∫°i: ${error?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  const handleCreateRepairForContainer = async (form: any) => {
    try {
      if (!form.problem_description || form.problem_description.trim() === '') {
        alert('Vui l√≤ng nh·∫≠p m√¥ t·∫£ l·ªói');
        return;
      }
      
      if (form.estimated_cost < 0) {
        alert('Chi ph√≠ d·ª± to√°n kh√¥ng th·ªÉ √¢m');
        return;
      }
      
      if (form.estimated_cost === 0) {
        const confirmZero = window.confirm('Chi ph√≠ d·ª± to√°n l√† 0. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?');
        if (!confirmZero) {
          return;
        }
      }
      
      const payload = {
        code: `REP-${Date.now()}`,
        container_no: selectedContainerForRepair?.container_no || null,
        problem_description: form.problem_description.trim(),
        estimated_cost: Number(form.estimated_cost) || 0,
        items: []
      };
      
      const result = await maintenanceApi.createRepair(payload);
      
      if (!result) {
        throw new Error('API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu');
      }
      
      // C·∫≠p nh·∫≠t request status th√†nh CHECKED
      try {
        const token = localStorage.getItem('token');
        if (token) {
          await fetch(`/backend/requests/${selectedContainerForRepair.id}/status`, {
            method: 'PATCH',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: 'CHECKED' })
          });
        }
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t request status:', error);
      }
      
      setRequests(prev => prev.filter(req => req.id !== selectedContainerForRepair.id));
      setCheckResults(prev => ({
        ...prev,
        [selectedContainerForRepair.id]: 'REPAIRABLE'
      }));
      
      setIsCreateRepairModalOpen(false);
      setSelectedContainerForRepair(null);
      
      mutate(['repairs', 'CHECKING']);
      
      alert('ƒê√£ t·∫°o phi·∫øu s·ª≠a ch·ªØa th√†nh c√¥ng cho container! Container ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ch·ªù.');
      
    } catch (err: any) {
      console.error('Error creating repair:', err);
      
      let errorMessage = 'L·ªói khi t·∫°o phi·∫øu s·ª≠a ch·ªØa';
      
      if (err.response) {
        const status = err.response.status;
        const data = err.response.data;
        
        if (status === 400) {
          errorMessage = `L·ªói d·ªØ li·ªáu: ${data?.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'}`;
        } else if (status === 401) {
          errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
        } else if (status === 403) {
          errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o phi·∫øu s·ª≠a ch·ªØa.';
        } else if (status === 500) {
          errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
        } else {
          errorMessage = `L·ªói server (${status}): ${data?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`;
        }
      } else if (err.request) {
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
      } else {
        errorMessage = `L·ªói: ${err.message}`;
      }
      
      alert(errorMessage);
    }
  };

  useEffect(() => {
    if (isOpen) {
      fetchPendingContainers();
    }
  }, [isOpen]);

  const handleRetry = () => {
    fetchPendingContainers();
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="modal-overlay" style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000
      }}>
        <PendingContainersModalContainer
          loading={loading}
          error={error}
          requests={requests}
          checkResults={checkResults}
          onClose={onClose}
          onRetry={handleRetry}
          onCheckContainer={handleCheckContainer}
          onCheckResult={handleCheckResult}
          onFailOption={handleFailOption}
          title="Danh s√°ch container IMPORT ƒëang ch·ªù (GATE_IN)"
        />
      </div>

      <ContainerRepairModal
        isOpen={isCreateRepairModalOpen}
        onClose={() => {
          setIsCreateRepairModalOpen(false);
          setSelectedContainerForRepair(null);
        }}
        onSubmit={handleCreateRepairForContainer}
        selectedContainer={selectedContainerForRepair}
      />
    </>
  );
}
