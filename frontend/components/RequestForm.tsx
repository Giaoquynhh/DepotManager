import { useState } from 'react';
import { api } from '@services/api';

interface RequestFormProps {
  onSuccess: () => void;
  onCancel: () => void;
}

export default function RequestForm({ onSuccess, onCancel }: RequestFormProps) {
  const [form, setForm] = useState({ 
    type: 'IMPORT', 
    container_no: '', 
    eta: '' 
  });
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      // T·∫°o FormData ƒë·ªÉ upload file
      const formData = new FormData();
      formData.append('type', form.type);
      formData.append('container_no', form.container_no);
      if (form.eta) {
        formData.append('eta', form.eta);
      }
      if (selectedFile) {
        formData.append('document', selectedFile);
      }

      await api.post('/requests', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      setMessage('ƒê√£ t·∫°o y√™u c·∫ßu th√†nh c√¥ng!');
      setTimeout(() => {
        onSuccess();
      }, 1000);
    } catch (error: any) {
      setMessage(error?.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file - ki·ªÉm tra c·∫£ MIME type v√† extension
      const allowedMimeTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg'];
      const allowedExtensions = ['.pdf', '.jpg', '.jpeg', '.png'];
      
      const fileExtension = file.name.split('.').pop()?.toLowerCase();
      const hasValidMimeType = allowedMimeTypes.includes(file.type);
      const hasValidExtension = fileExtension && allowedExtensions.includes(`.${fileExtension}`);
      
      if (!hasValidMimeType && !hasValidExtension) {
        setMessage('Ch·ªâ ch·∫•p nh·∫≠n file PDF ho·∫∑c ·∫£nh (JPG, PNG)');
        return;
      }
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setMessage('File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB');
        return;
      }
      
      setSelectedFile(file);
      setMessage('');
    }
  };

  const removeFile = () => {
    setSelectedFile(null);
    setMessage('');
  };

  return (
    <form onSubmit={handleSubmit} className="request-form">
      <div className="form-group">
        <label htmlFor="type">Lo·∫°i y√™u c·∫ßu</label>
        <select 
          id="type"
          value={form.type} 
          onChange={e => setForm({...form, type: e.target.value})}
          required
        >
          <option value="IMPORT">Nh·∫≠p</option>
          <option value="EXPORT">Xu·∫•t</option>
          <option value="CONVERT">Chuy·ªÉn ƒë·ªïi</option>
        </select>
      </div>

      <div className="form-group">
        <label htmlFor="container_no">M√£ ƒë·ªãnh danh container</label>
        <input 
          id="container_no"
          type="text"
          placeholder="Nh·∫≠p m√£ container..." 
          value={form.container_no} 
          onChange={e => setForm({...form, container_no: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <label htmlFor="eta">Th·ªùi gian d·ª± ki·∫øn (ETA) <span className="required">*</span></label>
        <input 
          id="eta"
          type="datetime-local" 
          value={form.eta} 
          onChange={e => setForm({...form, eta: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <label htmlFor="document">Ch·ª©ng t·ª´ (PDF/·∫¢nh)</label>
        <div className="file-upload-container">
          <input
            id="document"
            type="file"
            accept=".pdf,.jpg,.jpeg,.png"
            onChange={handleFileChange}
            className="file-input"
          />
          <label htmlFor="document" className="file-upload-label">
            <span className="file-upload-icon">üìé</span>
            <span className="file-upload-text">
              {selectedFile ? selectedFile.name : 'Ch·ªçn file ch·ª©ng t·ª´...'}
            </span>
          </label>
        </div>
        {selectedFile && (
          <div className="file-preview">
            <span className="file-name">{selectedFile.name}</span>
            <button 
              type="button" 
              onClick={removeFile}
              className="file-remove"
            >
              ‚úï
            </button>
          </div>
        )}
        <small className="file-hint">
          ƒê·ªãnh d·∫°ng: PDF, JPG, PNG. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 10MB
        </small>
      </div>

      {message && (
        <div className={`form-message ${message.includes('th√†nh c√¥ng') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

      <div className="form-actions">
        <button 
          type="button" 
          className="btn btn-outline" 
          onClick={onCancel}
          disabled={loading}
        >
          H·ªßy
        </button>
        <button 
          type="submit" 
          className="btn btn-primary" 
          disabled={loading}
        >
          {loading ? 'ƒêang t·∫°o...' : 'T·∫°o y√™u c·∫ßu'}
        </button>
      </div>
    </form>
  );
}
