import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { api } from '@services/api';
import GateRequestTable from './GateRequestTable';
import GateSearchBar from './GateSearchBar';
import { useTranslation } from '../../../hooks/useTranslation';
import { useToast } from '../../../hooks/useToastHook';
import { useDebounce } from '../../../hooks/useDebounce';
import Link from 'next/link';


interface GateRequest {
  id: string;
  request_no?: string;        // S·ªë y√™u c·∫ßu
  container_no: string;
  type: string;
  status: string;
  eta?: string;
  forwarded_at?: string;
  license_plate?: string;     // Bi·ªÉn s·ªë xe
  driver_name?: string;       // T√™n t√†i x·∫ø
  driver_phone?: string;      // SƒêT t√†i x·∫ø
  time_in?: string;           // Th·ªùi gian v√†o
  time_out?: string;          // Th·ªùi gian ra
  appointment_time?: string;  // Th·ªùi gian h·∫πn
  booking_bill?: string;      // S·ªë Booking
  service_type?: string;      // Lo·∫°i d·ªãch v·ª• (t·ª´ container_type)
  container_type?: {          // Th√¥ng tin lo·∫°i container
    code: string;
  };
  docs: any[];
  attachments: any[];
}

interface GateDashboardProps {
  title?: string;
  lockedType?: string; // Kh√≥a lo·∫°i y√™u c·∫ßu (IMPORT/EXPORT)
}

export default function GateDashboard({ title, lockedType }: GateDashboardProps) {
  const router = useRouter();
  const [requests, setRequests] = useState<GateRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [sidebarVisible, setSidebarVisible] = useState(true); // Th√™m state cho sidebar
  const { t } = useTranslation();
  const { ToastContainer, showSuccess, showError } = useToast();


  const [searchParams, setSearchParams] = useState({
    status: '',
    statuses: '',
    container_no: '',
    type: lockedType ?? '',
    license_plate: '', // Th√™m tr∆∞·ªùng bi·ªÉn s·ªë xe
    page: 1,
    limit: 20
  });
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
    pages: 0
  });

  // Debounce c√°c tham s·ªë t√¨m ki·∫øm ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
  const debouncedContainerNo = useDebounce(searchParams.container_no, 500);
  const debouncedLicensePlate = useDebounce(searchParams.license_plate, 500);





  // Theo d√µi tr·∫°ng th√°i sidebar
  useEffect(() => {
    const checkSidebarState = () => {
      // Ki·ªÉm tra sidebar c√≥ visible kh√¥ng b·∫±ng c√°ch ki·ªÉm tra CSS ho·∫∑c DOM
      const sidebar = document.querySelector('.sidebar');
      
      if (sidebar) {
        // Sidebar ƒëang s·ª≠ d·ª•ng class 'closed' khi b·ªã thu g·ªçn (kh√¥ng ph·∫£i 'hidden')
        const isVisible = !sidebar.classList.contains('closed');
        console.log('üì± Sidebar visible:', isVisible);
        setSidebarVisible(isVisible);
      } else {
        console.log('‚ùå Sidebar not found');
        // Fallback: d√πng body class 'with-sidebar' n·∫øu c√≥
        const bodyHasWithSidebar = document.body.classList.contains('with-sidebar');
        setSidebarVisible(bodyHasWithSidebar);
      }
    };

    // Ki·ªÉm tra ban ƒë·∫ßu
    checkSidebarState();

    // Theo d√µi thay ƒë·ªïi sidebar
    const observer = new MutationObserver((mutations) => {
      console.log('üîÑ Sidebar mutations detected:', mutations);
      checkSidebarState();
    });
    
    const sidebar = document.querySelector('.sidebar');
    if (sidebar) {
      observer.observe(sidebar, {
        attributes: true,
        attributeFilter: ['class']
      });
      console.log('üëÄ Observer attached to sidebar');
    } else {
      console.log('‚ö†Ô∏è Sidebar not found, trying main-content');
      const mainContent = document.querySelector('.main-content');
      if (mainContent) {
        observer.observe(mainContent, {
          attributes: true,
          attributeFilter: ['style']
        });
        console.log('üëÄ Observer attached to main-content');
      }
    }

    // Lu√¥n theo d√µi thay ƒë·ªïi class c·ªßa body (with-sidebar)
    observer.observe(document.body, {
      attributes: true,
      attributeFilter: ['class']
    });

    // Cleanup
    return () => {
      console.log('üßπ Cleaning up observer');
      observer.disconnect();
    };
  }, []);

  const fetchRequests = async () => {
    try {
      setLoading(true);

      // S·ª≠ d·ª•ng debounced values cho t√¨m ki·∫øm
      const effectiveSearchParams = {
        ...searchParams,
        container_no: debouncedContainerNo,
        license_plate: debouncedLicensePlate
      };

      // Lu√¥n g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu, backend s·∫Ω x·ª≠ l√Ω logic m·∫∑c ƒë·ªãnh
      // Backend s·∫Ω hi·ªÉn th·ªã FORWARDED, GATE_IN, IN_YARD, IN_CAR khi kh√¥ng c√≥ filter

      const params = new URLSearchParams();
      // N·∫øu c√≥ lockedType th√¨ c∆∞·ª°ng b·ª©c type ƒë√≥
      const paramsSource: any = lockedType ? { ...effectiveSearchParams, type: lockedType } : effectiveSearchParams;
      // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã c·∫£ TH√äM M·ªöI (NEW_REQUEST) + c√°c tr·∫°ng th√°i ƒë√£ v√†o c·ªïng n·∫øu kh√¥ng ch·ªçn b·ªô l·ªçc
      // B·ªï sung DONE_LIFTING ƒë·ªÉ kh√¥ng ·∫©n khi xe n√¢ng ho√†n th√†nh
      if (!String(paramsSource.status || '').trim() && !String((paramsSource as any).statuses || '').trim()) {
        (paramsSource as any).statuses = 'NEW_REQUEST,FORWARDED,GATE_IN,IN_YARD,IN_CAR,FORKLIFTING,DONE_LIFTING';
      }

      Object.entries(paramsSource as Record<string, any>).forEach(([key, value]) => {
        // Th√™m t·∫•t c·∫£ tham s·ªë, backend s·∫Ω x·ª≠ l√Ω logic m·∫∑c ƒë·ªãnh
        if (key === 'page' || key === 'limit') {
          params.append(key, value.toString());
        } else if (value && value.toString().trim()) {
          params.append(key, value.toString().trim());
        }
      });

      // Lu√¥n g·ªçi API, backend s·∫Ω hi·ªÉn th·ªã d·ªØ li·ªáu m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ filter
      const response = await api.get(`/gate/requests/search?${params.toString()}`);
      
      setRequests(response.data.data);
      setPagination(response.data.pagination);
    } catch (error: any) {
      console.error('L·ªói khi t·∫£i danh s√°ch requests:', error);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
      if (error.response) {
        const { status, data } = error.response;
        
        if (status === 401) {
          // Redirect to login
          localStorage.removeItem('token');
          localStorage.removeItem('refresh_token');
          window.location.href = '/Login';
        }
        
        console.error('Response error:', {
          status,
          data,
          headers: error.response.headers
        });
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // G·ªçi API khi debounced values thay ƒë·ªïi
    fetchRequests();
  }, [debouncedContainerNo, debouncedLicensePlate, searchParams.status, searchParams.type, searchParams.page]);

  // Refetch data when route changes (to handle navigation from other pages)
  useEffect(() => {
    if (router.isReady) {
      fetchRequests();
    }
  }, [router.pathname, router.isReady]);

  const handleSearch = (newParams: Partial<typeof searchParams>) => {
    setSearchParams(prev => ({ ...prev, ...newParams, page: 1 }));
  };

  const handlePageChange = (page: number) => {
    setSearchParams(prev => ({ ...prev, page }));
  };

  const handleContainerSearch = (container_no: string) => {
    setSearchParams(prev => ({ ...prev, container_no, page: 1 }));
  };


  const handleLicensePlateChange = (license_plate: string) => {
    setSearchParams(prev => ({ ...prev, license_plate, page: 1 }));
  };



  return (
    <main className="container gate-page">
      <div className="page-header modern-header">
        <div className="header-content">
          <div className="header-left">
            <h1 className="page-title gradient gradient-ultimate">{title || t('pages.gate.title')}</h1>
          </div>
          <div className="header-right">
            <Link 
              href={lockedType === 'EXPORT' ? '/LiftContainer/GateHistory' : '/LowerContainer/GateHistory'} 
              className="btn btn-outline"
              style={{ display: 'flex', alignItems: 'center', gap: '8px', color: 'white' }}
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M3 4h13l3 7-3 7H3V4z"></path>
                <path d="M8 11l2 2 4-4"></path>
              </svg>
              <span>L·ªãch s·ª≠ ra v√†o</span>
            </Link>
          </div>
        </div>
      </div>



        <GateSearchBar
          searchParams={searchParams}
          onSearch={handleSearch}
          onContainerSearch={handleContainerSearch}
          onLicensePlateChange={handleLicensePlateChange}
          lockedType={lockedType}
        />

        <GateRequestTable
          requests={requests}
          loading={loading}
          onRefresh={fetchRequests}
          showSuccess={showSuccess}
          showError={showError}
        />

        {/* Pagination */}
        {pagination.pages > 1 && (
          <div className="pagination">
            <button
              onClick={() => handlePageChange(pagination.page - 1)}
              disabled={pagination.page <= 1}
              className="pagination-btn"
            >
              ‚Üê {t('common.previous')}
            </button>
            
            <button
              className="pagination-btn active"
              disabled
            >
              {pagination.page} / {pagination.pages}
            </button>
            
            <button
              onClick={() => handlePageChange(pagination.page + 1)}
              disabled={pagination.page >= pagination.pages}
              className="pagination-btn"
            >
              {t('common.next')} ‚Üí
            </button>
          </div>
        )}

        {/* Toast Container */}
        <ToastContainer />
    </main>
  );
}
