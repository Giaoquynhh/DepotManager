import React from 'react';
import { useTranslation } from '../../../hooks/useTranslation';

interface ImportRequestProps {
	localSearch: string;
	setLocalSearch: (search: string) => void;
	localType: string;
	setLocalType: (type: string) => void;
	localStatus: string;
	setLocalStatus: (status: string) => void;
}

export const ImportRequest: React.FC<ImportRequestProps> = ({
	localSearch,
	setLocalSearch,
	localType,
	setLocalType,
	localStatus,
	setLocalStatus
}) => {
	const { t } = useTranslation();

    // Ki·ªÉu d·ªØ li·ªáu cho 1 d√≤ng y√™u c·∫ßu n√¢ng container
    type LiftRequestRow = {
        id: string;
        shippingLine: string;
        requestNo: string;
        containerNo: string;
        containerType: string;
        bookingBill: string;
        serviceType: string; // m·∫∑c ƒë·ªãnh "N√¢ng container"
        status: string;
        customer: string;
        transportCompany: string; // Nh√† xe
        vehicleNumber: string; // S·ªë xe
        driverName: string; // T√†i x·∫ø
        driverPhone: string; // SDT T√†i x·∫ø
        appointmentTime?: string; // Th·ªùi gian h·∫πn
        timeIn?: string; // Gi·ªù v√†o th·ª±c t·∫ø
        timeOut?: string; // Gi·ªù ra th·ª±c t·∫ø
        totalAmount?: number; // T·ªïng ti·ªÅn
        paymentStatus?: string; // Tr·∫°ng th√°i thanh to√°n
        documentsCount?: number; // S·ªë ch·ª©ng t·ª´
        notes?: string; // Ghi ch√∫
    };

    // Helper sinh 15 d√≤ng mock
    const createMockLiftRows = (): LiftRequestRow[] => {
        const shippingLines = ['MSC', 'CMA CGM', 'COSCO', 'Maersk', 'Hapag-Lloyd', 'ONE', 'Yang Ming'];
        const customers = ['C√¥ng ty ABC', 'C√¥ng ty DEF', 'C√¥ng ty GHI', 'C√¥ng ty JKL', 'C√¥ng ty MNO'];
        const transports = ['Nh√† xe XYZ', 'Nh√† xe ABC', 'Nh√† xe DEF', 'Nh√† xe GHI', 'Nh√† xe JKL'];
        const statuses = ['PENDING', 'SCHEDULED', 'IN_PROGRESS', 'COMPLETED'];
        const types = ['20FT', '40FT'];
        const rows: LiftRequestRow[] = [];
        for (let i = 0; i < 15; i++) {
            const idx = i % shippingLines.length;
            const id = (i + 1).toString();
            const num = (i + 1).toString().padStart(3, '0');
            const contPrefix = ['MSCU', 'CMAU', 'COSU', 'MRKU', 'HLBU', 'ONEY', 'YMLU'][idx];
            const vehiclePrefix = ['51A', '51B', '51C', '51D', '51E'][i % 5];
            const hour = 8 + (i % 6); // 08..13
            const minute = (i * 7) % 60; // 00..59
            rows.push({
                id,
                shippingLine: `${shippingLines[idx]}`,
                requestNo: `REQ-2024-${num}`,
                containerNo: `${contPrefix}${(1000000 + i * 137).toString().slice(0, 7)}`,
                containerType: types[i % 2],
                bookingBill: `BK-2024-${num}`,
                serviceType: 'N√¢ng container',
                status: statuses[i % statuses.length],
                customer: customers[i % customers.length],
                transportCompany: transports[i % transports.length],
                vehicleNumber: `${vehiclePrefix}-${(10000 + i * 123).toString().slice(0, 5)}`,
                driverName: ['Nguy·ªÖn VƒÉn A','Tr·∫ßn Th·ªã B','L√™ VƒÉn C','Ph·∫°m VƒÉn D','Ho√†ng Th·ªã E'][i % 5],
                driverPhone: `090${(1234567 + i * 321).toString().slice(0,7)}`,
                appointmentTime: `2024-01-${(14 + (i % 5)).toString().padStart(2,'0')} ${hour.toString().padStart(2,'0')}:${minute.toString().padStart(2,'0')}`,
                timeIn: `2024-01-${(14 + (i % 5)).toString().padStart(2,'0')} ${hour.toString().padStart(2,'0')}:${((minute+5)%60).toString().padStart(2,'0')}`,
                timeOut: i % 3 === 2 ? `2024-01-${(14 + (i % 5)).toString().padStart(2,'0')} ${(hour+2).toString().padStart(2,'0')}:${((minute+20)%60).toString().padStart(2,'0')}` : (i % 3 === 1 ? null as any : `2024-01-${(14 + (i % 5)).toString().padStart(2,'0')} ${(hour+2).toString().padStart(2,'0')}:${((minute+30)%60).toString().padStart(2,'0')}`),
                totalAmount: 2000000 + (i % 6) * 250000,
                paymentStatus: i % 2 === 0 ? 'Ch∆∞a thanh to√°n' : 'ƒê√£ thanh to√°n',
                documentsCount: (i % 6) + 1,
                notes: ['Container c·∫ßn ki·ªÉm tra k·ªπ','Container h√†ng ƒëi·ªán t·ª≠','Container h√†ng may m·∫∑c','Container th·ª±c ph·∫©m',''] [i % 5]
            });
        }
        return rows;
    };

    // D·ªØ li·ªáu t·∫°m th·ªùi (placeholder). Khi c√≥ API list, thay b·∫±ng fetch t·ª´ service.
    const [rows, setRows] = React.useState<LiftRequestRow[]>(createMockLiftRows());

	return (
		<>
			<div className="gate-search-section">
				<div className="search-row">
					<div className="search-section">
						<input
							type="text"
							className="search-input"
							placeholder={t('pages.requests.searchPlaceholder')}
							aria-label={t('pages.requests.searchPlaceholder')}
							value={localSearch}
							onChange={(e) => setLocalSearch(e.target.value)}
						/>
					</div>
					<div className="filter-group">
						<select
							aria-label={t('pages.requests.typeLabel')}
							className="filter-select"
							value={localType}
							onChange={(e) => setLocalType(e.target.value)}
						>
							<option value="all">{t('pages.requests.allTypes')}</option>
							<option value="IMPORT">Y√™u c·∫ßu n√¢ng container</option>
						</select>
					</div>
					<div className="filter-group">
						<select
							aria-label={t('pages.requests.statusLabel')}
							className="filter-select"
							value={localStatus}
							onChange={(e) => setLocalStatus(e.target.value)}
						>
							<option value="all">{t('pages.requests.allStatuses')}</option>
							<option value="PENDING">Ch·ªù x·ª≠ l√Ω</option>
							<option value="SCHEDULED">ƒê√£ l√™n l·ªãch</option>
							<option value="IN_PROGRESS">ƒêang th·ª±c hi·ªán</option>
							<option value="COMPLETED">Ho√†n th√†nh</option>
							<option value="CANCELLED">ƒê√£ h·ªßy</option>
						</select>
					</div>
				</div>
			</div>

            <div className="gate-table-container">
                {rows.length === 0 ? (
                    <div className="table-empty modern-empty">
                        <div className="empty-icon">üì¶‚¨ÜÔ∏è</div>
                        <p>Ch∆∞a c√≥ y√™u c·∫ßu n√¢ng container n√†o</p>
                        <small>Kh√¥ng c√≥ y√™u c·∫ßu n√¢ng container n√†o ƒë·ªÉ x·ª≠ l√Ω</small>
                    </div>
                ) : (
                    <div style={{ overflowX: 'auto', border: '1px solid #e2e8f0', borderRadius: 8 }}>
                        <table style={{ width: '100%', borderCollapse: 'separate', borderSpacing: 0, minWidth: 1200 }}>
                            <thead>
                                <tr style={{ background: '#f8fafc', color: '#0f172a' }}>
                                    <th style={thStyle}>H√£ng t√†u</th>
                                    <th style={thStyle}>S·ªë y√™u c·∫ßu</th>
                                    <th style={thStyle}>S·ªë Cont</th>
                                    <th style={thStyle}>Lo·∫°i cont</th>
                                    <th style={thStyle}>S·ªë Booking/Bill</th>
                                    <th style={thStyle}>Lo·∫°i d·ªãch v·ª•</th>
                                    <th style={thStyle}>Tr·∫°ng th√°i</th>
                                    <th style={thStyle}>Kh√°ch h√†ng</th>
                                    <th style={thStyle}>Nh√† xe</th>
                                    <th style={thStyle}>S·ªë xe</th>
                                    <th style={thStyle}>T√†i x·∫ø</th>
                                    <th style={thStyle}>SDT T√†i x·∫ø</th>
                                    <th style={thStyle}>Th·ªùi gian h·∫πn</th>
                                    <th style={thStyle}>Gi·ªù v√†o th·ª±c t·∫ø</th>
                                    <th style={thStyle}>Gi·ªù ra th·ª±c t·∫ø</th>
                                    <th style={thStyle}>T·ªïng ti·ªÅn</th>
                                    <th style={thStyle}>Tr·∫°ng th√°i thanh to√°n</th>
                                    <th style={thStyle}>Ch·ª©ng t·ª´</th>
                                    <th style={thStyle}>Ghi ch√∫</th>
                                    <th style={thStyle}>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                {rows.map((r) => (
                                    <tr key={r.id} style={{ borderTop: '1px solid #f1f5f9' }}>
                                        <td style={tdStyle}>{r.shippingLine}</td>
                                        <td style={tdStyle}>{r.requestNo}</td>
                                        <td style={tdStyle}>{r.containerNo}</td>
                                        <td style={tdStyle}>{r.containerType}</td>
                                        <td style={tdStyle}>{r.bookingBill}</td>
                                        <td style={tdStyle}>N√¢ng container</td>
                                        <td style={tdStyle}>{r.status}</td>
                                        <td style={tdStyle}>{r.customer}</td>
                                        <td style={tdStyle}>{r.transportCompany}</td>
                                        <td style={tdStyle}>{r.vehicleNumber}</td>
                                        <td style={tdStyle}>{r.driverName}</td>
                                        <td style={tdStyle}>{r.driverPhone}</td>
                                        <td style={tdStyle}>{r.appointmentTime || '-'}</td>
                                        <td style={tdStyle}>{r.timeIn || '-'}</td>
                                        <td style={tdStyle}>{r.timeOut || '-'}</td>
                                        <td style={tdStyle}>{typeof r.totalAmount === 'number' ? r.totalAmount.toLocaleString('vi-VN') : '-'}</td>
                                        <td style={tdStyle}>{r.paymentStatus || '-'}</td>
                                        <td style={tdStyle}>
                                            <button type="button" className="btn btn-light" style={{ padding: '6px 10px', fontSize: 12 }}>
                                                {r.documentsCount ?? 0} file
                                            </button>
                                        </td>
                                        <td style={tdStyle}>{r.notes || ''}</td>
                                        <td style={{ ...tdStyle, whiteSpace: 'nowrap' }}>
                                            <button type="button" className="btn btn-primary" style={{ padding: '6px 10px', fontSize: 12, marginRight: 8 }}>
                                                C·∫≠p nh·∫≠t th√¥ng tin
                                            </button>
                                            <button type="button" className="btn btn-danger" style={{ padding: '6px 10px', fontSize: 12 }}>
                                                H·ªßy
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>
		</>
	);
};

// Styles cho table cells
const thStyle: React.CSSProperties = {
    position: 'sticky',
    top: 0,
    zIndex: 1,
    textAlign: 'left',
    fontWeight: 700,
    fontSize: 12,
    textTransform: 'uppercase',
    letterSpacing: 0.3,
    padding: '12px 16px',
    borderBottom: '1px solid #e2e8f0'
};

const tdStyle: React.CSSProperties = {
    padding: '12px 16px',
    fontSize: 14,
    color: '#0f172a',
    verticalAlign: 'top',
    background: 'white',
    borderTop: '1px solid #f1f5f9'
};
