import React from 'react';
import DepotChatMini from './DepotChatMini';

interface DepotRequestTableProps {
	data?: any[];
	loading?: boolean;
	onDocumentClick?: (doc: any) => void;
	onToggleSupplement?: (requestId: string) => void;
	onChangeAppointment?: (requestId: string) => void;
	onReject?: (requestId: string) => void;
	onChangeStatus?: (id: string, status: string) => void;
	onSendPayment?: (id: string) => void;
	onSoftDelete?: (id: string, scope: string) => void;
	onViewInvoice?: (id: string) => void;
	onSendCustomerConfirmation?: (id: string) => void;
	onAddDocument?: (requestId: string, containerNo: string) => void;
	loadingId?: string;
	// Chat props
	activeChatRequests?: Set<string>;
	onToggleChat?: (requestId: string) => void;
	onCloseChat?: (requestId: string) => void;
}

export default function DepotRequestTable({ 
	data, 
	loading, 
	onDocumentClick,
	onToggleSupplement,
	onChangeAppointment,
	onReject,
	onChangeStatus,
	onSendPayment,
	onSoftDelete,
	onViewInvoice,
	onSendCustomerConfirmation,
	onAddDocument,
	loadingId,
	// Chat props
	activeChatRequests = new Set(),
	onToggleChat,
	onCloseChat
}: DepotRequestTableProps) {
	
	// Function ƒë·ªÉ l·∫•y v·ªã tr√≠ container (t∆∞∆°ng t·ª± nh∆∞ tr√™n ContainersPage)
	const getContainerLocation = (containerNo: string) => {
		if (!containerNo) return null;
		
		// Logic ƒë·ªÉ l·∫•y v·ªã tr√≠ container
		// C√≥ th·ªÉ c·∫ßn API call ho·∫∑c data t·ª´ props
		// T·∫°m th·ªùi s·ª≠ d·ª•ng logic m√¥ ph·ªèng d·ª±a tr√™n container_no
		
		// N·∫øu c√≥ container data v·ªõi v·ªã tr√≠ chi ti·∫øt
		if (data && data.length > 0) {
			const containerData = data.find(item => item.container_no === containerNo);
			if (containerData && containerData.yard && containerData.block && containerData.slot) {
				return `${containerData.yard} / ${containerData.block} / ${containerData.slot}`;
			}
		}
		
		// Fallback: T·∫°o v·ªã tr√≠ m√¥ ph·ªèng d·ª±a tr√™n container_no
		// Trong th·ª±c t·∫ø, c·∫ßn l·∫•y t·ª´ API containers
		if (containerNo === 'ISO 9999') {
			return 'Depot A / B1 / B1-10'; // V·ªã tr√≠ m√¥ ph·ªèng
		}
		
		return null;
	};
	
	// TODO: Implement API call ƒë·ªÉ l·∫•y v·ªã tr√≠ container th·ª±c t·∫ø
	// const getContainerLocationFromAPI = async (containerNo: string) => {
	// 	try {
	// 		const response = await api.get(`/containers/${containerNo}/location`);
	// 		return response.data.location; // Format: "Depot A / B1 / B1-10"
	// 	} catch (error) {
	// 		console.error('Error fetching container location:', error);
	// 		return null;
	// 	}
	// };
	const getStatusBadge = (status: string) => {
		const statusConfig: Record<string, { label: string; className: string }> = {
			PENDING: { label: 'Ch·ªù x·ª≠ l√Ω', className: 'status-pending' },
			PICK_CONTAINER: { label: 'ƒêang ch·ªçn container', className: 'status-pick-container' },
			RECEIVED: { label: 'ƒê√£ nh·∫≠n', className: 'status-received' },
			COMPLETED: { label: 'Ho√†n th√†nh', className: 'status-completed' },
			EXPORTED: { label: 'ƒê√£ xu·∫•t', className: 'status-exported' },
			REJECTED: { label: 'T·ª´ ch·ªëi', className: 'status-rejected' },
			IN_YARD: { label: 'ƒê√£ ·ªü trong b√£i', className: 'status-in-yard' },
			LEFT_YARD: { label: 'ƒê√£ r·ªùi kho', className: 'status-left-yard' },
			PENDING_ACCEPT: { label: 'Ch·ªù ch·∫•p nh·∫≠n', className: 'status-pending-accept' },
			CHECKING: { label: 'ƒêang ki·ªÉm tra', className: 'status-checking' },
			CHECKED: { label: 'ƒê√£ ki·ªÉm tra', className: 'status-checked' },
			POSITIONED: { label: 'ƒê√£ x·∫øp ch·ªó trong b√£i', className: 'status-positioned' },
			FORKLIFTING: { label: 'ƒêang n√¢ng/h·∫° container', className: 'status-forklifting' }
		};

		const config = statusConfig[status] || { label: status, className: 'status-default' };
		return (
			<span className={`status-badge ${config.className}`}>
				{config.label}
			</span>
		);
	};

	const getTypeLabel = (type: string) => {
		const typeLabels: Record<string, string> = {
			IMPORT: 'Nh·∫≠p',
			EXPORT: 'Xu·∫•t',
			CONVERT: 'Chuy·ªÉn ƒë·ªïi'
		};
		return typeLabels[type as keyof typeof typeLabels] || type;
	};

	if (loading) {
		return (
			<div className="table-loading">
				<div className="loading-spinner"></div>
				<p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
			</div>
		);
	}

	if (!data || data.length === 0) {
		return (
			<div className="table-empty">
				<div className="empty-icon">üìã</div>
				<p>Ch∆∞a c√≥ y√™u c·∫ßu n√†o</p>
				<small>Kh√¥ng c√≥ y√™u c·∫ßu n√†o ƒë·ªÉ x·ª≠ l√Ω</small>
			</div>
		);
	}

	return (
		<div className="table-container">
			<table className="table table-modern">
				<thead>
					<tr>
						<th>Lo·∫°i</th>
						<th>Container</th>
						<th>V·ªã tr√≠</th>
						<th>ETA</th>
						<th>Tr·∫°ng th√°i</th>
						<th>Ch·ª©ng t·ª´</th>
						<th>Chat</th>
						<th>H√†nh ƒë·ªông</th>
					</tr>
				</thead>
				<tbody>
					{data.map((item) => {
						// Demo data - Ch·ªâ c√≥ supplement cho m·ªôt s·ªë SCHEDULED orders (kh√¥ng ph·∫£i t·∫•t c·∫£)
						const demoItem = {
							...item,
							has_supplement_documents: item.has_supplement_documents || (item.status === 'SCHEDULED' && item.container_no === 'ISO 1234' ? true : false),
							last_supplement_update: item.last_supplement_update || (item.status === 'SCHEDULED' && item.container_no === 'ISO 1234' ? new Date(Date.now() - Math.random() * 86400000).toISOString() : null)
						};
						
						return (
						<tr key={item.id} className="table-row">
							<td>
								<span className="request-type">
									{getTypeLabel(item.type)}
								</span>
							</td>
													<td>
							<div className="container-info">
								{item.container_no || '-'}
							</div>
						</td>
						{/* 
							C·ªôt V·ªã tr√≠: Ch·ªâ hi·ªÉn th·ªã cho EXPORT requests, ƒë·ªÉ tr·ªëng cho IMPORT (s·∫Ω b·ªï sung logic sau)
							Logic hi·ªÉn th·ªã:
							1. S·ª≠ d·ª•ng getContainerLocation() ƒë·ªÉ l·∫•y v·ªã tr√≠ th·ª±c t·∫ø t·ª´ container data
							2. N·∫øu c√≥ v·ªã tr√≠ -> hi·ªÉn th·ªã v·ªã tr√≠ (Yard / Block / Slot)
							3. N·∫øu kh√¥ng c√≥ v·ªã tr√≠ -> hi·ªÉn th·ªã "Ch∆∞a x√°c ƒë·ªãnh"
							
							V·ªã tr√≠ ƒë∆∞·ª£c l·∫•y t∆∞∆°ng t·ª± nh∆∞ tr√™n ContainersPage
						*/}
						<td>
							<div className="location-info">
								{item.type === 'EXPORT' ? (
									<span className="location-badge">
										üìç {getContainerLocation(item.container_no) || 'Ch∆∞a x√°c ƒë·ªãnh'}
									</span>
								) : (
									<span className="location-na">-</span>
								)}
							</div>
						</td>
						<td>
							<div className="eta-info">
								{item.eta ? (
									<div className="eta-date">
										{new Date(item.eta).toLocaleString('vi-VN')}
									</div>
								) : (
									<div className="eta-empty">-</div>
								)}
							</div>
						</td>
							<td>
								{getStatusBadge(item.status)}
							</td>
							<td>
								{item.documents && item.documents.length > 0 ? (
									<div className="document-badges">
										{item.documents.map((doc: any) => (
											<button
												key={doc.id}
												className="document-badge clickable"
												onClick={() => onDocumentClick?.(doc)}
												title={`Xem ${doc.name}`}
											>
												üìé {doc.name}
											</button>
										))}
									</div>
								) : (
									<div className="document-actions">
										{/* Hi·ªÉn th·ªã n√∫t "Th√™m ch·ª©ng t·ª´" cho y√™u c·∫ßu EXPORT v·ªõi tr·∫°ng th√°i PICK_CONTAINER */}
										{item.type === 'EXPORT' && item.status === 'PICK_CONTAINER' && onAddDocument ? (
											<button
												className="btn btn-sm btn-primary"
												onClick={() => onAddDocument(item.id, item.container_no || '')}
												title="Th√™m ch·ª©ng t·ª´ cho container"
												style={{
													background: '#3b82f6',
													color: 'white',
													border: 'none',
													borderRadius: '6px',
													padding: '6px 12px',
													fontSize: '12px',
													cursor: 'pointer',
													display: 'flex',
													alignItems: 'center',
													gap: '4px'
												}}
											>
												üìé Th√™m ch·ª©ng t·ª´
											</button>
										) : (
											<span className="no-document">-</span>
										)}
									</div>
								)}
							</td>

							<td>
								<div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '4px' }}>
									{/* Chat button - hi·ªÉn th·ªã cho c√°c tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p chat */}
									{(demoItem.status === 'SCHEDULED' || 
									  demoItem.status === 'APPROVED' || 
									  demoItem.status === 'IN_PROGRESS' || 
									  demoItem.status === 'COMPLETED' || 
									  demoItem.status === 'EXPORTED' ||
									  demoItem.status === 'PENDING_ACCEPT') && (
										<button
											onClick={() => onToggleChat?.(demoItem.id)}
											className="depot-chat-mini-trigger"
											title={activeChatRequests.has(demoItem.id) ? "ƒê√≥ng chat" : "M·ªü chat v·ªõi kh√°ch h√†ng"}
											style={{
												background: activeChatRequests.has(demoItem.id) ? '#10b981' : '#3b82f6',
												color: 'white',
												border: 'none',
												borderRadius: '6px',
												padding: '6px 12px',
												fontSize: '12px',
												cursor: 'pointer',
												display: 'flex',
												alignItems: 'center',
												gap: '4px'
											}}
										>
											{activeChatRequests.has(demoItem.id) ? 'üí¨ ƒê√≥ng Chat' : 'üí¨ M·ªü Chat'}
										</button>
									)}
									
									{/* Chat window - hi·ªÉn th·ªã khi chat ƒë∆∞·ª£c m·ªü */}
									{activeChatRequests.has(demoItem.id) && (
										<DepotChatMini
											requestId={demoItem.id}
											containerNo={demoItem.container_no}
											requestType={demoItem.type}
											requestStatus={demoItem.status}
											hasSupplementDocuments={demoItem.has_supplement_documents}
											lastSupplementUpdate={demoItem.last_supplement_update}
											onClose={() => onCloseChat?.(demoItem.id)}
										/>
									)}
									
									{/* Indicator cho supplement documents */}
									{demoItem.has_supplement_documents && (
										<div style={{
											fontSize: '10px',
											color: '#f59e0b',
											background: '#fef3c7',
											padding: '2px 6px',
											borderRadius: '10px',
											border: '1px solid #f59e0b'
										}}>
											üìã C√≥ t√†i li·ªáu b·ªï sung
										</div>
									)}
								</div>
							</td>
							<td>
								<div className="action-buttons">
									{/* PENDING Status Actions */}
									{item.status === 'PENDING' && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-primary"
												disabled={loadingId === item.id + 'RECEIVED'}
												onClick={() => onChangeStatus?.(item.id, 'RECEIVED')}
												title="Ti·∫øp nh·∫≠n y√™u c·∫ßu"
											>
												{loadingId === item.id + 'RECEIVED' ? '‚è≥' : '‚úÖ'} Ti·∫øp nh·∫≠n
											</button>
											<button
												className="btn btn-sm btn-danger"
												disabled={loadingId === item.id + 'REJECTED'}
												onClick={() => onChangeStatus?.(item.id, 'REJECTED')}
												title="T·ª´ ch·ªëi y√™u c·∫ßu"
											>
												{loadingId === item.id + 'REJECTED' ? '‚è≥' : '‚ùå'} T·ª´ ch·ªëi
											</button>
										</div>
									)}

									{/* RECEIVED Status Actions */}
									{item.status === 'RECEIVED' && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-success"
												disabled={loadingId === item.id + 'COMPLETED'}
												onClick={() => onChangeStatus?.(item.id, 'COMPLETED')}
												title="Ti·∫øp nh·∫≠n v√† ho√†n t·∫•t"
											>
												{loadingId === item.id + 'COMPLETED' ? '‚è≥' : '‚úÖ'} Ho√†n t·∫•t
											</button>
											<button
												className="btn btn-sm btn-danger"
												disabled={loadingId === item.id + 'REJECTED'}
												onClick={() => onChangeStatus?.(item.id, 'REJECTED')}
												title="T·ª´ ch·ªëi y√™u c·∫ßu"
											>
												{loadingId === item.id + 'REJECTED' ? '‚è≥' : '‚ùå'} T·ª´ ch·ªëi
											</button>
										</div>
									)}

									{/* SCHEDULED Status Actions */}
									{item.status === 'SCHEDULED' && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-success"
												onClick={() => onChangeAppointment?.(item.id)}
												title="Thay ƒë·ªïi l·ªãch h·∫πn v·ªõi kh√°ch h√†ng"
											>
												üìÖ Thay ƒë·ªïi l·ªãch h·∫πn
											</button>
											<button
												className="btn btn-sm btn-danger"
												disabled={loadingId === item.id + 'REJECTED'}
												onClick={() => onReject?.(item.id)}
												title="T·ª´ ch·ªëi y√™u c·∫ßu"
											>
												{loadingId === item.id + 'REJECTED' ? '‚è≥' : '‚ùå'} T·ª´ ch·ªëi
											</button>
										</div>
									)}

									{/* COMPLETED Status Actions */}
									{item.status === 'COMPLETED' && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-warning"
												disabled={loadingId === item.id + 'EXPORTED'}
												onClick={() => onChangeStatus?.(item.id, 'EXPORTED')}
												title="Xu·∫•t kho"
											>
												{loadingId === item.id + 'EXPORTED' ? '‚è≥' : 'üì¶'} Xu·∫•t kho
											</button>
											<button
												className="btn btn-sm btn-info"
												disabled={loadingId === item.id + 'PAY'}
												onClick={() => onSendPayment?.(item.id)}
												title="G·ª≠i y√™u c·∫ßu thanh to√°n"
											>
												{loadingId === item.id + 'PAY' ? '‚è≥' : 'üí∞'} Thanh to√°n
											</button>
										</div>
									)}

									{/* PENDING_ACCEPT Status Actions */}
									{item.status === 'PENDING_ACCEPT' && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-info"
												disabled={loadingId === item.id + 'VIEW_INVOICE'}
												onClick={() => onViewInvoice?.(item.id)}
												title="Xem h√≥a ƒë∆°n s·ª≠a ch·ªØa"
											>
												{loadingId === item.id + 'VIEW_INVOICE' ? '‚è≥' : 'üìÑ'} Xem h√≥a ƒë∆°n
											</button>
											<button
												className="btn btn-sm btn-success"
												disabled={loadingId === item.id + 'CONFIRM'}
												onClick={() => onSendCustomerConfirmation?.(item.id)}
												title="G·ª≠i x√°c nh·∫≠n cho kh√°ch h√†ng"
											>
												{loadingId === item.id + 'CONFIRM' ? '‚è≥' : 'üìß'} G·ª≠i x√°c nh·∫≠n
											</button>
										</div>
									)}

									{/* Soft Delete Actions */}
									{['REJECTED', 'COMPLETED', 'EXPORTED'].includes(item.status) && (
										<div className="action-group">
											<button
												className="btn btn-sm btn-outline"
												disabled={loadingId === item.id + 'DELETE'}
												onClick={() => {
													if (window.confirm('X√≥a kh·ªèi danh s√°ch Kho?\nRequest v·∫´n hi·ªÉn th·ªã tr·∫°ng th√°i T·ª´ ch·ªëi b√™n Kh√°ch h√†ng.')) {
														onSoftDelete?.(item.id, 'depot');
													}
												}}
												title="X√≥a kh·ªèi danh s√°ch Kho"
											>
												{loadingId === item.id + 'DELETE' ? '‚è≥' : 'üóëÔ∏è'} X√≥a
											</button>
										</div>
									)}
								</div>
							</td>
					</tr>
						);
					})}
				</tbody>
			</table>
		</div>
	);
}
