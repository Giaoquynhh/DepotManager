import React from 'react';
import { useRouter } from 'next/router';
import Header from '@components/Header';
import Card from '@components/Card';
import { useTranslation } from '../hooks/useTranslation';
import { useToast } from '../hooks/useToastHook';
import { useRouteRefresh } from '../hooks/useRouteRefresh';
import { requestService } from '../services/requests';
import { maintenanceApi } from '../services/maintenance';
import { setupService, Customer } from '../services/setupService';
import { containersApi } from '../services/containers';
import { yardApi } from '../services/yard';
import { reportsService, ContainerItem } from '../services/reports';
import { sealsApi } from '../services/seals';

// Interface cho d·ªØ li·ªáu b·∫£ng
interface TableData {
  id: string;
  shippingLine: string; // H√£ng t√†u
  containerNumber: string; // S·ªë Cont
  containerType: string; // Lo·∫°i Cont
  status: string; // Tr·∫°ng th√°i
  repairTicketStatus?: string; // Tr·∫°ng th√°i phi·∫øu s·ª≠a ch·ªØa (n·∫øu c√≥)
  customer: string; // Kh√°ch h√†ng
  documents: string; // Ch·ª©ng t·ª´
  documentsCount?: number; // S·ªë l∆∞·ª£ng ch·ª©ng t·ª´
  repairImagesCount?: number; // S·ªë l∆∞·ª£ng ·∫£nh ki·ªÉm tra
  repairTicketId?: string; // ID c·ªßa repair ticket
  position?: string; // V·ªã tr√≠ b√£i
  sealNumber?: string; // S·ªë seal
  demDet?: string; // DEM/DET
  attachments?: any[]; // Danh s√°ch file ƒë√≠nh k√®m ·ªü m·ª©c container
  containerQuality?: 'GOOD' | 'NEED_REPAIR' | 'UNKNOWN'; // Tr·∫°ng th√°i hi·ªÉn th·ªã
  yardName?: string;
  blockCode?: string;
  slotCode?: string;
  requestType?: 'IMPORT' | 'EXPORT'; // Lo·∫°i request ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng tr·∫°ng th√°i
}

export default function ManagerCont(){
  const router = useRouter();
  const { t } = useTranslation();
  const { showSuccess, showError, ToastContainer } = useToast();
  const [localSearch, setLocalSearch] = React.useState('');
  const [localType, setLocalType] = React.useState('all');
  const [localStatus, setLocalStatus] = React.useState('all');
  const [includeEmptyInYard, setIncludeEmptyInYard] = React.useState(true); // T·ª± ƒë·ªông b·∫≠t m·∫∑c ƒë·ªãnh
  const [refreshTrigger, setRefreshTrigger] = React.useState(0);
  const routeRefreshKey = useRouteRefresh();
  const [loading, setLoading] = React.useState(false);
  
  // Pagination states
  const [currentPage, setCurrentPage] = React.useState(1);
  const [itemsPerPage] = React.useState(6);
  const [totalItems, setTotalItems] = React.useState(0);
  
  // Map tr·∫°ng th√°i container -> nh√£n ti·∫øng Vi·ªát (ƒë·ªìng b·ªô v·ªõi Maintenance/Repairs)
  const getContainerStatusLabel = (ticketStatus?: string, containerQuality?: 'GOOD' | 'NEED_REPAIR' | 'UNKNOWN') => {
    // N·∫øu c√≥ containerQuality t·ª´ logic x·ª≠ l√Ω, ∆∞u ti√™n s·ª≠ d·ª•ng n√≥
    if (containerQuality === 'GOOD') return 'Container t·ªët';
    if (containerQuality === 'NEED_REPAIR') return 'C·∫ßn s·ª≠a ch·ªØa';
    
    // Fallback v·ªÅ logic c≈© n·∫øu c√≥ ticketStatus
    if (!ticketStatus) return 'Kh√¥ng x√°c ƒë·ªãnh';
    const map: Record<string, string> = {
      'COMPLETE': 'Container t·ªët',
      'COMPLETE_NEEDREPAIR': 'Container x·∫•u c√≥ th·ªÉ s·ª≠a ch·ªØa',
      'COMPLETE_NEED_REPAIR': 'Container x·∫•u c√≥ th·ªÉ s·ª≠a ch·ªØa',
      'PENDING': 'Ch∆∞a ki·ªÉm tra',
      'REJECT': 'Container x·∫•u kh√¥ng th·ªÉ s·ª≠a ch·ªØa',
      'REJECTED': 'Container x·∫•u kh√¥ng th·ªÉ s·ª≠a ch·ªØa',
      // Th√™m c√°c tr·∫°ng th√°i kh√°c ƒë·ªÉ t∆∞∆°ng th√≠ch
      'CHECKING': 'ƒêang ki·ªÉm tra',
      'PENDING_ACCEPT': 'Ch·ªù x√°c nh·∫≠n',
      'REPAIRING': 'ƒêang s·ª≠a ch·ªØa',
      'CHECKED': 'ƒê√£ ki·ªÉm tra'
    };
    return map[ticketStatus] || 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  // Map tr·∫°ng th√°i -> CSS class cho badge
  const getStatusBadgeClass = (status?: string, containerQuality?: 'GOOD' | 'NEED_REPAIR' | 'UNKNOWN') => {
    // N·∫øu c√≥ containerQuality t·ª´ logic x·ª≠ l√Ω, ∆∞u ti√™n s·ª≠ d·ª•ng n√≥
    if (containerQuality === 'GOOD') return 'status-ho√†n-th√†nh';
    if (containerQuality === 'NEED_REPAIR') return 'status-c·∫ßn-s·ª≠a-ch·ªØa';
    
    // Fallback v·ªÅ logic c≈© n·∫øu c√≥ status
    if (!status) return 'status-ƒëang-x·ª≠-l√Ω';
    const map: Record<string, string> = {
      'COMPLETE': 'status-ho√†n-th√†nh',
      'COMPLETE_NEEDREPAIR': 'status-c·∫ßn-s·ª≠a-ch·ªØa',
      'COMPLETE_NEED_REPAIR': 'status-c·∫ßn-s·ª≠a-ch·ªØa',
      'PENDING': 'status-ƒëang-x·ª≠-l√Ω',
      'REJECT': 'status-t·ª´-ch·ªëi',
      'REJECTED': 'status-t·ª´-ch·ªëi',
      'CHECKING': 'status-ƒëang-x·ª≠-l√Ω',
      'PENDING_ACCEPT': 'status-ƒëang-x·ª≠-l√Ω',
      'REPAIRING': 'status-ƒëang-x·ª≠-l√Ω',
      'CHECKED': 'status-ho√†n-th√†nh'
    };
    return map[status] || 'status-ƒëang-x·ª≠-l√Ω';
  };

  // Map tr·∫°ng th√°i request -> nh√£n ti·∫øng Vi·ªát (c·∫ßn bi·∫øt lo·∫°i request ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng)
  const getRequestStatusLabel = (status: string, requestType?: string) => {
    if (!status) return 'Kh√¥ng x√°c ƒë·ªãnh';
    
    const map: Record<string, string> = {
      'PENDING': 'Th√™m m·ªõi',
      'NEW_REQUEST': 'Th√™m m·ªõi',
      'CHECKED': 'Ch·∫•p nh·∫≠n',
      'GATE_IN': 'ƒê√£ v√†o c·ªïng',
      'FORKLIFTING': requestType === 'EXPORT' ? 'ƒêang n√¢ng container' : 'ƒêang h·∫° container',
      'DONE_LIFTING': 'ƒê√£ n√¢ng xong',
      'GATE_OUT': 'Xe ƒë√£ r·ªùi kh·ªèi b√£i',
      'IN_YARD': 'ƒê√£ h·∫° th√†nh c√¥ng', // Ch·ªâ d√†nh cho IMPORT
      'EMPTY_IN_YARD': 'Container trong b√£i'
    };
    return map[status] || status;
  };

  // Map tr·∫°ng th√°i request -> CSS class cho badge
  const getRequestStatusBadgeClass = (status: string) => {
    if (!status) return 'status-unknown';
    
    const map: Record<string, string> = {
      'PENDING': 'status-ƒëang-x·ª≠-l√Ω',
      'NEW_REQUEST': 'status-ƒëang-x·ª≠-l√Ω',
      'CHECKED': 'status-ho√†n-th√†nh',
      'GATE_IN': 'status-ƒëang-x·ª≠-l√Ω',
      'FORKLIFTING': 'status-ƒëang-x·ª≠-l√Ω',
      'DONE_LIFTING': 'status-ho√†n-th√†nh',
      'IN_YARD': 'status-ho√†n-th√†nh',
      'GATE_OUT': 'status-ho√†n-th√†nh',
      'EMPTY_IN_YARD': 'status-empty-in-yard'
    };
    return map[status] || 'status-unknown';
  };
  
  // Documents modal states
  const [isDocsOpen, setIsDocsOpen] = React.useState(false);
  const [selectedRequest, setSelectedRequest] = React.useState<{id: string, containerNo: string} | null>(null);
  const [attachments, setAttachments] = React.useState<any[]>([]);
  const [docsLoading, setDocsLoading] = React.useState(false);
  const [docsError, setDocsError] = React.useState<string | null>(null);

  // Repair images modal states
  const [isRepairImagesOpen, setIsRepairImagesOpen] = React.useState(false);
  const [selectedRepairTicket, setSelectedRepairTicket] = React.useState<{id: string, containerNo: string} | null>(null);
  const [repairImages, setRepairImages] = React.useState<any[]>([]);
  const [repairImagesLoading, setRepairImagesLoading] = React.useState(false);
  const [repairImagesError, setRepairImagesError] = React.useState<string | null>(null);

  // D·ªØ li·ªáu b·∫£ng t·ª´ database
  const [tableData, setTableData] = React.useState<TableData[]>([]);
  const [allData, setAllData] = React.useState<TableData[]>([]); // L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ ph√¢n trang
  
  // State ƒë·ªÉ theo d√µi th·ªùi gian container m·∫•t v·ªã tr√≠
  const [containerPositionTimestamps, setContainerPositionTimestamps] = React.useState<Map<string, number>>(new Map());
  const [positionCheckInterval, setPositionCheckInterval] = React.useState<NodeJS.Timeout | null>(null);

  // T√≠nh to√°n d·ªØ li·ªáu hi·ªÉn th·ªã d·ª±a tr√™n trang hi·ªán t·∫°i
  const paginatedData = React.useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return allData.slice(startIndex, endIndex);
  }, [allData, currentPage, itemsPerPage]);

  // C·∫≠p nh·∫≠t tableData khi paginatedData thay ƒë·ªïi
  React.useEffect(() => {
    setTableData(paginatedData);
  }, [paginatedData]);

  // Force refresh when route changes to ensure fresh data
  React.useEffect(() => {
    if (router.isReady) {
      setRefreshTrigger(prev => prev + 1);
    }
  }, [router.pathname, router.isReady]);

  // Additional refresh when route changes (using custom hook)
  React.useEffect(() => {
    setRefreshTrigger(prev => prev + 1);
  }, [routeRefreshKey]);

  // Fetch data when component mounts
  React.useEffect(() => {
    fetchImportRequests();
  }, [refreshTrigger, includeEmptyInYard]);

  // B·ªî SUNG: Ki·ªÉm tra ƒë·ªãnh k·ª≥ container c√≥ v·ªã tr√≠ tr·ªëng v√† t·ª± ƒë·ªông x√≥a
  React.useEffect(() => {
    const checkPositionAndRemove = () => {
      const now = Date.now();
      const REMOVAL_DELAY = 5 * 60 * 1000; // 5 ph√∫t
      
      setAllData(prevData => {
        const updatedData = prevData.filter(container => {
          const hasPosition = container.yardName || container.blockCode || container.slotCode;
          
          if (!hasPosition) {
            // Container kh√¥ng c√≥ v·ªã tr√≠ - ki·ªÉm tra th·ªùi gian
            const containerKey = container.containerNumber;
            const lastSeenWithPosition = containerPositionTimestamps.get(containerKey);
            
            if (lastSeenWithPosition) {
              const timeWithoutPosition = now - lastSeenWithPosition;
              if (timeWithoutPosition >= REMOVAL_DELAY) {
                console.log(`üóëÔ∏è Auto-removing container ${container.containerNumber} - no position for ${Math.round(timeWithoutPosition / 1000)}s`);
                return false; // X√≥a container
              }
            } else {
              // L·∫ßn ƒë·∫ßu ti√™n th·∫•y container kh√¥ng c√≥ v·ªã tr√≠ - ghi nh·∫≠n th·ªùi gian
              setContainerPositionTimestamps(prev => {
                const newMap = new Map(prev);
                newMap.set(containerKey, now);
                return newMap;
              });
            }
          } else {
            // Container c√≥ v·ªã tr√≠ - x√≥a kh·ªèi danh s√°ch theo d√µi
            setContainerPositionTimestamps(prev => {
              const newMap = new Map(prev);
              newMap.delete(container.containerNumber);
              return newMap;
            });
          }
          
          return true; // Gi·ªØ l·∫°i container
        });
        
        return updatedData;
      });
    };

    // Ki·ªÉm tra m·ªói 30 gi√¢y
    const interval = setInterval(checkPositionAndRemove, 30000);
    setPositionCheckInterval(interval);

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [containerPositionTimestamps]);

  // Cleanup interval khi component unmount
  React.useEffect(() => {
    return () => {
      if (positionCheckInterval) {
        clearInterval(positionCheckInterval);
      }
    };
  }, [positionCheckInterval]);

  // Documents modal functions
  const openDocuments = async (row: TableData) => {
    try {
      setSelectedRequest({ id: row.id, containerNo: row.containerNumber });
      setIsDocsOpen(true);
      setDocsLoading(true);
      setDocsError(null);
      const res = await requestService.getFiles(row.id);
      if (res.data?.success) {
        setAttachments(res.data.data || res.data.attachments || []);
      } else {
        setAttachments([]);
        setDocsError(res.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ª©ng t·ª´');
      }
    } catch (err: any) {
      setDocsError(err.response?.data?.message || err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i ch·ª©ng t·ª´');
      setAttachments([]);
    } finally {
      setDocsLoading(false);
    }
  };

  const closeDocuments = () => {
    setIsDocsOpen(false);
    setSelectedRequest(null);
    setAttachments([]);
    setDocsError(null);
  };

  // Repair images modal functions
  const openRepairImages = async (row: TableData) => {
    if (!row.repairTicketId) {
      showSuccess('Kh√¥ng c√≥ phi·∫øu s·ª≠a ch·ªØa cho container n√†y', undefined, 2000);
      return;
    }
    
    try {
      setSelectedRepairTicket({ id: row.repairTicketId, containerNo: row.containerNumber });
      setIsRepairImagesOpen(true);
      setRepairImagesLoading(true);
      setRepairImagesError(null);
      const res = await maintenanceApi.getRepairImages(row.repairTicketId);
      if (res.success) {
        setRepairImages(res.data || []);
      } else {
        setRepairImages([]);
        setRepairImagesError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·∫£nh ki·ªÉm tra');
      }
    } catch (err: any) {
      setRepairImagesError(err.response?.data?.message || err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i ·∫£nh ki·ªÉm tra');
      setRepairImages([]);
    } finally {
      setRepairImagesLoading(false);
    }
  };

  const closeRepairImages = () => {
    setIsRepairImagesOpen(false);
    setSelectedRepairTicket(null);
    setRepairImages([]);
    setRepairImagesError(null);
  };

  // Update modal states
  const [isUpdateModalOpen, setIsUpdateModalOpen] = React.useState(false);
  const [selectedRow, setSelectedRow] = React.useState<TableData | null>(null);
  const [customers, setCustomers] = React.useState<Customer[]>([]);
  const [shippingLines, setShippingLines] = React.useState<any[]>([]);
  const [containerTypes, setContainerTypes] = React.useState<any[]>([]);
  const [selectedCustomerId, setSelectedCustomerId] = React.useState<string>('');
  const [selectedShippingLineId, setSelectedShippingLineId] = React.useState<string>('');
  const [selectedContainerTypeId, setSelectedContainerTypeId] = React.useState<string>('');
  const [selectedStatus, setSelectedStatus] = React.useState<string>('');
  const [selectedSealNumber, setSelectedSealNumber] = React.useState<string>('');
  const [selectedDemDet, setSelectedDemDet] = React.useState<string>('');

  const handleUpdateInfo = async (row: TableData) => {
    setSelectedRow(row);
    setIsUpdateModalOpen(true);
    setSelectedCustomerId(''); // Reset customer selection
    setSelectedShippingLineId(''); // Reset shipping line selection
    setSelectedContainerTypeId(''); // Reset container type selection
    setSelectedStatus(row.containerQuality || 'GOOD'); // Set initial status
    setSelectedSealNumber(row.sealNumber || ''); // Set initial seal number
    setSelectedDemDet(row.demDet === 'Kh√¥ng c√≥' ? '' : row.demDet || ''); // Set initial DEM/DET
    
    // Fetch customers, shipping lines, and container types when opening modal
    try {
      const [customersRes, shippingLinesRes, containerTypesRes] = await Promise.all([
        setupService.getCustomers({ limit: 1000 }),
        setupService.getShippingLines({ limit: 1000 }),
        setupService.getContainerTypes({ limit: 1000 })
      ]);
      
      if (customersRes.success && customersRes.data) {
        setCustomers(customersRes.data.data || []);
      }
      
      if (shippingLinesRes.success && shippingLinesRes.data) {
        setShippingLines(shippingLinesRes.data.data || []);
      }
      
      if (containerTypesRes.success && containerTypesRes.data) {
        setContainerTypes(containerTypesRes.data.data || []);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleCancel = (id: string) => {
    // TODO: Implement cancel functionality
    console.log('Cancel for:', id);
    showSuccess('ƒê√£ h·ªßy y√™u c·∫ßu!', undefined, 2000);
  };

  // Pagination handlers
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleNextPage = () => {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };


  // Function ƒë·ªÉ fetch danh s√°ch request v√† fill record theo y√™u c·∫ßu
  const fetchImportRequests = async () => {
    setLoading(true);
    try {
      // L·∫•y c·∫£ IMPORT v√† EXPORT requests ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß tr·∫°ng th√°i
      // Lo·∫°i b·ªè containers ƒë√£ ho√†n th√†nh ho·∫∑c b·ªã reject ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã containers ƒëang trong quy tr√¨nh qu·∫£n l√Ω
      const [importResponse, exportResponse] = await Promise.all([
        requestService.getRequests('IMPORT', undefined, 'PENDING,NEW_REQUEST,FORWARDED,GATE_IN,IN_YARD,IN_CAR,FORKLIFTING,CHECKED'),
        requestService.getRequests('EXPORT', undefined, 'PENDING,NEW_REQUEST,FORWARDED,GATE_IN,IN_YARD,IN_CAR,FORKLIFTING,CHECKED')
      ]);
      
      const importRequests = importResponse?.data?.success ? (importResponse.data.data || []) : [];
      const exportRequests = exportResponse?.data?.success ? (exportResponse.data.data || []) : [];
      let allRequests = [...importRequests, ...exportRequests];
      
      // FIXED: Kh√¥ng return s·ªõm khi kh√¥ng c√≥ requests ƒë·ªÉ v·∫´n hi·ªÉn th·ªã container SYSTEM_ADMIN_ADDED (nh∆∞ SA11)
      // Tr∆∞·ªõc ƒë√¢y, khi kh√¥ng c√≥ IMPORT/EXPORT requests, h√†m s·∫Ω return s·ªõm v√† kh√¥ng hi·ªÉn th·ªã container do SystemAdmin th√™m
      // B√¢y gi·ªù v·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω ƒë·ªÉ l·∫•y emptyInYardContainers (SYSTEM_ADMIN_ADDED)
      // if (allRequests.length === 0) {
      //   setTableData([]);
      //   return;
      // }

      // Nh√≥m requests theo container_no v√† ch·ªâ l·∫•y request m·ªõi nh·∫•t cho m·ªói container
      const latestRequestsMap = new Map<string, any>();
      allRequests.forEach((req: any) => {
        const existingReq = latestRequestsMap.get(req.container_no);
        // S·ª≠ d·ª•ng updatedAt thay v√¨ createdAt ƒë·ªÉ l·∫•y request ƒë∆∞·ª£c c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
        const reqTime = new Date(req.updatedAt || req.createdAt);
        const existingTime = new Date(existingReq?.updatedAt || existingReq?.createdAt);
        if (!existingReq || reqTime > existingTime) {
          latestRequestsMap.set(req.container_no, req);
        }
      });
      const requests = Array.from(latestRequestsMap.values());
      console.log('üîç Raw requests data:', requests.map(r => ({
        id: r.id,
        container_no: r.container_no,
        status: r.status,
        type: r.type
      })));
      
      // L·∫•y container EMPTY_IN_YARD n·∫øu ƒë∆∞·ª£c b·∫≠t
      let emptyInYardContainers: ContainerItem[] = [];
      if (includeEmptyInYard) {
        try {
          console.log('üîç Fetching containers in yard...');
          // B·ªî SUNG: L·∫•y t·∫•t c·∫£ container trong yard, kh√¥ng ch·ªâ SYSTEM_ADMIN_ADDED
          const emptyResponse = await reportsService.getContainers({
            // Kh√¥ng filter theo service_status ƒë·ªÉ l·∫•y t·∫•t c·∫£ container trong yard
            page: 1,
            pageSize: 200
          });
          emptyInYardContainers = emptyResponse.data.items || [];
          console.log('üì¶ Containers in yard found:', emptyInYardContainers.length);
          console.log('üìã Container details:', emptyInYardContainers.map(c => ({
            container_no: c.container_no,
            service_status: c.service_status,
            data_source: c.data_source,
            yard_name: c.yard_name,
            slot_code: c.slot_code
          })));
        } catch (error) {
          console.error('‚ùå Error fetching containers in yard:', error);
        }
      }

      // L·ªçc ra t·∫•t c·∫£ container ƒë√£ c√≥ ServiceRequest ƒë·ªÉ tr√°nh tr√πng l·∫∑p
      const containersWithServiceRequests = new Set(
        requests.map((req: any) => req.container_no)
      );
      
      // X·ª≠ l√Ω container trong yard - bao g·ªìm c·∫£ container kh√¥ng c√≥ ServiceRequest v√† container c√≥ GATE_OUT
       const emptyInYardData: TableData[] = await Promise.all(
         emptyInYardContainers
           .filter((container: ContainerItem) => {
             // B·ªî SUNG: Ch·ªâ x·ª≠ l√Ω container c√≥ v·ªã tr√≠
             const hasPosition = container.yard_name || container.block_code || container.slot_code;
             if (!hasPosition) {
               console.log(`üóëÔ∏è Skipping EMPTY_IN_YARD container ${container.container_no} - no position data`);
               return false;
             }
             return !containersWithServiceRequests.has(container.container_no);
           })
           .map(async (container: ContainerItem) => {
             // L·∫•y th√¥ng tin t·ª´ ServiceRequest GATE_OUT n·∫øu c√≥
             let serviceRequestData: any = null;
             try {
               const gateOutResponse = await requestService.getRequests('IMPORT', 'GATE_OUT');
               if (gateOutResponse?.data?.success) {
                 const gateOutRequests = gateOutResponse.data.data || [];
                 const matchingRequest = gateOutRequests.find((req: any) => req.container_no === container.container_no);
                 if (matchingRequest) {
                   serviceRequestData = matchingRequest;
                   console.log(`üîç Found GATE_OUT ServiceRequest for ${container.container_no}:`, serviceRequestData);
                 }
               }
             } catch (error) {
               console.log(`‚ö†Ô∏è Error fetching ServiceRequest for ${container.container_no}:`, error);
             }
             // Ki·ªÉm tra RepairTicket cho emptyInYard containers ƒë·ªÉ gi·ªØ nguy√™n tr·∫°ng th√°i
             let containerQuality: 'GOOD' | 'NEED_REPAIR' | 'UNKNOWN' = 'GOOD'; // M·∫∑c ƒë·ªãnh GOOD
             let repairTicketStatus: string | undefined = undefined;
             let repairTicketId: string | undefined = undefined;
             let repairImagesCount = 0;
             
             try {
               const tickets = await maintenanceApi.listRepairs({ container_no: container.container_no });
               if (tickets.data && tickets.data.length > 0) {
                 const latest = tickets.data[0];
                 repairTicketStatus = latest.status;
                 repairTicketId = latest.id;
                 
                 if (repairTicketStatus === 'COMPLETE') {
                   containerQuality = 'GOOD';
                 } else if (repairTicketStatus === 'COMPLETE_NEEDREPAIR' || repairTicketStatus === 'COMPLETE_NEED_REPAIR') {
                   containerQuality = 'NEED_REPAIR';
                 } else {
                   containerQuality = 'UNKNOWN';
                 }
                 
                 // L·∫•y s·ªë l∆∞·ª£ng ·∫£nh ki·ªÉm tra
                 try {
                   const imgs = await maintenanceApi.getRepairImages(latest.id);
                   repairImagesCount = Array.isArray(imgs?.data) ? imgs.data.length : 0;
                 } catch {}
                 
                 console.log(`üîç EmptyInYard container ${container.container_no}: RepairTicket=${repairTicketStatus}, Quality=${containerQuality}`);
               }
             } catch (error) {
               console.log(`‚ö†Ô∏è No repair tickets found for emptyInYard container ${container.container_no}`);
             }
             
             return {
               id: `empty_${container.container_no}`, // ID gi·∫£ ƒë·ªÉ ph√¢n bi·ªát
               shippingLine: serviceRequestData?.shipping_line?.name || container.shipping_line?.name || '',
               containerNumber: container.container_no || '',
               containerType: serviceRequestData?.container_type?.code || container.container_type?.code || '',
               status: 'EMPTY_IN_YARD',
               repairTicketStatus: repairTicketStatus,
                customer: '', // Kh√¥ng t·ª± ƒë·ªông fill tr∆∞·ªùng kh√°ch h√†ng
               documents: '',
               documentsCount: 0,
               repairImagesCount: repairImagesCount,
               repairTicketId: repairTicketId,
               position: (() => {
                 if (container.yard_name || container.block_code || container.slot_code) {
                   const pos = `${container.block_code || ''} / ${container.slot_code || ''}`;
                   return container.yard_name ? `${container.yard_name} ‚Ä¢ ${pos}` : pos;
                 }
                 return '';
               })(),
               yardName: container.yard_name,
               blockCode: container.block_code,
               slotCode: container.slot_code,
               sealNumber: serviceRequestData?.seal_number || container.seal_number || '',
               demDet: serviceRequestData?.dem_det || container.dem_det || '',
               containerQuality: containerQuality, // S·ª≠ d·ª•ng containerQuality t·ª´ RepairTicket
               requestType: serviceRequestData?.type || undefined // S·ª≠ d·ª•ng type t·ª´ ServiceRequest n·∫øu c√≥
             };
           })
       );

      const transformedData: TableData[] = await Promise.all(
        requests.map(async (request: any) => {
          console.log(`üîç Processing container: ${request.container_no} (ID: ${request.id})`);
          console.log(`üìã Request details:`, {
            type: request.type,
            status: request.status,
            container_no: request.container_no
          });
          
          try {
          
          // S·ªë ·∫£nh ki·ªÉm tra: ch·ªâ t√≠nh cho IMPORT b·∫±ng repair ticket
          let repairImagesCount = 0;
          let repairTicketId = '';
          let documentsCount = 0;
          let documentsList: any[] = [];
          let containerQuality: 'GOOD' | 'NEED_REPAIR' | 'UNKNOWN' = 'UNKNOWN';
          let repairTicketStatus: string | undefined = undefined;
          let demDetValue = '';
          
          // Kh√¥ng s·ª≠ d·ª•ng emptyInYardContainers l√†m fallback cho request containers
          // v√¨ ch√∫ng l√† hai lo·∫°i container kh√°c nhau
          
          if (request.type === 'IMPORT') {
            // V·ªõi IMPORT: l·∫•y DEM/DET t·ª´ request, n·∫øu kh√¥ng c√≥ th√¨ hi·ªÉn th·ªã "Kh√¥ng c√≥"
            demDetValue = request.dem_det || request.demDet || 'Kh√¥ng c√≥';
            
            // Lu√¥n ∆∞u ti√™n l·∫•y t·ª´ maintenanceApi (tr·∫°ng th√°i m·ªõi nh·∫•t)
            try {
              console.log(`üîß Fetching repair tickets for container: ${request.container_no}`);
              console.log(`üîß API call: maintenanceApi.listRepairs({ container_no: '${request.container_no}', limit: 10 })`);
              
              // Debug: Ki·ªÉm tra token
              const token = localStorage.getItem('token');
              const refreshToken = localStorage.getItem('refresh_token');
              const userId = localStorage.getItem('user_id');
              console.log(`üîë Auth tokens:`, {
                hasToken: !!token,
                hasRefreshToken: !!refreshToken,
                hasUserId: !!userId,
                tokenLength: token?.length || 0
              });
              
              const repairResponse = await maintenanceApi.listRepairs({
                container_no: request.container_no,
                limit: 10
              });
              
              console.log(`üîç Raw repair response for ${request.container_no}:`, repairResponse);
              console.log(`üîç Response type:`, typeof repairResponse);
              console.log(`üîç Response has data:`, !!repairResponse?.data);
              console.log(`üîç Response data type:`, typeof repairResponse?.data);
              console.log(`üîç Response data is array:`, Array.isArray(repairResponse?.data));
              
              // Debug: Ki·ªÉm tra chi ti·∫øt response
              if (repairResponse?.data) {
                console.log(`üîç Full response data for ${request.container_no}:`, JSON.stringify(repairResponse.data, null, 2));
              } else {
                console.log(`‚ùå No data in response for ${request.container_no}`);
              }
              
              const tickets = Array.isArray(repairResponse?.data) ? repairResponse.data : [];
              console.log(`üìã Found ${tickets.length} repair tickets for ${request.container_no}:`, tickets.map(t => ({ 
                id: t.id, 
                status: t.status, 
                container_no: t.container_no,
                createdAt: (t as any).createdAt,
                updatedAt: (t as any).updatedAt
              })));
              if (tickets.length > 0) {
                // X·∫øp h·∫°ng tr·∫°ng th√°i ƒë·ªÉ tie-break khi thi·∫øu/gi·ªëng th·ªùi gian
                const statusPriority: Record<string, number> = {
                  'COMPLETE': 4,
                  'COMPLETE_NEED_REPAIR': 3,
                  'COMPLETE_NEEDREPAIR': 3,
                  'PENDING': 2,
                  'CHECKING': 2,
                  'REPAIRING': 2,
                  'PENDING_ACCEPT': 2,
                  'CHECKED': 2,
                  'REJECT': 1,
                  'REJECTED': 1
                };
                // S·∫Øp x·∫øp theo updatedAt/createdAt gi·∫£m d·∫ßn, n·∫øu b·∫±ng nhau ∆∞u ti√™n theo statusPriority
                tickets.sort((a: any, b: any) => {
                  const ta = new Date(a.updatedAt || a.createdAt || 0).getTime();
                  const tb = new Date(b.updatedAt || b.createdAt || 0).getTime();
                  if (tb !== ta) return tb - ta;
                  const pa = statusPriority[a.status] ?? 0;
                  const pb = statusPriority[b.status] ?? 0;
                  return pb - pa;
                });
                const latest = tickets[0];
                repairTicketId = latest.id;
                repairTicketStatus = latest.status;
                // √Åp d·ª•ng logic: if repairTicket.status == COMPLETE then "Container t·ªët" else "C·∫ßn s·ª≠a ch·ªØa"
                // Ch·ªâ √°p d·ª•ng cho IMPORT requests
                if (repairTicketStatus === 'COMPLETE') {
                  containerQuality = 'GOOD';
                } else if (repairTicketStatus === 'COMPLETE_NEEDREPAIR' || repairTicketStatus === 'COMPLETE_NEED_REPAIR') {
                  containerQuality = 'NEED_REPAIR';
                } else {
                  containerQuality = 'UNKNOWN';
                }
                console.log(`‚úÖ Selected repair ticket for ${request.container_no}: ID=${latest.id}, Status=${latest.status}, Quality=${containerQuality}`);
                try {
                  const imgs = await maintenanceApi.getRepairImages(latest.id);
                  repairImagesCount = Array.isArray(imgs?.data) ? imgs.data.length : 0;
                } catch {}
              } else {
                // Kh√¥ng c√≥ repair ticket cho IMPORT, hi·ªÉn th·ªã "Kh√¥ng x√°c ƒë·ªãnh" (m·∫∑c ƒë·ªãnh)
                containerQuality = 'UNKNOWN';
                repairTicketStatus = undefined; // Kh√¥ng set status khi kh√¥ng c√≥ repair ticket
                console.log(`‚ö†Ô∏è No repair tickets found for ${request.container_no}, using UNKNOWN status`);
                console.log(`‚ö†Ô∏è This means the container will show as "Kh√¥ng x√°c ƒë·ªãnh"`);
              }
            } catch (error: any) {
              // L·ªói khi l·∫•y repair ticket cho IMPORT, hi·ªÉn th·ªã "Kh√¥ng x√°c ƒë·ªãnh" (m·∫∑c ƒë·ªãnh)
              containerQuality = 'UNKNOWN';
              repairTicketStatus = undefined; // Kh√¥ng set status khi c√≥ l·ªói
              console.log(`‚ùå Error fetching repair tickets for ${request.container_no}:`, error);
              console.log(`‚ùå Error details:`, {
                message: error?.message,
                stack: error?.stack,
                response: error?.response?.data,
                status: error?.response?.status,
                config: {
                  url: error?.config?.url,
                  method: error?.config?.method,
                  headers: error?.config?.headers
                }
              });
              console.log(`‚ùå Using GOOD status due to error`);
              console.log(`‚ùå This means the container will show as "CONTAINER T·ªêT"`);
            }
          } else if (request.type === 'EXPORT') {
            // V·ªõi EXPORT: m·∫∑c ƒë·ªãnh l√† "Container t·ªët" (kh√¥ng √°p d·ª•ng logic repair ticket)
            demDetValue = 'Kh√¥ng c√≥';
            containerQuality = 'GOOD';
            repairTicketStatus = undefined; // Kh√¥ng set repair ticket status cho EXPORT
            console.log(`üì¶ EXPORT container ${request.container_no}: using GOOD status (no repair ticket logic)`);
          } else {
            // Kh√¥ng c√≥ request ho·∫∑c lo·∫°i request kh√¥ng x√°c ƒë·ªãnh: hi·ªÉn th·ªã "Container t·ªët"
            demDetValue = 'Kh√¥ng c√≥';
            containerQuality = 'GOOD';
            repairTicketStatus = undefined; // Kh√¥ng set repair ticket status
            console.log(`‚ùì Unknown request type for ${request.container_no}: using GOOD status`);
          }

          // ƒê·∫øm ch·ª©ng t·ª´ th·ª±c t·∫ø c·ªßa request (ƒë·ªìng nh·∫•t v·ªõi modal)
          try {
            const filesRes = await requestService.getFiles(request.id);
            if (filesRes?.data?.success) {
              documentsList = filesRes.data.data || filesRes.data.attachments || [];
              documentsCount = documentsList.length;
            }
          } catch {}

          // T√≠nh to√°n v·ªã tr√≠: ∆∞u ti√™n d·ªØ li·ªáu t·ª´ request; n·∫øu thi·∫øu th√¨ tra c·ª©u t·ª´ Yard
          let yardNameCalc: string = request.yard_name || request.yard?.name || request.actual_location?.yard_name || '';
          let blockCodeCalc: string = request.block_code || request.actual_location?.block_code || '';
          let slotCodeCalc: string = request.slot_code || request.actual_location?.slot_code || '';

          if (!yardNameCalc && !blockCodeCalc && !slotCodeCalc && request.container_no) {
            try {
              const located = await yardApi.locate(String(request.container_no));
              yardNameCalc = located?.yard_name || located?.slot?.block?.yard?.name || yardNameCalc || '';
              blockCodeCalc = located?.block_code || located?.slot?.block?.code || blockCodeCalc || '';
              slotCodeCalc = located?.slot_code || located?.slot?.code || slotCodeCalc || '';
            } catch {}
          }

          const result = {
            id: request.id,
            shippingLine: request.shipping_line?.name || '',
            containerNumber: request.container_no || '',
            containerType: request.container_type?.code || '',
            status: request.status === 'DONE_LIFTING' ? 'GATE_OUT' : (request.status || ''),
            customer: '', // Kh√¥ng t·ª± ƒë·ªông fill tr∆∞·ªùng kh√°ch h√†ng
            documents: documentsList.map((att: any) => att.file_name).join(', '),
            documentsCount,
            repairImagesCount,
            repairTicketId: repairTicketId || undefined,
            position: (() => {
              if (yardNameCalc || blockCodeCalc || slotCodeCalc) {
                const pos = `${blockCodeCalc || '-'} / ${slotCodeCalc || '-'}`;
                return yardNameCalc ? `${yardNameCalc} ‚Ä¢ ${pos}` : pos;
              }
              return '';
            })(),
            yardName: yardNameCalc,
            blockCode: blockCodeCalc,
            slotCode: slotCodeCalc,
            sealNumber: request.seal_number || request.seal_no || request.seal || '',
            demDet: demDetValue,
            containerQuality,
            repairTicketStatus,
            requestType: request.type // Th√™m requestType ƒë·ªÉ ph√¢n bi·ªát IMPORT/EXPORT
          };
          
          console.log(`üìä Final result for ${request.container_no}:`, {
            containerNumber: result.containerNumber,
            status: result.status,
            repairTicketStatus: result.repairTicketStatus,
            containerQuality: result.containerQuality,
            repairTicketId: result.repairTicketId
          });
          
          // Debug: Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
          const expectedLabel = getContainerStatusLabel(result.repairTicketStatus, result.containerQuality);
          console.log(`üéØ Container ${request.container_no} will display as:`, {
            repairTicketStatus: result.repairTicketStatus,
            containerQuality: result.containerQuality,
            expectedLabel: expectedLabel
          });
          
          return result;
          } catch (error) {
            console.error(`‚ùå Error processing container ${request.container_no}:`, error);
            // Tr·∫£ v·ªÅ container v·ªõi th√¥ng tin c∆° b·∫£n n·∫øu c√≥ l·ªói
            return {
              id: request.id,
              shippingLine: request.shipping_line?.name || '',
              containerNumber: request.container_no || '',
              containerType: request.container_type?.code || '',
              status: request.status || '',
              customer: '', // Kh√¥ng t·ª± ƒë·ªông fill tr∆∞·ªùng kh√°ch h√†ng
              documents: '',
              documentsCount: 0,
              repairImagesCount: 0,
              repairTicketId: undefined,
              position: '',
              yardName: '',
              blockCode: '',
              slotCode: '',
              sealNumber: request.seal_number || '',
              demDet: request.dem_det || '',
              containerQuality: 'GOOD' as const,
              repairTicketStatus: undefined,
              requestType: request.type // Th√™m requestType cho error case
            };
          }
        })
      );

      // B·ªî SUNG: L·ªçc ch·ªâ container c√≥ v·ªã tr√≠ tr∆∞·ªõc khi filter theo tr·∫°ng th√°i
      const serviceRequestContainersWithPosition = transformedData.filter(container => {
        const hasPosition = container.yardName || container.blockCode || container.slotCode;
        if (!hasPosition) {
          console.log(`üóëÔ∏è Skipping ServiceRequest container ${container.containerNumber} - no position data`);
        }
        return hasPosition;
      });

      // B·ªî SUNG: L·ªçc ·∫©n c√°c record c√≥ tr·∫°ng th√°i request l√† PENDING, REJECTED
      // GATE_IN ƒë∆∞·ª£c gi·ªØ l·∫°i n·∫øu container c√≥ v·ªã tr√≠ trong yard
      const filteredTransformedData = serviceRequestContainersWithPosition.filter(container => {
        const requestStatus = container.status;
        const hasPosition = container.yardName || container.blockCode || container.slotCode;
        
        // Ch·ªâ ·∫©n PENDING v√† REJECTED
        // GATE_IN ƒë∆∞·ª£c hi·ªÉn th·ªã n·∫øu c√≥ v·ªã tr√≠ trong yard
        const shouldHide = ['PENDING', 'REJECTED'].includes(requestStatus);
        
        if (shouldHide) {
          console.log(`üö´ Hiding container ${container.containerNumber} with status: ${requestStatus}`);
        } else if (requestStatus === 'GATE_IN' && hasPosition) {
          console.log(`‚úÖ Showing GATE_IN container ${container.containerNumber} with position: ${container.yardName || 'N/A'}`);
        }
        
        return !shouldHide;
      });
      
      console.log('üîç Filtering containers by request status (PENDING, REJECTED hidden; GATE_IN with position shown):');
      console.log('üìä Total requests before filter:', serviceRequestContainersWithPosition.length);
      console.log('üìä Total requests after filter:', filteredTransformedData.length);
      console.log('üìã All request statuses before filter:', serviceRequestContainersWithPosition.map(r => ({ 
        container: r.containerNumber, 
        status: r.status
      })));
      console.log('üìã Filtered requests by status:', filteredTransformedData.reduce((acc, req) => {
        acc[req.status] = (acc[req.status] || 0) + 1;
        return acc;
      }, {} as Record<string, number>));
      
      // Debug: Log chi ti·∫øt t·ª´ng container sau khi x·ª≠ l√Ω
      console.log('üîç Detailed container data after processing:');
      filteredTransformedData.forEach(container => {
        console.log(`Container ${container.containerNumber}:`, {
          repairTicketStatus: container.repairTicketStatus,
          containerQuality: container.containerQuality,
          status: container.status
        });
        
        // Debug: Ki·ªÉm tra logic hi·ªÉn th·ªã
        const statusLabel = getContainerStatusLabel(container.repairTicketStatus, container.containerQuality);
        
        console.log(`üéØ Container ${container.containerNumber} display logic:`, {
          repairTicketStatus: container.repairTicketStatus,
          containerQuality: container.containerQuality,
          statusLabel: statusLabel,
          willShowAs: statusLabel
        });
      });

      // K·∫øt h·ª£p d·ªØ li·ªáu t·ª´ filtered requests v√† EMPTY_IN_YARD containers
      const combinedData = [...filteredTransformedData, ...emptyInYardData];
      
      // Lo·∫°i b·ªè tr√πng l·∫∑p d·ª±a tr√™n containerNumber, ∆∞u ti√™n ServiceRequest data
      const uniqueDataMap = new Map<string, TableData>();
      
      // Th√™m EMPTY_IN_YARD data tr∆∞·ªõc (∆∞u ti√™n th·∫•p h∆°n)
      emptyInYardData.forEach(item => {
        if (!uniqueDataMap.has(item.containerNumber)) {
          uniqueDataMap.set(item.containerNumber, item);
        }
      });
      
      // Th√™m ServiceRequest data sau (∆∞u ti√™n cao h∆°n, s·∫Ω ghi ƒë√® EMPTY_IN_YARD)
      filteredTransformedData.forEach(item => {
        uniqueDataMap.set(item.containerNumber, item);
      });
      
      const finalData = Array.from(uniqueDataMap.values());
      
      // B·ªî SUNG: Ch·ªâ hi·ªÉn th·ªã container c√≥ v·ªã tr√≠ (yardName, blockCode, ho·∫∑c slotCode)
      const finalContainersWithPosition = finalData.filter(container => {
        const hasPosition = container.yardName || container.blockCode || container.slotCode;
        if (!hasPosition) {
          console.log(`üóëÔ∏è Filtering out container ${container.containerNumber} - no position data`);
        }
        return hasPosition;
      });
      
      console.log('üìä Total data after combining:', finalData.length);
      console.log('üìã ServiceRequest data:', filteredTransformedData.length);
      console.log('üì¶ EMPTY_IN_YARD data:', emptyInYardData.length);
      console.log('üîÑ Final unique data:', finalData.length);
      console.log('üìç Containers with position:', finalContainersWithPosition.length);
      
      // L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu v√† c·∫≠p nh·∫≠t pagination (ch·ªâ container c√≥ v·ªã tr√≠)
      setAllData(finalContainersWithPosition);
      setTotalItems(finalContainersWithPosition.length);
      
      // Reset v·ªÅ trang 1 khi c√≥ d·ªØ li·ªáu m·ªõi
      setCurrentPage(1);
    } catch (error) {
      console.error('Error fetching requests:', error);
      showSuccess('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu', undefined, 2000);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <style>{`
        /* Mobile scroll fix for ManagerCont page */
        @media (max-width: 768px) {
          body {
            overflow-y: auto !important;
            overflow-x: hidden !important;
            -webkit-overflow-scrolling: touch;
          }
          
          .container.depot-requests {
            overflow: visible !important;
            padding-bottom: 2rem;
          }
        }

        .search-filter-section {
          margin-bottom: 1.5rem;
        }

        .search-filter-container {
          background: #f8f9fa;
          border-radius: 8px;
          padding: 1rem 1.5rem;
          display: flex;
          align-items: center;
          gap: 1rem;
          flex-wrap: wrap;
        }

        .search-input-wrapper {
          position: relative;
          flex: 1;
          min-width: 300px;
        }

        .search-icon {
          position: absolute;
          left: 0.75rem;
          top: 50%;
          transform: translateY(-50%);
          color: #6b7280;
        }

        .search-input {
          width: 100%;
          padding: 0.75rem 0.75rem 0.75rem 2.5rem;
          border: 1px solid #d1d5db;
          border-radius: 6px;
          font-size: 0.875rem;
          background: white;
          transition: border-color 0.2s;
        }

        .search-input:focus {
          outline: none;
          border-color: #3b82f6;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .filter-select {
          padding: 0.75rem 1rem;
          border: 1px solid #d1d5db;
          border-radius: 6px;
          font-size: 0.875rem;
          background: white;
          min-width: 180px;
          transition: border-color 0.2s;
          cursor: pointer;
        }

        .filter-select:focus {
          outline: none;
          border-color: #3b82f6;
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.75rem 1.5rem;
          border: none;
          border-radius: 6px;
          font-size: 0.875rem;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
          text-decoration: none;
          white-space: nowrap;
        }

        .btn-primary {
          background: #10b981;
          color: white;
        }

        .btn-primary:hover {
          background: #059669;
          transform: translateY(-1px);
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .btn-light {
          background: #f8f9fa !important;
          color: #1e3a8a !important;
          border: 1px solid #d1d5db !important;
          font-weight: 500 !important;
        }

        .btn-light:hover {
          background: #e5e7eb !important;
          border-color: #9ca3af !important;
          color: #1e40af !important;
        }

        .btn-secondary {
          background: #6b7280;
          color: white;
        }

        .btn-secondary:hover {
          background: #4b5563;
        }

        /* Specific styling for documents button */
        .data-table .btn-light {
          background: #f8f9fa !important;
          color: #1e3a8a !important;
          border: 1px solid #d1d5db !important;
          font-weight: 500 !important;
        }

        .data-table .btn-light:hover {
          background: #e5e7eb !important;
          border-color: #9ca3af !important;
          color: #1e40af !important;
        }

        .table-section {
          margin-top: 1.5rem;
        }

        .table-container {
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
          overflow: hidden;
        }

        .table-wrapper {
          overflow-x: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 0.875rem;
        }

        .data-table th {
          background: #f3f4f6;
          padding: 0.75rem 0.5rem;
          text-align: left;
          font-weight: 600;
          color: #374151;
          border-bottom: 2px solid #e5e7eb;
          white-space: nowrap;
          position: sticky;
          top: 0;
          z-index: 10;
        }

        .data-table td {
          padding: 0.75rem 0.5rem;
          border-bottom: 1px solid #e5e7eb;
          vertical-align: middle;
          white-space: nowrap;
        }

        .data-table tr:hover {
          background: #f9fafb;
        }

        .status-badge {
          display: inline-block;
          padding: 0.25rem 0.5rem;
          border-radius: 0.375rem;
          font-size: 0.75rem;
          font-weight: 500;
          text-transform: uppercase;
        }

        .status-ƒëang-x·ª≠-l√Ω {
          background: #fef3c7;
          color: #92400e;
        }

        .status-ho√†n-th√†nh {
          background: #d1fae5;
          color: #065f46;
        }

        .status-empty-in-yard {
          background: #fef3c7;
          color: #92400e;
        }

        .status-done-lifting {
          background: #dbeafe;
          color: #1e40af;
        }

        .status-unknown {
          background: #f3f4f6;
          color: #6b7280;
        }


        .action-buttons {
          display: flex;
          gap: 0.5rem;
          align-items: center;
        }

        .btn-sm {
          padding: 0.375rem 0.5rem;
          font-size: 0.75rem;
          border-radius: 0.375rem;
          border: none;
          cursor: pointer;
          display: inline-flex;
          align-items: center;
          gap: 0.25rem;
          transition: all 0.2s;
        }

        .btn-primary {
          background: #3b82f6;
          color: white;
        }

        .btn-primary:hover {
          background: #2563eb;
        }

        .btn-danger {
          background: #ef4444;
          color: white;
        }

        .btn-danger:hover {
          background: #dc2626;
        }

        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 3rem;
          color: #6b7280;
        }

        .loading-spinner {
          width: 40px;
          height: 40px;
          border: 4px solid #f3f4f6;
          border-top: 4px solid #3b82f6;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 1rem;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .no-data {
          text-align: center;
          padding: 3rem;
          color: #6b7280;
          font-style: italic;
        }

        @media (max-width: 768px) {
          .search-filter-container {
            padding: 0.75rem;
            flex-direction: column;
            gap: 0.75rem;
          }

          .search-input-wrapper {
            min-width: 100%;
          }

          .filter-select {
            min-width: 100%;
          }

          .btn {
            width: 100%;
            justify-content: center;
          }
        }

        @media (max-width: 1200px) {
          .data-table th,
          .data-table td {
            padding: 0.5rem 0.25rem;
            font-size: 0.75rem;
          }
        }
      `}</style>
      <Header />
      <main className="container depot-requests">
        {/* Page Header */}
        <div className="page-header modern-header">
          <div className="header-content">
            <div className="header-left">
              <h1 className="page-title gradient gradient-ultimate">Qu·∫£n l√Ω container</h1>
            </div>

            <div className="header-actions">
            </div>
          </div>
        </div>

        {/* Search and Filter Section */}
        <div className="search-filter-section">
          <div className="search-filter-container">
              <div className="search-input-wrapper">
                <svg className="search-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
                <input
                  type="text"
                  className="search-input"
                  placeholder="T√¨m ki·∫øm theo m√£ container"
                  value={localSearch}
                  onChange={(e) => setLocalSearch(e.target.value)}
                />
            </div>
            
                <select
                  className="filter-select"
                  value={localStatus}
                  onChange={(e) => setLocalStatus(e.target.value)}
                >
                  <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                  <option value="active">Ho·∫°t ƒë·ªông</option>
                  <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
                </select>
                
                <label style={{ display: 'flex', alignItems: 'center', gap: '8px', whiteSpace: 'nowrap', color: '#6b7280', fontSize: '14px' }}>
                  <input
                    type="checkbox"
                    checked={includeEmptyInYard}
                    onChange={(e) => setIncludeEmptyInYard(e.target.checked)}
                    style={{ margin: 0 }}
                  />
                  Bao g·ªìm container r·ªóng trong b√£i (t·ª± ƒë·ªông b·∫≠t)
                </label>
          </div>
        </div>

        {/* Table Section */}
        <div className="table-section">
          <div className="table-container">
            
            <div className="table-wrapper">
              {loading ? (
                <div className="loading-container">
                  <div className="loading-spinner"></div>
                  <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
                </div>
              ) : (
                <table className="data-table">
                  <thead>
                    <tr>
                      <th>H√£ng t√†u</th>
                      <th>S·ªë Cont</th>
                      <th>Lo·∫°i Cont</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th style={{ display: 'none' }}>Tr·∫°ng th√°i Request</th>
                      <th>H√¨nh ·∫£nh</th>
                      <th>V·ªã tr√≠</th>
                      <th>S·ªë seal</th>
                      <th>Kh√°ch h√†ng</th>
                      <th>DEM/DET</th>
                      <th>H√†nh ƒë·ªông</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tableData.length === 0 ? (
                      <tr>
                        <td colSpan={10} className="no-data">
                          Kh√¥ng c√≥ d·ªØ li·ªáu
                        </td>
                      </tr>
                    ) : (
                      tableData.map((row) => (
                        <tr key={row.id}>
                          <td>{row.shippingLine}</td>
                          <td>{row.containerNumber}</td>
                          <td>{row.containerType}</td>
                          <td>
                            {(() => {
                              const statusLabel = getContainerStatusLabel(row.repairTicketStatus, row.containerQuality);
                              const badgeClass = getStatusBadgeClass(row.repairTicketStatus, row.containerQuality);
                              console.log(`üé® Rendering status for ${row.containerNumber}:`, {
                                repairTicketStatus: row.repairTicketStatus,
                                containerQuality: row.containerQuality,
                                statusLabel: statusLabel,
                                badgeClass: badgeClass
                              });
                              return (
                                <span className={`status-badge ${badgeClass}`}>
                                  {statusLabel}
                                </span>
                              );
                            })()}
                          </td>
                          <td style={{ display: 'none' }}>
                            <span className={`status-badge ${getRequestStatusBadgeClass(row.status)}`}>
                              {getRequestStatusLabel(row.status, row.requestType)}
                            </span>
                          </td>
                          <td>
                            <div style={{ display: 'flex', gap: '8px', flexDirection: 'column' }}>
                              <button
                                type="button"
                                className="btn btn-sm btn-light"
                                onClick={() => openRepairImages(row)}
                                title="Xem ·∫£nh ki·ªÉm tra"
                                style={{ padding: '4px 8px', fontSize: '12px', width: '100%' }}
                              >
                                {(row.repairImagesCount ?? 0)} ·∫£nh ki·ªÉm tra
                              </button>
                              <button
                                type="button"
                                className="btn btn-sm btn-light"
                                onClick={() => openDocuments(row)}
                                title="Xem ch·ª©ng t·ª´"
                                style={{ padding: '4px 8px', fontSize: '12px', width: '100%' }}
                              >
                                {(row.documentsCount ?? 0)} ch·ª©ng t·ª´
                              </button>
                            </div>
                          </td>
                          <td>
                            <div style={{display:'flex', flexDirection:'column'}}>
                              <span>{row.yardName || ''}</span>
                              <small className="muted">{row.blockCode || ''} / {row.slotCode || ''}</small>
                            </div>
                          </td>
                          <td>{row.sealNumber || 'Kh√¥ng c√≥'}</td>
                          <td>{row.customer || ''}</td>
                          <td>{row.demDet || ''}</td>
                          <td>
                            <button
                              className="btn btn-sm btn-primary"
                              onClick={() => handleUpdateInfo(row)}
                              title="C·∫≠p nh·∫≠t th√¥ng tin"
                            >
                              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                              </svg>
                            </button>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              )}
            </div>
          </div>
        </div>

        {/* Pagination */}
        {totalItems > itemsPerPage && (
          <div className="pagination-container" style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center', 
            marginTop: '1.5rem',
            padding: '1rem',
            background: 'white',
            borderRadius: '8px',
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
          }}>
            <div style={{ color: '#6b7280', fontSize: '14px' }}>
              Hi·ªÉn th·ªã {((currentPage - 1) * itemsPerPage) + 1} - {Math.min(currentPage * itemsPerPage, totalItems)} trong t·ªïng s·ªë {totalItems} container
            </div>
            
            <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <button
                onClick={handlePrevPage}
                disabled={currentPage === 1}
                style={{
                  padding: '0.5rem 1rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  background: currentPage === 1 ? '#f9fafb' : 'white',
                  color: currentPage === 1 ? '#9ca3af' : '#374151',
                  cursor: currentPage === 1 ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                Tr∆∞·ªõc
              </button>
              
              <div style={{ display: 'flex', gap: '0.25rem' }}>
                {Array.from({ length: Math.ceil(totalItems / itemsPerPage) }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => handlePageChange(page)}
                    style={{
                      padding: '0.5rem 0.75rem',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      background: currentPage === page ? '#3b82f6' : 'white',
                      color: currentPage === page ? 'white' : '#374151',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500',
                      minWidth: '40px'
                    }}
                  >
                    {page}
                  </button>
                ))}
              </div>
              
              <button
                onClick={handleNextPage}
                disabled={currentPage === Math.ceil(totalItems / itemsPerPage)}
                style={{
                  padding: '0.5rem 1rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  background: currentPage === Math.ceil(totalItems / itemsPerPage) ? '#f9fafb' : 'white',
                  color: currentPage === Math.ceil(totalItems / itemsPerPage) ? '#9ca3af' : '#374151',
                  cursor: currentPage === Math.ceil(totalItems / itemsPerPage) ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              >
                Sau
              </button>
            </div>
          </div>
        )}

        {/* Documents Modal */}
        {isDocsOpen && (
          <div
            style={{
              position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
              background: 'rgba(0,0,0,0.5)', backdropFilter: 'blur(2px)',
              display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1100
            }}
            onClick={closeDocuments}
          >
            <div
              style={{ background: '#fff', borderRadius: 12, width: '720px', maxWidth: '95vw', maxHeight: '85vh', overflow: 'auto', boxShadow: '0 20px 40px rgba(0,0,0,0.25)' }}
              onClick={(e) => e.stopPropagation()}
            >
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '16px 20px', borderBottom: '1px solid #e5e7eb' }}>
                <h3 style={{ margin: 0, fontSize: 18, fontWeight: 700 }}>Ch·ª©ng t·ª´ - {selectedRequest?.containerNo || ''}</h3>
                <button onClick={closeDocuments} style={{ background: 'none', border: 'none', fontSize: 20, cursor: 'pointer' }}>√ó</button>
              </div>
              <div style={{ padding: 20 }}>
                {docsLoading ? (
                  <div style={{ textAlign: 'center', color: '#64748b' }}>ƒêang t·∫£i...</div>
                ) : docsError ? (
                  <div style={{ color: '#ef4444' }}>{docsError}</div>
                ) : attachments.length === 0 ? (
                  <div style={{ color: '#64748b' }}>Kh√¥ng c√≥ ch·ª©ng t·ª´</div>
                ) : (
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
                    {attachments.map((f, idx) => (
                      <div key={f.id || idx} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, display: 'flex', alignItems: 'center', gap: 12 }}>
                        {f.file_type === 'image' ? (
                          <img src={f.storage_url} alt={f.file_name} style={{ width: 64, height: 64, objectFit: 'cover', borderRadius: 6, border: '1px solid #e5e7eb' }} />
                        ) : (
                          <div style={{ width: 64, height: 64, border: '1px solid #e5e7eb', borderRadius: 6, display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#64748b' }}>PDF</div>
                        )}
                        <div style={{ flex: 1, minWidth: 0 }}>
                          <div style={{ fontWeight: 600, color: '#111827', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{f.file_name}</div>
                          <div style={{ fontSize: 12, color: '#6b7280' }}>{Math.round((f.file_size || 0) / 1024)} KB</div>
                          <a href={f.storage_url} target="_blank" rel="noreferrer" style={{ fontSize: 12 }}>M·ªü</a>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div style={{ padding: 12, borderTop: '1px solid #e5e7eb', display: 'flex', justifyContent: 'flex-end' }}>
                <button className="btn btn-secondary" onClick={closeDocuments}>ƒê√≥ng</button>
              </div>
            </div>
          </div>
        )}

        {/* Repair Images Modal */}
        {isRepairImagesOpen && (
          <div
            style={{
              position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
              background: 'rgba(0,0,0,0.5)', backdropFilter: 'blur(2px)',
              display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1100
            }}
            onClick={closeRepairImages}
          >
            <div
              style={{ background: '#fff', borderRadius: 12, width: '720px', maxWidth: '95vw', maxHeight: '85vh', overflow: 'auto', boxShadow: '0 20px 40px rgba(0,0,0,0.25)' }}
              onClick={(e) => e.stopPropagation()}
            >
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '16px 20px', borderBottom: '1px solid #e5e7eb' }}>
                <h3 style={{ margin: 0, fontSize: 18, fontWeight: 700 }}>·∫¢nh ki·ªÉm tra - {selectedRepairTicket?.containerNo || ''}</h3>
                <button onClick={closeRepairImages} style={{ background: 'none', border: 'none', fontSize: 20, cursor: 'pointer' }}>√ó</button>
              </div>
              <div style={{ padding: 20 }}>
                {repairImagesLoading ? (
                  <div style={{ textAlign: 'center', color: '#64748b' }}>ƒêang t·∫£i...</div>
                ) : repairImagesError ? (
                  <div style={{ color: '#ef4444' }}>{repairImagesError}</div>
                ) : repairImages.length === 0 ? (
                  <div style={{ color: '#64748b' }}>Kh√¥ng c√≥ ·∫£nh ki·ªÉm tra</div>
                ) : (
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
                    {repairImages.map((img, idx) => (
                      <div key={img.id || idx} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, display: 'flex', alignItems: 'center', gap: 12 }}>
                        <img src={img.storage_url} alt={img.file_name} style={{ width: 64, height: 64, objectFit: 'cover', borderRadius: 6, border: '1px solid #e5e7eb' }} />
                        <div style={{ flex: 1, minWidth: 0 }}>
                          <div style={{ fontWeight: 600, color: '#111827', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{img.file_name}</div>
                          <div style={{ fontSize: 12, color: '#6b7280' }}>{Math.round((img.file_size || 0) / 1024)} KB</div>
                          <a href={img.storage_url} target="_blank" rel="noreferrer" style={{ fontSize: 12 }}>M·ªü</a>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <div style={{ padding: 12, borderTop: '1px solid #e5e7eb', display: 'flex', justifyContent: 'flex-end' }}>
                <button className="btn btn-secondary" onClick={closeRepairImages}>ƒê√≥ng</button>
              </div>
            </div>
          </div>
        )}

        {/* Update Modal */}
        {isUpdateModalOpen && selectedRow && (
          <div
            style={{
              position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
              background: 'rgba(0,0,0,0.5)', backdropFilter: 'blur(2px)',
              display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1100
            }}
            onClick={() => {
              setIsUpdateModalOpen(false);
              setSelectedRow(null);
              setSelectedCustomerId('');
              setSelectedShippingLineId('');
              setSelectedContainerTypeId('');
              setSelectedStatus('');
              setSelectedSealNumber('');
              setSelectedDemDet('');
            }}
          >
            <div
              style={{ background: '#fff', borderRadius: 12, width: '600px', maxWidth: '95vw', maxHeight: '85vh', overflow: 'auto', boxShadow: '0 20px 40px rgba(0,0,0,0.25)' }}
              onClick={(e) => e.stopPropagation()}
            >
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '16px 20px', borderBottom: '1px solid #e5e7eb' }}>
                <h3 style={{ margin: 0, fontSize: 18, fontWeight: 700 }}>C·∫≠p nh·∫≠t th√¥ng tin - {selectedRow.containerNumber}</h3>
                <button 
                  onClick={() => {
                    setIsUpdateModalOpen(false);
                    setSelectedRow(null);
                    setSelectedCustomerId('');
                    setSelectedShippingLineId('');
                    setSelectedContainerTypeId('');
                    setSelectedStatus('');
                    setSelectedSealNumber('');
                    setSelectedDemDet('');
                  }} 
                  style={{ background: 'none', border: 'none', fontSize: 20, cursor: 'pointer' }}
                >√ó</button>
              </div>
              <div style={{ padding: 20 }}>
                <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
                  <div>
                    <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>H√£ng t√†u</label>
                    <select
                      value={selectedShippingLineId}
                      onChange={(e) => setSelectedShippingLineId(e.target.value)}
                      disabled={selectedRow.shippingLine && selectedRow.shippingLine.trim() !== ''}
                      style={{ 
                        width: '100%', 
                        padding: '8px 12px', 
                        border: '1px solid #d1d5db', 
                        borderRadius: 6,
                        maxHeight: '200px',
                        overflowY: 'auto',
                        backgroundColor: (selectedRow.shippingLine && selectedRow.shippingLine.trim() !== '') ? '#f9fafb' : 'white',
                        color: (selectedRow.shippingLine && selectedRow.shippingLine.trim() !== '') ? '#6b7280' : '#374151',
                        cursor: (selectedRow.shippingLine && selectedRow.shippingLine.trim() !== '') ? 'not-allowed' : 'pointer'
                      }}
                    >
                      <option value="">{selectedRow.shippingLine || 'Ch∆∞a c√≥ h√£ng t√†u'}</option>
                      {shippingLines.map((shippingLine) => (
                        <option key={shippingLine.id} value={shippingLine.id}>
                          {shippingLine.code} - {shippingLine.name}
                        </option>
                      ))}
                    </select>
                    <div style={{ marginTop: 4, fontSize: '12px', color: '#6b7280' }}>
                      {(selectedRow.shippingLine && selectedRow.shippingLine.trim() !== '') 
                        ? 'üîí Kh√¥ng th·ªÉ ch·ªânh s·ª≠a h√£ng t√†u (ƒë√£ c√≥ d·ªØ li·ªáu)' 
                        : 'C√≥ th·ªÉ c·∫≠p nh·∫≠t h√£ng t√†u m·ªõi'}
                    </div>
                  </div>
                  
                  <div>
                    <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>Lo·∫°i container</label>
                    <select
                      value={selectedContainerTypeId}
                      onChange={(e) => setSelectedContainerTypeId(e.target.value)}
                      disabled={selectedRow.containerType && selectedRow.containerType.trim() !== ''}
                      style={{ 
                        width: '100%', 
                        padding: '8px 12px', 
                        border: '1px solid #d1d5db', 
                        borderRadius: 6,
                        maxHeight: '200px',
                        overflowY: 'auto',
                        backgroundColor: (selectedRow.containerType && selectedRow.containerType.trim() !== '') ? '#f9fafb' : 'white',
                        color: (selectedRow.containerType && selectedRow.containerType.trim() !== '') ? '#6b7280' : '#374151',
                        cursor: (selectedRow.containerType && selectedRow.containerType.trim() !== '') ? 'not-allowed' : 'pointer'
                      }}
                    >
                      <option value="">{selectedRow.containerType || 'Ch∆∞a c√≥ lo·∫°i container'}</option>
                      {containerTypes.map((containerType) => (
                        <option key={containerType.id} value={containerType.id}>
                          {containerType.code} - {containerType.description}
                        </option>
                      ))}
                    </select>
                    <div style={{ marginTop: 4, fontSize: '12px', color: '#6b7280' }}>
                      {(selectedRow.containerType && selectedRow.containerType.trim() !== '') 
                        ? 'üîí Kh√¥ng th·ªÉ ch·ªânh s·ª≠a lo·∫°i container (ƒë√£ c√≥ d·ªØ li·ªáu)' 
                        : 'C√≥ th·ªÉ c·∫≠p nh·∫≠t lo·∫°i container m·ªõi'}
                    </div>
                  </div>
                  
                  <div>
                    <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>Kh√°ch h√†ng</label>
                    <select
                      value={selectedCustomerId}
                      onChange={(e) => setSelectedCustomerId(e.target.value)}
                      style={{ 
                        width: '100%', 
                        padding: '8px 12px', 
                        border: '1px solid #d1d5db', 
                        borderRadius: 6,
                        maxHeight: '200px',
                        overflowY: 'auto'
                      }}
                    >
                      <option value="">{selectedRow.customer || 'Ch∆∞a c√≥ kh√°ch h√†ng'}</option>
                      {customers.map((customer) => (
                        <option key={customer.id} value={customer.id}>
                          {customer.code} - {customer.name}
                        </option>
                      ))}
                    </select>
                    <div style={{ marginTop: 4, fontSize: '12px', color: '#6b7280' }}>
                      {selectedCustomerId ? 'S·∫Ω c·∫≠p nh·∫≠t kh√°ch h√†ng khi l∆∞u' : 'Gi·ªØ nguy√™n kh√°ch h√†ng hi·ªán t·∫°i'}
                    </div>
                  </div>
                   <div>
                     <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>S·ªë seal</label>
                     <input
                       type="text"
                       value={selectedSealNumber}
                       onChange={(e) => {
                         // Cho ph√©p nh·∫≠p text t·ª± do, kh√¥ng gi·ªõi h·∫°n ch·ªâ s·ªë
                         setSelectedSealNumber(e.target.value);
                       }}
                       disabled={false}
                       style={{ 
                         width: '100%', 
                         padding: '8px 12px', 
                         border: '1px solid #d1d5db', 
                         borderRadius: 6,
                         backgroundColor: 'white',
                         color: '#374151',
                         cursor: 'text'
                       }}
                       placeholder="Nh·∫≠p s·ªë seal (c√≥ th·ªÉ l√† text ho·∫∑c s·ªë)"
                     />
                     <div style={{ 
                       fontSize: 12, 
                       color: '#6b7280', 
                       marginTop: 4,
                       display: 'flex',
                       alignItems: 'center',
                       gap: '4px'
                     }}>
                       üí° C√≥ th·ªÉ nh·∫≠p s·ªë seal d·∫°ng text ho·∫∑c s·ªë (kh√¥ng b·∫Øt bu·ªôc)
                     </div>
                   </div>
                  <div>
                    <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>DEM/DET (dd/mm/yyyy)</label>
                    <input
                      type="text"
                      value={selectedDemDet}
                      onChange={(e) => {
                        // Format input to dd/mm/yyyy
                        let value = e.target.value.replace(/\D/g, '');
                        if (value.length >= 2) {
                          value = value.substring(0, 2) + '/' + value.substring(2);
                        }
                        if (value.length >= 5) {
                          value = value.substring(0, 5) + '/' + value.substring(5, 9);
                        }
                        setSelectedDemDet(value);
                      }}
                      placeholder="dd/mm/yyyy"
                      style={{ width: '100%', padding: '8px 12px', border: '1px solid #d1d5db', borderRadius: 6 }}
                    />
                  </div>
                  <div>
                    <label style={{ display: 'block', marginBottom: 8, fontWeight: 600 }}>Tr·∫°ng th√°i</label>
                    <select
                      value={selectedStatus}
                      onChange={(e) => setSelectedStatus(e.target.value)}
                      style={{ width: '100%', padding: '8px 12px', border: '1px solid #d1d5db', borderRadius: 6 }}
                    >
                      <option value="GOOD">Container t·ªët</option>
                      <option value="NEED_REPAIR">C·∫ßn s·ª≠a ch·ªØa</option>
                    </select>
                  </div>
                </div>
              </div>
              <div style={{ padding: 12, borderTop: '1px solid #e5e7eb', display: 'flex', justifyContent: 'flex-end', gap: 8 }}>
                <button 
                  className="btn btn-primary"
                  onClick={async () => {
                    try {
                      if (selectedRow?.containerNumber) {
                        console.log('üîÑ Updating container:', selectedRow.containerNumber, 'with customer:', selectedCustomerId);
                        
                        // G·ªçi API c·∫≠p nh·∫≠t th√¥ng tin container
                        const updateData: any = {};
                        
                        // Debug: Log c√°c gi√° tr·ªã ƒë·ªÉ ki·ªÉm tra
                        console.log('üîç Debug update data:');
                        console.log('  selectedCustomerId:', selectedCustomerId);
                        console.log('  selectedShippingLineId:', selectedShippingLineId);
                        console.log('  selectedContainerTypeId:', selectedContainerTypeId);
                        console.log('  selectedStatus:', selectedStatus, 'vs selectedRow.containerQuality:', selectedRow.containerQuality);
                        console.log('  selectedSealNumber:', selectedSealNumber, 'vs selectedRow.sealNumber:', selectedRow.sealNumber);
                        console.log('  selectedDemDet:', selectedDemDet, 'vs selectedRow.demDet:', selectedRow.demDet);
                        
                        // Lu√¥n c·∫≠p nh·∫≠t n·∫øu c√≥ gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn (kh√¥ng c·∫ßn so s√°nh)
                        if (selectedCustomerId && selectedCustomerId !== '') {
                          updateData.customer_id = selectedCustomerId;
                        }
                        if (selectedShippingLineId && selectedShippingLineId !== '') {
                          updateData.shipping_line_id = selectedShippingLineId;
                        }
                        if (selectedContainerTypeId && selectedContainerTypeId !== '') {
                          updateData.container_type_id = selectedContainerTypeId;
                        }
                        if (selectedStatus && selectedStatus !== '') {
                          updateData.container_quality = selectedStatus;
                        }
                        if (selectedSealNumber && selectedSealNumber.trim() !== '') {
                          // Cho ph√©p c·∫≠p nh·∫≠t seal number m√† kh√¥ng c·∫ßn b·∫Øt bu·ªôc c√≥ h√£ng t√†u
                          updateData.seal_number = selectedSealNumber;
                        }
                        if (selectedDemDet && selectedDemDet.trim() !== '') {
                          updateData.dem_det = selectedDemDet;
                        }
                        
                        console.log('üì§ Update data to send:', updateData);
                        
                        const response = await containersApi.update(selectedRow.containerNumber, updateData);
                        console.log('‚úÖ API response:', response);

                        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ xu·∫•t seal n·∫øu c√≥ nh·∫≠p s·ªë seal m·ªõi v√† c√≥ h√£ng t√†u
                        if (selectedSealNumber && selectedSealNumber !== selectedRow.sealNumber && selectedSealNumber.trim() !== '') {
                          try {
                            // L·∫•y t√™n h√£ng t√†u t·ª´ selectedShippingLineId ho·∫∑c t·ª´ selectedRow
                            let shippingCompanyName = '';
                            if (selectedShippingLineId) {
                              const shippingLine = shippingLines.find(sl => sl.id === selectedShippingLineId);
                              shippingCompanyName = shippingLine?.name || '';
                            } else if (selectedRow.shippingLine) {
                              shippingCompanyName = selectedRow.shippingLine;
                            }

                            if (shippingCompanyName) {
                              console.log('üîÑ Updating seal exported quantity for shipping company:', shippingCompanyName);
                              await sealsApi.incrementExportedQuantity(
                                shippingCompanyName,
                                selectedSealNumber,
                                selectedRow.containerNumber,
                                selectedRow.id // S·ª≠ d·ª•ng request ID ƒë·ªÉ l·∫•y booking t·ª´ ServiceRequest
                              );
                              console.log('‚úÖ Seal exported quantity updated successfully');
                            } else {
                              console.log('‚ÑπÔ∏è Seal number updated but no shipping company found - skipping seal quantity update');
                            }
                          } catch (sealError: any) {
                            console.error('‚ùå Error updating seal exported quantity:', sealError);
                            // Kh√¥ng hi·ªÉn th·ªã l·ªói seal ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n qu√° tr√¨nh c·∫≠p nh·∫≠t container
                            // Ch·ªâ log ƒë·ªÉ debug
                          }
                        }
                        
                         // C·∫≠p nh·∫≠t local state cho allData - ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≥ thay ƒë·ªïi
                         const updatedAllData = allData.map(item => {
                           if (item.containerNumber === selectedRow.containerNumber) {
                             const updatedItem = { ...item };
                             
                             // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu c√≥ gi√° tr·ªã m·ªõi
                             if (selectedCustomerId && selectedCustomerId !== '') {
                               const customerName = customers.find(c => c.id === selectedCustomerId)?.name;
                               if (customerName) {
                                 updatedItem.customer = customerName;
                               }
                             }
                             if (selectedShippingLineId && selectedShippingLineId !== '') {
                               updatedItem.shippingLine = shippingLines.find(sl => sl.id === selectedShippingLineId)?.name || item.shippingLine;
                             }
                             if (selectedContainerTypeId && selectedContainerTypeId !== '') {
                               updatedItem.containerType = containerTypes.find(ct => ct.id === selectedContainerTypeId)?.code || item.containerType;
                             }
                             if (selectedStatus && selectedStatus !== '') {
                               updatedItem.containerQuality = selectedStatus as "GOOD" | "NEED_REPAIR" | "UNKNOWN";
                             }
                             if (selectedSealNumber && selectedSealNumber.trim() !== '') {
                               updatedItem.sealNumber = selectedSealNumber;
                             }
                             if (selectedDemDet && selectedDemDet.trim() !== '') {
                               updatedItem.demDet = selectedDemDet;
                             }
                             
                             return updatedItem;
                           }
                           return item;
                         });
                        setAllData(updatedAllData);
                        
                        // Kh√¥ng c·∫ßn refresh data t·ª´ server v√¨ ƒë√£ c·∫≠p nh·∫≠t local state
                        // await fetchImportRequests(); // Comment out ƒë·ªÉ tr√°nh ghi ƒë√® local state
                        
                        const updatedFields = [];
                        if (selectedCustomerId && selectedCustomerId !== '') updatedFields.push('kh√°ch h√†ng');
                        if (selectedShippingLineId && selectedShippingLineId !== '') updatedFields.push('h√£ng t√†u');
                        if (selectedContainerTypeId && selectedContainerTypeId !== '') updatedFields.push('lo·∫°i container');
                        if (selectedStatus !== selectedRow.containerQuality) updatedFields.push('tr·∫°ng th√°i');
                        if (selectedSealNumber !== selectedRow.sealNumber) updatedFields.push('s·ªë seal');
                        if (selectedDemDet !== (selectedRow.demDet === 'Kh√¥ng c√≥' ? '' : selectedRow.demDet || '')) updatedFields.push('DEM/DET');
                        
                        if (updatedFields.length > 0) {
                          showSuccess(`C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng! ƒê√£ c·∫≠p nh·∫≠t: ${updatedFields.join(', ')}.`, undefined, 2000);
                        }
                      }
                      
                      setIsUpdateModalOpen(false);
                      setSelectedRow(null);
                      setSelectedCustomerId('');
                      setSelectedShippingLineId('');
                      setSelectedContainerTypeId('');
                      setSelectedStatus('');
                      setSelectedSealNumber('');
                      setSelectedDemDet('');
                    } catch (error) {
                      console.error('‚ùå Error updating container:', error);
                      showError('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin!', undefined, 3000);
                    }
                  }}
                >
                  L∆∞u
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Toast Container */}
        <ToastContainer />
      </main>
    </>
  );
}