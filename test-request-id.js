const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRequestIdGeneration() {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Request ID Generation...\n');
    
    try {
        // 1. T·∫°o request ƒë·∫ßu ti√™n cho container 1234
        console.log('1Ô∏è‚É£ T·∫°o request ƒë·∫ßu ti√™n cho container 1234...');
        const firstRequest = await prisma.serviceRequest.create({
            data: {
                created_by: 'test-user-id',
                type: 'IMPORT',
                container_no: '1234',
                eta: new Date(),
                status: 'PENDING',
                history: [{ at: new Date().toISOString(), by: 'test-user-id', action: 'CREATE' }]
            }
        });
        console.log(`‚úÖ Request ƒë·∫ßu ti√™n ƒë∆∞·ª£c t·∫°o v·ªõi ID: ${firstRequest.id}`);
        console.log(`   Container: ${firstRequest.container_no}`);
        console.log(`   Status: ${firstRequest.status}\n`);

        // 2. Reject request ƒë·∫ßu ti√™n
        console.log('2Ô∏è‚É£ Reject request ƒë·∫ßu ti√™n...');
        const rejectedRequest = await prisma.serviceRequest.update({
            where: { id: firstRequest.id },
            data: {
                status: 'REJECTED',
                rejected_reason: 'Test rejection',
                rejected_by: 'test-admin-id',
                rejected_at: new Date(),
                history: [
                    ...(Array.isArray(firstRequest.history) ? firstRequest.history : []),
                    { at: new Date().toISOString(), by: 'test-admin-id', action: 'REJECT', reason: 'Test rejection' }
                ]
            }
        });
        console.log(`‚úÖ Request ƒë√£ b·ªã reject v·ªõi ID: ${rejectedRequest.id}`);
        console.log(`   Status: ${rejectedRequest.status}\n`);

        // 3. T·∫°o request th·ª© hai cho c√πng container 1234
        console.log('3Ô∏è‚É£ T·∫°o request th·ª© hai cho container 1234...');
        const secondRequest = await prisma.serviceRequest.create({
            data: {
                created_by: 'test-user-id',
                type: 'IMPORT',
                container_no: '1234',
                eta: new Date(),
                status: 'PENDING',
                history: [{ at: new Date().toISOString(), by: 'test-user-id', action: 'CREATE' }]
            }
        });
        console.log(`‚úÖ Request th·ª© hai ƒë∆∞·ª£c t·∫°o v·ªõi ID: ${secondRequest.id}`);
        console.log(`   Container: ${secondRequest.container_no}`);
        console.log(`   Status: ${secondRequest.status}\n`);

        // 4. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('4Ô∏è‚É£ Ki·ªÉm tra k·∫øt qu·∫£...');
        const isDifferentId = firstRequest.id !== secondRequest.id;
        const sameContainer = firstRequest.container_no === secondRequest.container_no;
        
        console.log(`üìä K·∫øt qu·∫£:`);
        console.log(`   - Request ƒë·∫ßu ti√™n ID: ${firstRequest.id}`);
        console.log(`   - Request th·ª© hai ID: ${secondRequest.id}`);
        console.log(`   - ID kh√°c nhau: ${isDifferentId ? '‚úÖ C√ì' : '‚ùå KH√îNG'}`);
        console.log(`   - C√πng container: ${sameContainer ? '‚úÖ C√ì' : '‚ùå KH√îNG'}`);
        
        if (isDifferentId && sameContainer) {
            console.log('\nüéâ TEST TH√ÄNH C√îNG! Logic ho·∫°t ƒë·ªông ƒë√∫ng:');
            console.log('   - C√≥ th·ªÉ t·∫°o request m·ªõi cho container ƒë√£ b·ªã reject');
            console.log('   - M·ªói request c√≥ ID duy nh·∫•t');
            console.log('   - Tr√°nh ƒë∆∞·ª£c conflict khi status t·ª± ƒë·ªông chuy·ªÉn');
        } else {
            console.log('\n‚ùå TEST TH·∫§T B·∫†I! C√≥ v·∫•n ƒë·ªÅ v·ªõi logic.');
        }

        // 5. Hi·ªÉn th·ªã t·∫•t c·∫£ requests cho container 1234
        console.log('\n5Ô∏è‚É£ Danh s√°ch t·∫•t c·∫£ requests cho container 1234:');
        const allRequests = await prisma.serviceRequest.findMany({
            where: { container_no: '1234' },
            orderBy: { createdAt: 'asc' },
            select: {
                id: true,
                container_no: true,
                status: true,
                createdAt: true,
                rejected_at: true
            }
        });
        
        allRequests.forEach((req, index) => {
            console.log(`   ${index + 1}. ID: ${req.id}`);
            console.log(`      Container: ${req.container_no}`);
            console.log(`      Status: ${req.status}`);
            console.log(`      Created: ${req.createdAt.toISOString()}`);
            if (req.rejected_at) {
                console.log(`      Rejected: ${req.rejected_at.toISOString()}`);
            }
            console.log('');
        });

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
        console.error('Chi ti·∫øt l·ªói:', error);
    } finally {
        // Cleanup: X√≥a test data
        console.log('üßπ D·ªçn d·∫πp test data...');
        try {
            await prisma.serviceRequest.deleteMany({
                where: { 
                    container_no: '1234',
                    created_by: 'test-user-id'
                }
            });
            console.log('‚úÖ ƒê√£ x√≥a test data');
        } catch (cleanupError) {
            console.error('‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp:', cleanupError.message);
        }
        
        await prisma.$disconnect();
        console.log('\nüèÅ Test ho√†n th√†nh!');
    }
}

// Ch·∫°y test
testRequestIdGeneration();
