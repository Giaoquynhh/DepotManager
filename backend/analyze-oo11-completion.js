const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeOO11Completion() {
  try {
    console.log('üìä PH√ÇN T√çCH CHI TI·∫æT CONTAINER OO11 - ƒê√É GEN ƒê∆Ø·ª¢C BAO NHI√äU %');
    console.log('=' .repeat(80));

    const containerNo = 'OO11';

    // L·∫•y th√¥ng tin ServiceRequest m·ªõi nh·∫•t (EXPORT v·ªõi status GATE_OUT)
    const latestRequest = await prisma.serviceRequest.findFirst({
      where: { 
        container_no: containerNo,
        type: 'EXPORT',
        status: 'GATE_OUT'
      },
      orderBy: { createdAt: 'desc' },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (!latestRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest EXPORT v·ªõi status GATE_OUT cho container OO11');
      return;
    }

    console.log('üìã TH√îNG TIN CONTAINER OO11 ƒê·∫¶Y ƒê·ª¶:');
    console.log('=' .repeat(50));

    // Th√¥ng tin c∆° b·∫£n
    console.log('\nüè∑Ô∏è  TH√îNG TIN C∆† B·∫¢N:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Type: ${latestRequest.type}`);
    console.log(`   - Status: ${latestRequest.status}`);
    console.log(`   - Request ID: ${latestRequest.id}`);

    // Th√¥ng tin kh√°ch h√†ng
    console.log('\nüë§ TH√îNG TIN KH√ÅCH H√ÄNG:');
    console.log(`   - T√™n: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - M√£: ${latestRequest.customer?.code || 'N/A'}`);
    console.log(`   - ID: ${latestRequest.customer?.id || 'N/A'}`);

    // Th√¥ng tin h√£ng t√†u
    console.log('\nüö¢ TH√îNG TIN H√ÉNG T√ÄU:');
    console.log(`   - T√™n: ${latestRequest.shipping_line?.name || 'N/A'}`);
    console.log(`   - M√£: ${latestRequest.shipping_line?.code || 'N/A'}`);
    console.log(`   - ID: ${latestRequest.shipping_line?.id || 'N/A'}`);

    // Th√¥ng tin container
    console.log('\nüì¶ TH√îNG TIN CONTAINER:');
    console.log(`   - Lo·∫°i: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - M√£ lo·∫°i: ${latestRequest.container_type?.code || 'N/A'}`);
    console.log(`   - ID lo·∫°i: ${latestRequest.container_type?.id || 'N/A'}`);

    // Th√¥ng tin v·∫≠n chuy·ªÉn
    console.log('\nüöõ TH√îNG TIN V·∫¨N CHUY·ªÇN:');
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - DEM/DET: ${latestRequest.dem_det || 'N/A'}`);
    console.log(`   - Bi·ªÉn s·ªë xe: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - T√™n t√†i x·∫ø: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - SƒêT t√†i x·∫ø: ${latestRequest.driver_phone || 'N/A'}`);

    // Th√¥ng tin th·ªùi gian
    console.log('\n‚è∞ TH√îNG TIN TH·ªúI GIAN:');
    console.log(`   - Ng√†y t·∫°o: ${latestRequest.createdAt}`);
    console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${latestRequest.updatedAt}`);
    console.log(`   - Ng∆∞·ªùi t·∫°o: ${latestRequest.created_by}`);

    // Ph√¢n t√≠ch % ho√†n th√†nh
    console.log('\nüìä PH√ÇN T√çCH % HO√ÄN TH√ÄNH:');
    console.log('=' .repeat(50));

    const requiredFields = [
      { name: 'Container Number', value: latestRequest.container_no, required: true },
      { name: 'Customer Name', value: latestRequest.customer?.name, required: true },
      { name: 'Shipping Line', value: latestRequest.shipping_line?.name, required: true },
      { name: 'Container Type', value: latestRequest.container_type?.description, required: true },
      { name: 'Seal Number', value: latestRequest.seal_number, required: true },
      { name: 'License Plate', value: latestRequest.license_plate, required: true },
      { name: 'Driver Name', value: latestRequest.driver_name, required: true },
      { name: 'Driver Phone', value: latestRequest.driver_phone, required: true },
      { name: 'Request Type', value: latestRequest.type, required: true },
      { name: 'Request Status', value: latestRequest.status, required: true }
    ];

    const optionalFields = [
      { name: 'Customer Code', value: latestRequest.customer?.code, required: false },
      { name: 'Shipping Line Code', value: latestRequest.shipping_line?.code, required: false },
      { name: 'Container Type Code', value: latestRequest.container_type?.code, required: false },
      { name: 'DEM/DET', value: latestRequest.dem_det, required: false },
      { name: 'Request ID', value: latestRequest.id, required: false },
      { name: 'Created By', value: latestRequest.created_by, required: false }
    ];

    let completedRequired = 0;
    let completedOptional = 0;

    console.log('\n‚úÖ TH√îNG TIN B·∫ÆT BU·ªòC:');
    requiredFields.forEach(field => {
      const hasValue = field.value && field.value !== 'N/A';
      if (hasValue) completedRequired++;
      console.log(`   ${hasValue ? '‚úÖ' : '‚ùå'} ${field.name}: ${field.value || 'N/A'}`);
    });

    console.log('\nüìù TH√îNG TIN T√ôY CH·ªåN:');
    optionalFields.forEach(field => {
      const hasValue = field.value && field.value !== 'N/A';
      if (hasValue) completedOptional++;
      console.log(`   ${hasValue ? '‚úÖ' : '‚ö†Ô∏è '} ${field.name}: ${field.value || 'N/A'}`);
    });

    const totalRequired = requiredFields.length;
    const totalOptional = optionalFields.length;
    const totalFields = totalRequired + totalOptional;

    const requiredPercentage = (completedRequired / totalRequired) * 100;
    const optionalPercentage = (completedOptional / totalOptional) * 100;
    const overallPercentage = ((completedRequired + completedOptional) / totalFields) * 100;

    console.log('\nüìà K·∫æT QU·∫¢ PH√ÇN T√çCH:');
    console.log('=' .repeat(50));
    console.log(`üìä Th√¥ng tin b·∫Øt bu·ªôc: ${completedRequired}/${totalRequired} (${requiredPercentage.toFixed(1)}%)`);
    console.log(`üìù Th√¥ng tin t√πy ch·ªçn: ${completedOptional}/${totalOptional} (${optionalPercentage.toFixed(1)}%)`);
    console.log(`üéØ T·ªïng c·ªông: ${completedRequired + completedOptional}/${totalFields} (${overallPercentage.toFixed(1)}%)`);

    console.log('\nüéØ ƒê√ÅNH GI√Å:');
    if (overallPercentage >= 90) {
      console.log('   üèÜ XU·∫§T S·∫ÆC - ƒê·ªß th√¥ng tin ƒë·ªÉ t·∫°o phi·∫øu EIR ho√†n ch·ªânh');
    } else if (overallPercentage >= 80) {
      console.log('   ‚úÖ T·ªêT - ƒê·ªß th√¥ng tin c∆° b·∫£n ƒë·ªÉ t·∫°o phi·∫øu EIR');
    } else if (overallPercentage >= 70) {
      console.log('   ‚ö†Ô∏è  KH√Å - C·∫ßn b·ªï sung th√™m th√¥ng tin');
    } else {
      console.log('   ‚ùå CH∆ØA ƒê·ª¶ - C·∫ßn b·ªï sung nhi·ªÅu th√¥ng tin');
    }

    console.log('\nüìã TH√îNG TIN ƒê√É S·ª¨ D·ª§NG TRONG PHI·∫æU EIR:');
    console.log('=' .repeat(50));
    console.log('‚úÖ ƒê√£ s·ª≠ d·ª•ng:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.code || 'N/A'}`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - S·ªë xe: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - T√†i x·∫ø: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - SƒêT t√†i x·∫ø: ${latestRequest.driver_phone || 'N/A'}`);

    console.log('\n‚ö†Ô∏è  TH√îNG TIN CH∆ØA S·ª¨ D·ª§NG:');
    console.log('   - DEM/DET: C√≥ th·ªÉ th√™m v√†o phi·∫øu EIR');
    console.log('   - Request ID: Th√¥ng tin n·ªôi b·ªô');
    console.log('   - Created By: Th√¥ng tin n·ªôi b·ªô');
    console.log('   - Timestamps: Th√¥ng tin n·ªôi b·ªô');

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch container OO11:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeOO11Completion();
