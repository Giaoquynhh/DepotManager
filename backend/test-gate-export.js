const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testGateExport() {
  try {
    console.log('üîç Ki·ªÉm tra database cho GATE_IN requests...');
    
    // Ki·ªÉm tra t·∫•t c·∫£ requests c√≥ status GATE_IN
    const gateInRequests = await prisma.serviceRequest.findMany({
      where: {
        status: 'GATE_IN'
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log(`\nüìä T·ªïng s·ªë requests c√≥ status GATE_IN: ${gateInRequests.length}`);
    
    if (gateInRequests.length > 0) {
      console.log('\nüìã Chi ti·∫øt c√°c requests GATE_IN:');
      gateInRequests.forEach((req, index) => {
        console.log(`${index + 1}. ID: ${req.id}`);
        console.log(`   Container: ${req.container_no || 'N/A'}`);
        console.log(`   Type: ${req.type || 'N/A'}`);
        console.log(`   Status: ${req.status}`);
        console.log(`   Created: ${req.createdAt}`);
        console.log(`   Updated: ${req.updatedAt}`);
        console.log('---');
      });
    }
    
    // Ki·ªÉm tra theo type
    const exportRequests = await prisma.serviceRequest.findMany({
      where: {
        type: 'EXPORT'
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log(`\nüì¶ T·ªïng s·ªë EXPORT requests: ${exportRequests.length}`);
    
    if (exportRequests.length > 0) {
      console.log('\nüìã Chi ti·∫øt c√°c EXPORT requests:');
      exportRequests.forEach((req, index) => {
        console.log(`${index + 1}. ID: ${req.id}`);
        console.log(`   Container: ${req.container_no || 'N/A'}`);
        console.log(`   Type: ${req.type}`);
        console.log(`   Status: ${req.status}`);
        console.log(`   Created: ${req.createdAt}`);
        console.log(`   Updated: ${req.updatedAt}`);
        console.log('---');
      });
    }
    
    // Ki·ªÉm tra IMPORT requests
    const importRequests = await prisma.serviceRequest.findMany({
      where: {
        type: 'IMPORT'
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log(`\nüì• T·ªïng s·ªë IMPORT requests: ${importRequests.length}`);
    
    // Ki·ªÉm tra c·ª• th·ªÉ EXPORT requests c√≥ status GATE_IN
    const exportGateInRequests = await prisma.serviceRequest.findMany({
      where: {
        type: 'EXPORT',
        status: 'GATE_IN'
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log(`\nüéØ EXPORT requests c√≥ status GATE_IN: ${exportGateInRequests.length}`);
    
    if (exportGateInRequests.length > 0) {
      console.log('\nüìã Chi ti·∫øt EXPORT requests GATE_IN:');
      exportGateInRequests.forEach((req, index) => {
        console.log(`${index + 1}. ID: ${req.id}`);
        console.log(`   Container: ${req.container_no || 'N/A'}`);
        console.log(`   Type: ${req.type}`);
        console.log(`   Status: ${req.status}`);
        console.log(`   Created: ${req.createdAt}`);
        console.log(`   Updated: ${req.updatedAt}`);
        console.log('---');
      });
    }
    
    // Ki·ªÉm tra t·∫•t c·∫£ status c√≥ trong database
    const allStatuses = await prisma.serviceRequest.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });
    
    console.log('\nüìä Th·ªëng k√™ theo status:');
    allStatuses.forEach((status) => {
      console.log(`   ${status.status}: ${status._count.status}`);
    });
    
    // Ki·ªÉm tra t·∫•t c·∫£ types c√≥ trong database
    const allTypes = await prisma.serviceRequest.groupBy({
      by: ['type'],
      _count: {
        type: true
      }
    });
    
    console.log('\nüìä Th·ªëng k√™ theo type:');
    allTypes.forEach((type) => {
      console.log(`   ${type.type || 'NULL'}: ${type._count.type}`);
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testGateExport();
