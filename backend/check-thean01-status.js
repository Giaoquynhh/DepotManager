const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkTHEAN01Status() {
	try {
		console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i container THEAN01');
		console.log('=' .repeat(60));

		const containerNo = 'THEAN01';

		// 1. Ki·ªÉm tra ServiceRequest
		console.log('üìã 1. Ki·ªÉm tra ServiceRequest:');
		const requests = await prisma.serviceRequest.findMany({
			where: { container_no: containerNo },
			orderBy: { createdAt: 'desc' },
			include: {
				customer: {
					select: { id: true, name: true, code: true }
				},
				shipping_line: {
					select: { id: true, name: true, code: true }
				},
				container_type: {
					select: { id: true, code: true, description: true }
				}
			}
		});

		if (requests.length > 0) {
			console.log(`‚úÖ T√¨m th·∫•y ${requests.length} ServiceRequest(s):`);
			requests.forEach((req, index) => {
				console.log(`   Request ${index + 1}:`);
				console.log(`   - ID: ${req.id}`);
				console.log(`   - Type: ${req.type}`);
				console.log(`   - Status: ${req.status}`);
				console.log(`   - Kh√°ch h√†ng: ${req.customer?.name || 'N/A'} (${req.customer?.code || 'N/A'})`);
				console.log(`   - H√£ng t√†u: ${req.shipping_line?.name || 'N/A'} (${req.shipping_line?.code || 'N/A'})`);
				console.log(`   - Lo·∫°i container: ${req.container_type?.description || 'N/A'} (${req.container_type?.code || 'N/A'})`);
				console.log(`   - Seal s·ªë: ${req.seal_number || 'N/A'}`);
				console.log(`   - DEM/DET: ${req.dem_det || 'N/A'}`);
				console.log(`   - Created by: ${req.created_by}`);
				console.log(`   - Ng√†y t·∫°o: ${req.createdAt}`);
				console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${req.updatedAt}`);
				console.log('');
			});

			// Ph√¢n t√≠ch conflict
			const exportRequests = requests.filter(req => req.type === 'EXPORT');
			const importRequests = requests.filter(req => req.type === 'IMPORT');
			
			if (exportRequests.length > 0 && importRequests.length > 0) {
				console.log('‚ùå CONFLICT DETECTED: Container c√≥ c·∫£ EXPORT v√† IMPORT requests!');
				console.log(`üì§ EXPORT requests: ${exportRequests.length}`);
				console.log(`üì• IMPORT requests: ${importRequests.length}`);
			}
		} else {
			console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest');
		}

		console.log('\n' + '-'.repeat(40) + '\n');

		// 2. Ki·ªÉm tra Container model
		console.log('üì¶ 2. Ki·ªÉm tra Container model:');
		const container = await prisma.container.findUnique({
			where: { container_no: containerNo },
			include: {
				customer: {
					select: { id: true, name: true, code: true }
				},
				shipping_line: {
					select: { id: true, name: true, code: true }
				},
				container_type: {
					select: { id: true, code: true, description: true }
				}
			}
		});

		if (container) {
			console.log('‚úÖ T√¨m th·∫•y trong Container:');
			console.log(`   - ID: ${container.id}`);
			console.log(`   - Status: ${container.status}`);
			console.log(`   - Kh√°ch h√†ng: ${container.customer?.name || 'N/A'} (${container.customer?.code || 'N/A'})`);
			console.log(`   - H√£ng t√†u: ${container.shipping_line?.name || 'N/A'} (${container.shipping_line?.code || 'N/A'})`);
			console.log(`   - Lo·∫°i container: ${container.container_type?.description || 'N/A'} (${container.container_type?.code || 'N/A'})`);
			console.log(`   - Seal s·ªë: ${container.seal_number || 'N/A'}`);
			console.log(`   - DEM/DET: ${container.dem_det || 'N/A'}`);
			console.log(`   - Yard: ${container.yard_name || 'N/A'}`);
			console.log(`   - Block: ${container.block_code || 'N/A'}`);
			console.log(`   - Slot: ${container.slot_code || 'N/A'}`);
			console.log(`   - Created by: ${container.created_by}`);
			console.log(`   - Ng√†y t·∫°o: ${container.createdAt}`);
			console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${container.updatedAt}`);
		} else {
			console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong Container');
		}

		console.log('\n' + '-'.repeat(40) + '\n');

		// 3. Ki·ªÉm tra YardSlot
		console.log('üìç 3. Ki·ªÉm tra YardSlot:');
		const yardSlot = await prisma.yardSlot.findFirst({
			where: { occupant_container_no: containerNo },
			include: {
				block: {
					include: {
						yard: true
					}
				}
			}
		});

		if (yardSlot) {
			console.log('‚úÖ T√¨m th·∫•y trong YardSlot:');
			console.log(`   - Slot ID: ${yardSlot.id}`);
			console.log(`   - Yard: ${yardSlot.block?.yard?.name || 'N/A'}`);
			console.log(`   - Block: ${yardSlot.block?.code || 'N/A'}`);
			console.log(`   - Slot: ${yardSlot.code || 'N/A'}`);
			console.log(`   - Status: ${yardSlot.status || 'N/A'}`);
		} else {
			console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong YardSlot');
		}

		console.log('\n' + '-'.repeat(40) + '\n');

		// 4. Ki·ªÉm tra ForkliftTask
		console.log('üöõ 4. Ki·ªÉm tra ForkliftTask:');
		const forkliftTasks = await prisma.forkliftTask.findMany({
			where: { container_no: containerNo },
			orderBy: { createdAt: 'asc' }
		});

		if (forkliftTasks.length > 0) {
			console.log(`‚úÖ T√¨m th·∫•y ${forkliftTasks.length} ForkliftTask(s):`);
			forkliftTasks.forEach((task, index) => {
				console.log(`   Task ${index + 1}:`);
				console.log(`   - ID: ${task.id}`);
				console.log(`   - Status: ${task.status}`);
				console.log(`   - From Slot: ${task.from_slot_id || 'N/A'}`);
				console.log(`   - To Slot: ${task.to_slot_id || 'N/A'}`);
				console.log(`   - Created by: ${task.created_by}`);
				console.log(`   - Assigned to: ${task.assigned_driver_id || 'N/A'}`);
				console.log(`   - Created At: ${task.createdAt}`);
				console.log(`   - Updated At: ${task.updatedAt}`);
				console.log('');
			});
		} else {
			console.log('‚ùå Kh√¥ng c√≥ ForkliftTask n√†o');
		}

		console.log('\n' + '-'.repeat(40) + '\n');

		// 5. Ki·ªÉm tra RepairTicket
		console.log('üîß 5. Ki·ªÉm tra RepairTicket:');
		const repairTickets = await prisma.repairTicket.findMany({
			where: { container_no: containerNo },
			orderBy: { createdAt: 'desc' }
		});

		if (repairTickets.length > 0) {
			console.log(`‚úÖ T√¨m th·∫•y ${repairTickets.length} repair ticket(s):`);
			repairTickets.forEach((ticket, index) => {
				console.log(`   Ticket ${index + 1}:`);
				console.log(`   - ID: ${ticket.id}`);
				console.log(`   - Code: ${ticket.code}`);
				console.log(`   - Status: ${ticket.status}`);
				console.log(`   - M√¥ t·∫£: ${ticket.problem_description || 'N/A'}`);
				console.log(`   - Cost: ${ticket.repair_cost ? `${ticket.repair_cost} VND` : 'N/A'}`);
				console.log(`   - Ng√†y t·∫°o: ${ticket.createdAt}`);
				console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${ticket.updatedAt}`);
				console.log('');
			});
		} else {
			console.log('‚ùå Kh√¥ng c√≥ repair ticket n√†o');
		}

		console.log('\n' + '='.repeat(60) + '\n');
		console.log('üìä T√ìM T·∫ÆT TR·∫†NG TH√ÅI THEAN01:');
		
		if (requests.length === 0) {
			console.log('‚ùå Kh√¥ng c√≥ ServiceRequest n√†o');
			
			if (container) {
				console.log(`‚úÖ C√≥ Container model: ${container.status}`);
				console.log('üí° ƒê√¢y c√≥ th·ªÉ l√† container ƒë∆∞·ª£c SystemAdmin ƒë·∫∑t tr·ª±c ti·∫øp v√†o b√£i');
			} else {
				console.log('‚ùå Container kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
			}
		} else if (requests.length === 1) {
			console.log('‚úÖ C√≥ duy nh·∫•t 1 ServiceRequest (B√åNH TH∆Ø·ªúNG)');
			const activeRequest = requests[0];
			console.log(`üìã ${activeRequest.type} - ${activeRequest.status}`);
			
			// Ph√¢n t√≠ch workflow
			if (activeRequest.type === 'EXPORT') {
				console.log('üéØ ƒê√¢y l√† EXPORT (y√™u c·∫ßu n√¢ng)');
				if (activeRequest.status === 'PENDING') console.log('üìã C·∫ßn ch·∫•p nh·∫≠n');
				else if (activeRequest.status === 'CHECKED') console.log('üìã ƒê√£ ch·∫•p nh·∫≠n, ch·ªù v√†o c·ªïng');
				else if (activeRequest.status === 'GATE_IN') console.log('üìã ƒê√£ v√†o c·ªïng, ch·ªù forklift');
				else if (activeRequest.status === 'FORKLIFTING') console.log('üìã ƒêang n√¢ng container');
				else if (activeRequest.status === 'DONE_LIFTING') console.log('üìã ƒê√£ n√¢ng xong, ch·ªù Gate Out');
				else if (activeRequest.status === 'IN_CAR') console.log('üìã ƒê√£ tr√™n xe, ch·ªù Gate Out');
				else if (activeRequest.status === 'GATE_OUT') console.log('üìã ƒê√£ Gate Out th√†nh c√¥ng');
			} else if (activeRequest.type === 'IMPORT') {
				console.log('üéØ ƒê√¢y l√† IMPORT (y√™u c·∫ßu h·∫°)');
				if (activeRequest.status === 'PENDING') console.log('üìã C·∫ßn ch·∫•p nh·∫≠n');
				else if (activeRequest.status === 'CHECKED') console.log('üìã ƒê√£ ch·∫•p nh·∫≠n, ch·ªù v√†o c·ªïng');
				else if (activeRequest.status === 'GATE_IN') console.log('üìã ƒê√£ v√†o c·ªïng, ch·ªù forklift');
				else if (activeRequest.status === 'FORKLIFTING') console.log('üìã ƒêang h·∫° container');
				else if (activeRequest.status === 'IN_YARD') console.log('üìã ƒê√£ h·∫° th√†nh c√¥ng');
				else if (activeRequest.status === 'EMPTY_IN_YARD') console.log('üìã Container r·ªóng trong b√£i');
				else if (activeRequest.status === 'GATE_OUT') console.log('üìã Xe ƒë√£ r·ªùi kh·ªèi b√£i');
			}
		} else {
			console.log('‚ùå C√≥ NHI·ªÄU ServiceRequest (CONFLICT)');
			console.log(`üìä T·ªïng ${requests.length} requests:`);
			requests.forEach((req, index) => {
				console.log(`   ${index + 1}. ${req.type} - ${req.status} (${req.createdAt.toLocaleString()})`);
			});
			
			console.log('üîß C·∫ßn xem x√©t x√≥a duplicate requests');
		}

		// Hi·ªÉn th·ªã v·ªã tr√≠ hi·ªán t·∫°i
		if (yardSlot) {
			console.log(`üìç V·ªã tr√≠ hi·ªán t·∫°i: ${yardSlot.block?.yard?.name || 'N/A'} - ${yardSlot.block?.code || 'N/A'} - ${yardSlot.code || 'N/A'}`);
		} else {
			console.log(`üìç Kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠`);
		}

	} catch (error) {
		console.log('‚ùå L·ªói khi ki·ªÉm tra:', error.message);
	} finally {
		await prisma.$disconnect();
	}
}

// Ch·∫°y ki·ªÉm tra
checkTHEAN01Status();
