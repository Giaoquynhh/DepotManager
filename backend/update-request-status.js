const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Script ƒë·ªÉ ƒë·ªçc th√¥ng tin forklift v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ "ch·ªù x·ª≠ l√Ω"
 * 
 * Ch·ª©c nƒÉng:
 * 1. Hi·ªÉn th·ªã danh s√°ch forklift tasks hi·ªán t·∫°i
 * 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c forklift task v·ªÅ PENDING (ch·ªù x·ª≠ l√Ω)
 */

async function main() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i forklift tasks...\n');

        // 1. Hi·ªÉn th·ªã danh s√°ch forklift tasks hi·ªán t·∫°i
        console.log('üìã DANH S√ÅCH FORKLIFT TASKS HI·ªÜN T·∫†I:');
        console.log('=====================================');
        
        const forkliftTasks = await prisma.forkliftTask.findMany({
            include: {
                from_slot: {
                    include: {
                        block: {
                            include: { yard: true }
                        }
                    }
                },
                to_slot: {
                    include: {
                        block: {
                            include: { yard: true }
                        }
                    }
                }
            },
            orderBy: { createdAt: 'desc' }
        });

        if (forkliftTasks.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ forklift task n√†o trong h·ªá th·ªëng');
        } else {
            forkliftTasks.forEach((task, index) => {
                console.log(`${index + 1}. Container: ${task.container_no}`);
                console.log(`   Tr·∫°ng th√°i: ${task.status}`);
                console.log(`   T·ª´ v·ªã tr√≠: ${task.from_slot ? `${task.from_slot.block.yard.name} - ${task.from_slot.block.name} - ${task.from_slot.name}` : 'Kh√¥ng x√°c ƒë·ªãnh'}`);
                console.log(`   ƒê·∫øn v·ªã tr√≠: ${task.to_slot ? `${task.to_slot.block.yard.name} - ${task.to_slot.block.name} - ${task.to_slot.name}` : 'Kh√¥ng x√°c ƒë·ªãnh'}`);
                console.log(`   T√†i x·∫ø: ${task.assigned_driver_id || 'Ch∆∞a ph√¢n c√¥ng'}`);
                console.log(`   Ng√†y t·∫°o: ${task.createdAt.toLocaleString('vi-VN')}`);
                console.log('   ---');
            });
        }

        // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c forklift task v·ªÅ PENDING
        console.log('\nüîÑ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI FORKLIFT TASKS V·ªÄ "CH·ªú X·ª¨ L√ù"...');
        console.log('==========================================================');
        
        const forkliftTasksToUpdate = await prisma.forkliftTask.findMany({
            where: {
                status: {
                    not: 'PENDING'
                }
            }
        });

        if (forkliftTasksToUpdate.length === 0) {
            console.log('‚úÖ T·∫•t c·∫£ forklift tasks ƒë√£ ·ªü tr·∫°ng th√°i PENDING');
        } else {
            console.log(`üìù T√¨m th·∫•y ${forkliftTasksToUpdate.length} forklift tasks c·∫ßn c·∫≠p nh·∫≠t v·ªÅ PENDING`);
            
            for (const task of forkliftTasksToUpdate) {
                try {
                    const updatedTask = await prisma.forkliftTask.update({
                        where: { id: task.id },
                        data: {
                            status: 'PENDING',
                            assigned_driver_id: null, // Reset driver assignment
                            cancel_reason: null // Reset cancel reason
                        }
                    });
                    
                    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t forklift task ${task.id} (${task.container_no}) t·ª´ ${task.status} ‚Üí PENDING`);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t forklift task ${task.id}:`, error.message);
                }
            }
        }

        // 3. Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
        console.log('\nüìä K·∫æT QU·∫¢ CU·ªêI C√ôNG:');
        console.log('======================');
        
        const finalForkliftCount = await prisma.forkliftTask.count({
            where: { status: 'PENDING' }
        });
        
        console.log(`üöõ Forklift tasks ƒëang ch·ªù x·ª≠ l√Ω: ${finalForkliftCount}`);
        
        console.log('\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t tr·∫°ng th√°i forklift tasks!');

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y script
main()
    .then(() => {
        console.log('\n‚úÖ Script ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Script th·∫•t b·∫°i:', error);
        process.exit(1);
    });
