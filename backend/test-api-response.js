const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Test API response c·ªßa getContainersNeedInvoice
async function testAPIResponse() {
  console.log('üß™ Test API response c·ªßa getContainersNeedInvoice...');
  
  try {
    // 1. Ki·ªÉm tra ServiceRequest v·ªõi status IN_YARD, IN_CAR, GATE_OUT
    console.log('\nüìã 1. Ki·ªÉm tra ServiceRequest v·ªõi status IN_YARD, IN_CAR, GATE_OUT:');
    const allContainers = await prisma.serviceRequest.findMany({
      where: {
        status: {
          in: ['IN_YARD', 'IN_CAR', 'GATE_OUT']
        }
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        has_invoice: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log('üì¶ T·∫•t c·∫£ containers v·ªõi status ph√π h·ª£p:', allContainers.length);
    allContainers.forEach(container => {
      console.log(`  - ${container.container_no} (${container.type}) - Status: ${container.status}, has_invoice: ${container.has_invoice}`);
    });

    // 2. Ki·ªÉm tra filter has_invoice = false
    console.log('\nüîç 2. Ki·ªÉm tra filter has_invoice = false:');
    const filteredContainers = allContainers.filter(container => !container.has_invoice);
    
    console.log('üì¶ Containers sau khi filter has_invoice = false:', filteredContainers.length);
    filteredContainers.forEach(container => {
      console.log(`  - ${container.container_no} (${container.type}) - Status: ${container.status}, has_invoice: ${container.has_invoice}`);
    });

    // 3. Ki·ªÉm tra ServiceRequest c√≥ has_invoice = true
    console.log('\n‚úÖ 3. Ki·ªÉm tra ServiceRequest c√≥ has_invoice = true:');
    const containersWithInvoice = await prisma.serviceRequest.findMany({
      where: {
        has_invoice: true
      },
      select: {
        id: true,
        container_no: true,
        type: true,
        status: true,
        has_invoice: true
      }
    });
    
    console.log('üì¶ Containers c√≥ h√≥a ƒë∆°n:', containersWithInvoice.length);
    containersWithInvoice.forEach(container => {
      console.log(`  - ${container.container_no} (${container.type}) - Status: ${container.status}, has_invoice: ${container.has_invoice}`);
    });

    // 4. So s√°nh k·∫øt qu·∫£
    console.log('\nüìä 4. So s√°nh k·∫øt qu·∫£:');
    console.log(`  - T·ªïng containers v·ªõi status ph√π h·ª£p: ${allContainers.length}`);
    console.log(`  - Containers c√≥ has_invoice = true: ${containersWithInvoice.length}`);
    console.log(`  - Containers c·∫ßn t·∫°o h√≥a ƒë∆°n (sau filter): ${filteredContainers.length}`);
    
    // 5. Ki·ªÉm tra xem c√≥ container n√†o b·ªã duplicate kh√¥ng
    const containerNos = allContainers.map(c => c.container_no).filter(Boolean);
    const uniqueContainerNos = [...new Set(containerNos)];
    
    console.log(`  - Unique container numbers: ${uniqueContainerNos.length}`);
    if (containerNos.length !== uniqueContainerNos.length) {
      console.log('‚ö†Ô∏è  C√≥ container b·ªã duplicate!');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testAPIResponse();
