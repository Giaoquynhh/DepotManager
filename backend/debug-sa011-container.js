/**
 * Script debug container SA011 - T·∫°i sao kh√¥ng hi·ªÉn th·ªã trong ManagerCont?
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugSA011Container() {
  try {
    console.log('üîç Debug Container SA011 - T·∫°i sao kh√¥ng hi·ªÉn th·ªã trong ManagerCont?');
    console.log('=' .repeat(70));

    const containerNo = 'SA011';

    // 1. Ki·ªÉm tra YardSlot
    console.log('üìç 1. Ki·ªÉm tra YardSlot:');
    const yardSlot = await prisma.yardSlot.findFirst({
      where: { occupant_container_no: containerNo },
      include: { 
        block: { 
          include: { 
            yard: true 
          } 
        } 
      }
    });

    if (yardSlot) {
      console.log('‚úÖ T√¨m th·∫•y trong YardSlot:');
      console.log(`   - Slot ID: ${yardSlot.id}`);
      console.log(`   - Yard: ${yardSlot.block?.yard?.name || 'N/A'}`);
      console.log(`   - Block: ${yardSlot.block?.code || 'N/A'}`);
      console.log(`   - Slot: ${yardSlot.code || 'N/A'}`);
      console.log(`   - Tr·∫°ng th√°i: ${yardSlot.status}`);
      console.log(`   - Container: ${yardSlot.occupant_container_no}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong YardSlot');
    }

    // 2. Ki·ªÉm tra YardPlacement (stacking system)
    console.log('\nüì¶ 2. Ki·ªÉm tra YardPlacement:');
    const yardPlacements = await prisma.yardPlacement.findMany({
      where: { container_no: containerNo },
      include: {
        slot: {
          include: {
            block: {
              include: {
                yard: true
              }
            }
          }
        }
      }
    });

    if (yardPlacements.length > 0) {
      console.log('‚úÖ T√¨m th·∫•y trong YardPlacement:');
      yardPlacements.forEach((placement, index) => {
        console.log(`   Placement ${index + 1}:`);
        console.log(`   - ID: ${placement.id}`);
        console.log(`   - Yard: ${placement.slot?.block?.yard?.name || 'N/A'}`);
        console.log(`   - Block: ${placement.slot?.block?.code || 'N/A'}`);
        console.log(`   - Slot: ${placement.slot?.code || 'N/A'}`);
        console.log(`   - Tier: ${placement.tier}`);
        console.log(`   - Status: ${placement.status}`);
        console.log(`   - Placed at: ${placement.placed_at}`);
        console.log(`   - Removed at: ${placement.removed_at || 'N/A'}`);
      });
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong YardPlacement');
    }

    // 3. Ki·ªÉm tra ServiceRequest
    console.log('\nüìã 3. Ki·ªÉm tra ServiceRequest:');
    const serviceRequests = await prisma.serviceRequest.findMany({
      where: { container_no: containerNo },
      orderBy: { createdAt: 'desc' }
    });

    if (serviceRequests.length > 0) {
      console.log('‚úÖ T√¨m th·∫•y ServiceRequest:');
      serviceRequests.forEach((req, index) => {
        console.log(`   Request ${index + 1}:`);
        console.log(`   - ID: ${req.id}`);
        console.log(`   - Type: ${req.type}`);
        console.log(`   - Status: ${req.status}`);
        console.log(`   - Created: ${req.createdAt}`);
        console.log(`   - Updated: ${req.updatedAt}`);
      });
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest');
    }

    // 4. Ki·ªÉm tra Container model
    console.log('\nüì¶ 4. Ki·ªÉm tra Container model:');
    const container = await prisma.container.findUnique({
      where: { container_no: containerNo }
    });

    if (container) {
      console.log('‚úÖ T√¨m th·∫•y trong Container model:');
      console.log(`   - ID: ${container.id}`);
      console.log(`   - Status: ${container.status}`);
      console.log(`   - Created: ${container.createdAt}`);
      console.log(`   - Updated: ${container.updatedAt}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong Container model');
    }

    // 5. Ki·ªÉm tra logic ManagerCont
    console.log('\nüîç 5. Ph√¢n t√≠ch logic ManagerCont:');
    
    // Ki·ªÉm tra ServiceRequest v·ªõi tr·∫°ng th√°i ƒë∆∞·ª£c l·∫•y
    const activeServiceRequests = await prisma.serviceRequest.findMany({
      where: { 
        container_no: containerNo,
        status: {
          in: ['PENDING', 'NEW_REQUEST', 'FORWARDED', 'GATE_IN', 'IN_YARD', 'IN_CAR', 'FORKLIFTING', 'CHECKED']
        }
      }
    });

    console.log(`   - ServiceRequest v·ªõi tr·∫°ng th√°i active: ${activeServiceRequests.length}`);
    if (activeServiceRequests.length > 0) {
      activeServiceRequests.forEach(req => {
        console.log(`     * ${req.status} (${req.type}) - ${req.createdAt}`);
      });
    }

    // Ki·ªÉm tra container trong yard (kh√¥ng filter service_status)
    const containersInYard = await prisma.$queryRaw`
      SELECT DISTINCT yp.container_no, yp.status as placement_status, yp.placed_at,
             y.name as yard_name, yb.code as block_code, ys.code as slot_code
      FROM "YardPlacement" yp
      LEFT JOIN "YardSlot" ys ON ys.id = yp.slot_id
      LEFT JOIN "YardBlock" yb ON yb.id = ys.block_id
      LEFT JOIN "Yard" y ON y.id = yb.yard_id
      WHERE yp.container_no = ${containerNo}
        AND yp.status = 'OCCUPIED' 
        AND yp.removed_at IS NULL
    `;

    console.log(`   - Container trong yard (YardPlacement): ${containersInYard.length}`);
    if (containersInYard.length > 0) {
      containersInYard.forEach((container) => {
        console.log(`     * Yard: ${container.yard_name || 'N/A'}`);
        console.log(`     * Block: ${container.block_code || 'N/A'}`);
        console.log(`     * Slot: ${container.slot_code || 'N/A'}`);
        console.log(`     * Placed: ${container.placed_at}`);
      });
    }

    // 6. K·∫øt lu·∫≠n
    console.log('\nüéØ 6. K·∫øt lu·∫≠n:');
    const hasYardPosition = yardSlot || yardPlacements.length > 0;
    const hasActiveServiceRequest = activeServiceRequests.length > 0;
    
    console.log(`   - C√≥ v·ªã tr√≠ trong yard: ${hasYardPosition ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - C√≥ ServiceRequest active: ${hasActiveServiceRequest ? '‚úÖ' : '‚ùå'}`);
    
    if (hasYardPosition && !hasActiveServiceRequest) {
      console.log('   üîç Container SA011 c√≥ v·ªã tr√≠ trong yard nh∆∞ng kh√¥ng c√≥ ServiceRequest active');
      console.log('   üí° L√Ω do: Logic ManagerCont ch·ªâ l·∫•y container c√≥ ServiceRequest ho·∫∑c container trong yard');
      console.log('   üí° Gi·∫£i ph√°p: Container s·∫Ω hi·ªÉn th·ªã qua logic EMPTY_IN_YARD (n·∫øu c√≥ v·ªã tr√≠)');
    } else if (!hasYardPosition) {
      console.log('   ‚ùå Container SA011 kh√¥ng c√≥ v·ªã tr√≠ trong yard');
    } else {
      console.log('   ‚úÖ Container SA011 c√≥ c·∫£ v·ªã tr√≠ v√† ServiceRequest - s·∫Ω hi·ªÉn th·ªã b√¨nh th∆∞·ªùng');
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugSA011Container();
