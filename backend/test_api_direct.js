const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAPIDirect() {
  console.log('üß™ Test API Direct - Ki·ªÉm tra API endpoint tr·ª±c ti·∫øp\n');

  try {
    // 1. T√¨m ServiceRequest c·ªßa IM1235
    const serviceRequest = await prisma.serviceRequest.findFirst({
      where: { 
        container_no: 'IM1235',
        type: 'IMPORT'
      },
      orderBy: { createdAt: 'desc' }
    });

    if (!serviceRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest cho IM1235');
      return;
    }

    console.log(`‚úÖ T√¨m th·∫•y ServiceRequest: ${serviceRequest.id}`);

    // 2. Test logic getAllFiles() gi·ªëng nh∆∞ trong FileUploadService
    console.log('\n2. Test logic getAllFiles() gi·ªëng FileUploadService:');
    
    const files = await prisma.requestAttachment.findMany({
      where: {
        request_id: serviceRequest.id
        // Kh√¥ng filter deleted_at ƒë·ªÉ l·∫•y t·∫•t c·∫£ files
      },
      orderBy: {
        uploaded_at: 'desc'
      }
    });

    const result = {
      success: true,
      data: files
    };

    console.log('Result structure:', JSON.stringify({
      success: result.success,
      dataCount: result.data.length,
      data: result.data.map(f => ({ 
        file_name: f.file_name, 
        deleted_at: f.deleted_at 
      }))
    }, null, 2));

    // 3. So s√°nh v·ªõi logic c≈©
    console.log('\n3. So s√°nh v·ªõi logic c≈©:');
    const oldFiles = await prisma.requestAttachment.findMany({
      where: {
        request_id: serviceRequest.id,
        deleted_at: null
      },
      orderBy: {
        uploaded_at: 'desc'
      }
    });

    console.log(`Logic m·ªõi (t·∫•t c·∫£): ${files.length} files`);
    console.log(`Logic c≈© (active): ${oldFiles.length} files`);

    // 4. K·∫øt lu·∫≠n
    console.log('\n4. K·∫øt lu·∫≠n:');
    if (files.length === 2) {
      console.log('‚úÖ API endpoint s·∫Ω tr·∫£ v·ªÅ ƒë√∫ng 2 attachments');
      console.log('‚úÖ Frontend s·∫Ω hi·ªÉn th·ªã ƒë√∫ng 2 ch·ª©ng t·ª´');
    } else {
      console.log(`‚ö†Ô∏è API endpoint s·∫Ω tr·∫£ v·ªÅ ${files.length} attachments`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAPIDirect();
