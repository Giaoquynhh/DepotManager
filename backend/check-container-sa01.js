/**
 * Script ki·ªÉm tra container SA01
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkContainerSA01() {
  try {
    console.log('üîç Ki·ªÉm tra container SA01...\n');

    const containerNo = 'SA01';

    // 1. Ki·ªÉm tra trong YardPlacement
    console.log('üìç 1. Ki·ªÉm tra v·ªã tr√≠ trong yard:');
    const yardPlacement = await prisma.yardPlacement.findFirst({
      where: {
        container_no: containerNo,
        status: 'OCCUPIED',
        removed_at: null
      },
      include: {
        slot: {
          include: {
            block: {
              include: {
                yard: true
              }
            }
          }
        }
      }
    });

    if (yardPlacement) {
      console.log('‚úÖ Container SA01 ƒëang trong yard:');
      console.log({
        container_no: yardPlacement.container_no,
        yard: yardPlacement.slot?.block?.yard?.name,
        block: yardPlacement.slot?.block?.code,
        slot: yardPlacement.slot?.code,
        tier: yardPlacement.tier,
        placed_at: yardPlacement.placed_at,
        status: yardPlacement.status
      });
    } else {
      console.log('‚ùå Container SA01 kh√¥ng c√≥ trong yard ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i OCCUPIED');
    }

    // 2. Ki·ªÉm tra trong Container table
    console.log('\nüì¶ 2. Ki·ªÉm tra trong Container table:');
    const container = await prisma.container.findUnique({
      where: { container_no: containerNo },
      include: {
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        },
        customer: {
          select: { id: true, name: true, code: true }
        }
      }
    });

    if (container) {
      console.log('‚úÖ Container SA01 c√≥ trong Container table:');
      console.log({
        container_no: container.container_no,
        shipping_line_id: container.shipping_line_id,
        shipping_line: container.shipping_line,
        container_type_id: container.container_type_id,
        container_type: container.container_type,
        customer_id: container.customer_id,
        customer: container.customer,
        seal_number: container.seal_number,
        dem_det: container.dem_det
      });
    } else {
      console.log('‚ùå Container SA01 kh√¥ng c√≥ trong Container table');
    }

    // 3. Ki·ªÉm tra ServiceRequest
    console.log('\nüìã 3. Ki·ªÉm tra ServiceRequest:');
    const serviceRequests = await prisma.serviceRequest.findMany({
      where: { container_no: containerNo },
      orderBy: { createdAt: 'desc' },
      include: {
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        },
        customer: {
          select: { id: true, name: true, code: true }
        }
      }
    });

    if (serviceRequests.length > 0) {
      console.log(`‚úÖ T√¨m th·∫•y ${serviceRequests.length} ServiceRequest cho SA01:`);
      serviceRequests.forEach((sr, index) => {
        console.log(`\n   Request ${index + 1}:`);
        console.log({
          id: sr.id,
          type: sr.type,
          status: sr.status,
          shipping_line_id: sr.shipping_line_id,
          shipping_line: sr.shipping_line,
          container_type: sr.container_type,
          customer: sr.customer,
          created_at: sr.createdAt,
          updated_at: sr.updatedAt
        });
      });
    } else {
      console.log('‚ùå Kh√¥ng c√≥ ServiceRequest n√†o cho container SA01');
    }

    // 4. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng
    console.log('\nüèóÔ∏è 4. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng:');
    
    let canLift = false;
    let reason = '';

    if (yardPlacement) {
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 1: EMPTY_IN_YARD (SystemAdmin th√™m)
      if (!serviceRequests.length && container && container.shipping_line_id) {
        canLift = true;
        reason = 'EMPTY_IN_YARD - Container ƒë∆∞·ª£c SystemAdmin th√™m';
      }
      
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 2: GATE_OUT v·ªõi type IMPORT
      const latestSR = serviceRequests[0];
      if (latestSR && latestSR.status === 'GATE_OUT' && latestSR.type === 'IMPORT') {
        canLift = true;
        reason = 'GATE_OUT (IMPORT) - Container ƒë√£ ho√†n th√†nh quy tr√¨nh import';
      }
    }

    if (canLift) {
      console.log(`‚úÖ Container SA01 C√ì TH·ªÇ N√ÇNG: ${reason}`);
    } else {
      console.log('‚ùå Container SA01 KH√îNG TH·ªÇ N√ÇNG');
      if (!yardPlacement) {
        console.log('   - L√Ω do: Container kh√¥ng c√≥ trong yard');
      } else if (serviceRequests.length === 0 && (!container || !container.shipping_line_id)) {
        console.log('   - L√Ω do: Container kh√¥ng c√≥ shipping_line_id trong Container table');
      } else if (serviceRequests.length > 0) {
        const latestSR = serviceRequests[0];
        console.log(`   - L√Ω do: ServiceRequest c√≥ status "${latestSR.status}" v√† type "${latestSR.type}" (c·∫ßn GATE_OUT + IMPORT)`);
      }
    }

    // 5. Test API m·ªõi v·ªõi shipping line c·ªßa container
    if (container && container.shipping_line_id) {
      console.log('\nüß™ 5. Test API m·ªõi:');
      console.log(`Shipping line ID: ${container.shipping_line_id}`);
      console.log('ƒê·ªÉ test API, g·ªçi:');
      console.log(`GET /containers/yard/by-shipping-line/${container.shipping_line_id}?q=SA01`);
    }

    console.log('\nüéâ Ki·ªÉm tra ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y ki·ªÉm tra
if (require.main === module) {
  checkContainerSA01();
}

module.exports = { checkContainerSA01 };
