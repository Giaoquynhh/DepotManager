const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixContainerStatus(containerNo) {
  try {
    console.log(`üîß ƒêang s·ª≠a tr·∫°ng th√°i container: ${containerNo}`);
    console.log('=' .repeat(60));

    // 1. Ki·ªÉm tra ServiceRequest hi·ªán t·∫°i
    const currentRequest = await prisma.serviceRequest.findFirst({
      where: { container_no: containerNo },
      orderBy: { createdAt: 'desc' }
    });

    if (!currentRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest cho container n√†y');
      return;
    }

    console.log(`üìã Tr·∫°ng th√°i hi·ªán t·∫°i: ${currentRequest.status}`);
    console.log(`üìã Lo·∫°i d·ªãch v·ª•: ${currentRequest.type}`);

    // 2. Ki·ªÉm tra v·ªã tr√≠ trong YardSlot
    const yardSlot = await prisma.yardSlot.findFirst({
      where: { occupant_container_no: containerNo },
      include: { 
        block: { 
          include: { 
            yard: true 
          } 
        } 
      }
    });

    if (!yardSlot) {
      console.log('‚ùå Container kh√¥ng c√≥ v·ªã tr√≠ trong YardSlot');
      return;
    }

    console.log(`üìç V·ªã tr√≠ hi·ªán t·∫°i: ${yardSlot.block?.yard?.name || 'N/A'} - ${yardSlot.block?.code || 'N/A'} - ${yardSlot.code || 'N/A'}`);

    // 3. N·∫øu container c√≥ v·ªã tr√≠ trong yard nh∆∞ng status l√† GATE_OUT, c·∫ßn chuy·ªÉn v·ªÅ IN_YARD
    if (currentRequest.status === 'GATE_OUT' && yardSlot) {
      console.log('\nüîÑ Container ƒë√£ ƒë∆∞·ª£c h·∫° xu·ªëng b√£i nh∆∞ng tr·∫°ng th√°i v·∫´n l√† GATE_OUT');
      console.log('   ‚Üí C·∫ßn chuy·ªÉn tr·∫°ng th√°i v·ªÅ IN_YARD');

      const currentTime = new Date();
      
      // C·∫≠p nh·∫≠t ServiceRequest
      const updatedRequest = await prisma.serviceRequest.update({
        where: { id: currentRequest.id },
        data: {
          status: 'IN_YARD',
          history: {
            ...(currentRequest.history || {}),
            container_placed: {
              previous_status: currentRequest.status,
              placed_at: currentTime.toISOString(),
              placed_by: 'SYSTEM_FIX',
              yard: yardSlot.block?.yard?.name || 'N/A',
              block: yardSlot.block?.code || 'N/A',
              slot: yardSlot.code || 'N/A',
              reason: 'Container ƒë√£ ƒë∆∞·ª£c h·∫° xu·ªëng b√£i, c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ GATE_OUT v·ªÅ IN_YARD'
            }
          }
        }
      });

      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t ServiceRequest:');
      console.log(`   - Tr·∫°ng th√°i m·ªõi: ${updatedRequest.status}`);
      console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${updatedRequest.updatedAt}`);

      // 4. C·∫≠p nh·∫≠t YardSlot ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫°ng th√°i ƒë√∫ng
      const updatedSlot = await prisma.yardSlot.update({
        where: { id: yardSlot.id },
        data: {
          status: 'OCCUPIED',
          occupant_container_no: containerNo
        }
      });

      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t YardSlot:');
      console.log(`   - Tr·∫°ng th√°i slot: ${updatedSlot.status}`);
      console.log(`   - Container: ${updatedSlot.occupant_container_no}`);

      console.log('\nüéâ HO√ÄN TH√ÄNH: Container ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v·ªÅ tr·∫°ng th√°i IN_YARD');
      
    } else if (currentRequest.status === 'IN_YARD') {
      console.log('‚úÖ Container ƒë√£ ·ªü tr·∫°ng th√°i IN_YARD, kh√¥ng c·∫ßn s·ª≠a');
    } else {
      console.log(`‚ÑπÔ∏è  Container c√≥ tr·∫°ng th√°i ${currentRequest.status}, kh√¥ng c·∫ßn s·ª≠a`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a tr·∫°ng th√°i container:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// S·ª≠a tr·∫°ng th√°i container VF4444
fixContainerStatus('VF4444');
