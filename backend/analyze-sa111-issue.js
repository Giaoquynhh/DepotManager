const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeSA111Issue() {
  try {
    console.log('üîç Ph√¢n t√≠ch v·∫•n ƒë·ªÅ Container SA111 - EXPORT nh∆∞ng c√≥ EMPTY_IN_YARD');
    console.log('=' .repeat(80));

    // 1. Ki·ªÉm tra ServiceRequest
    const serviceRequest = await prisma.serviceRequest.findFirst({
      where: { container_no: 'SA111' },
      orderBy: { createdAt: 'desc' }
    });

    console.log('üìã ServiceRequest:');
    if (serviceRequest) {
      console.log(`   - ID: ${serviceRequest.id}`);
      console.log(`   - Lo·∫°i: ${serviceRequest.type}`);
      console.log(`   - Tr·∫°ng th√°i: ${serviceRequest.status}`);
      console.log(`   - Container: ${serviceRequest.container_no}`);
      console.log(`   - Ng√†y t·∫°o: ${serviceRequest.createdAt}`);
      console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${serviceRequest.updatedAt}`);
    }

    // 2. Ki·ªÉm tra Container model
    const container = await prisma.container.findUnique({
      where: { container_no: 'SA111' }
    });

    console.log('\nüì¶ Container model:');
    if (container) {
      console.log(`   - ID: ${container.id}`);
      console.log(`   - Tr·∫°ng th√°i: ${container.status}`);
      console.log(`   - Container: ${container.container_no}`);
      console.log(`   - Ng√†y t·∫°o: ${container.createdAt}`);
      console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${container.updatedAt}`);
    }

    // 3. Ki·ªÉm tra YardSlot
    const yardSlot = await prisma.yardSlot.findFirst({
      where: { occupant_container_no: 'SA111' },
      include: { 
        block: { 
          include: { 
            yard: true 
          } 
        } 
      }
    });

    console.log('\nüìç YardSlot:');
    if (yardSlot) {
      console.log(`   - Slot ID: ${yardSlot.id}`);
      console.log(`   - Yard: ${yardSlot.block?.yard?.name || 'N/A'}`);
      console.log(`   - Block: ${yardSlot.block?.code || 'N/A'}`);
      console.log(`   - Slot: ${yardSlot.code || 'N/A'}`);
      console.log(`   - Tr·∫°ng th√°i: ${yardSlot.status}`);
      console.log(`   - Container: ${yardSlot.occupant_container_no}`);
    }

    // 4. Ki·ªÉm tra YardPlacement
    const yardPlacements = await prisma.yardPlacement.findMany({
      where: { container_no: 'SA111' },
      orderBy: { updatedAt: 'desc' }
    });

    console.log('\nüì¶ YardPlacement:');
    if (yardPlacements.length > 0) {
      yardPlacements.forEach((placement, index) => {
        console.log(`   Placement ${index + 1}:`);
        console.log(`   - ID: ${placement.id}`);
        console.log(`   - Tr·∫°ng th√°i: ${placement.status}`);
        console.log(`   - Container: ${placement.container_no}`);
        console.log(`   - Ng√†y ƒë·∫∑t: ${placement.placed_at || 'N/A'}`);
        console.log(`   - Ng√†y x√≥a: ${placement.removed_at || 'N/A'}`);
      });
    } else {
      console.log('   ‚ùå Kh√¥ng c√≥ YardPlacement');
    }

    // 5. Ph√¢n t√≠ch v·∫•n ƒë·ªÅ
    console.log('\nüö® PH√ÇN T√çCH V·∫§N ƒê·ªÄ:');
    
    if (serviceRequest && container) {
      console.log(`   ServiceRequest: ${serviceRequest.type} - ${serviceRequest.status}`);
      console.log(`   Container: ${container.status}`);
      
      if (serviceRequest.type === 'EXPORT' && serviceRequest.status === 'GATE_OUT') {
        console.log('   ‚úÖ ServiceRequest ƒë√∫ng: EXPORT ƒë√£ ra kh·ªèi b√£i (GATE_OUT)');
      }
      
      if (container.status === 'EMPTY_IN_YARD') {
        console.log('   ‚ùå Container model SAI: EXPORT ƒë√£ ra kh·ªèi b√£i kh√¥ng n√™n c√≥ EMPTY_IN_YARD');
        console.log('   üí° Container model n√†y c√≥ th·ªÉ l√† d·ªØ li·ªáu c≈© ho·∫∑c l·ªói logic');
      }
      
      if (yardSlot && yardSlot.status === 'EMPTY') {
        console.log('   ‚úÖ YardSlot ƒë√∫ng: Slot ƒë√£ tr·ªëng (EMPTY)');
      }
    }

    console.log('\nüéØ K·∫æT LU·∫¨N:');
    console.log('   - SA111 l√† EXPORT ƒë√£ ra kh·ªèi b√£i (GATE_OUT)');
    console.log('   - Container model c√≥ EMPTY_IN_YARD l√† kh√¥ng h·ª£p l√Ω');
    console.log('   - C√≥ th·ªÉ c·∫ßn x√≥a ho·∫∑c c·∫≠p nh·∫≠t Container model n√†y');

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ph√¢n t√≠ch v·∫•n ƒë·ªÅ SA111
analyzeSA111Issue();
