const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testLiftVsLowerLogic() {
  try {
    console.log('üß™ Test Logic N√ÇNG vs H·∫† Container');
    console.log('=' .repeat(60));

    // 1. Ki·ªÉm tra t·∫•t c·∫£ container c√≥ tr·∫°ng th√°i GATE_OUT
    const allGateOutRequests = await prisma.serviceRequest.findMany({
      where: { 
        status: 'GATE_OUT',
        container_no: { not: null }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìã T√¨m th·∫•y ${allGateOutRequests.length} container c√≥ tr·∫°ng th√°i GATE_OUT:`);
    
    let importCount = 0;
    let exportCount = 0;
    let importWithSlot = 0;
    let exportWithSlot = 0;

    for (const request of allGateOutRequests) {
      const containerNo = request.container_no;
      const type = request.type;
      
      // Ki·ªÉm tra c√≥ v·ªã tr√≠ trong YardSlot kh√¥ng
      const yardSlot = await prisma.yardSlot.findFirst({
        where: { occupant_container_no: containerNo },
        include: { 
          block: { 
            include: { 
              yard: true 
            } 
          } 
        }
      });

      const hasSlot = !!yardSlot;
      const slotInfo = hasSlot ? `${yardSlot.block?.yard?.name || 'N/A'} - ${yardSlot.block?.code || 'N/A'} - ${yardSlot.code || 'N/A'}` : 'Kh√¥ng c√≥ v·ªã tr√≠';

      console.log(`\nüì¶ Container ${containerNo}:`);
      console.log(`   - Lo·∫°i: ${type} (${type === 'IMPORT' ? 'H·∫†' : 'N√ÇNG'})`);
      console.log(`   - Tr·∫°ng th√°i: ${request.status}`);
      console.log(`   - V·ªã tr√≠: ${slotInfo}`);
      
      if (type === 'IMPORT') {
        importCount++;
        if (hasSlot) importWithSlot++;
        console.log(`   - Logic: ${hasSlot ? '‚úÖ C·∫ßn s·ª≠a (H·∫† xu·ªëng b√£i)' : '‚è≠Ô∏è B·ªè qua (ƒë√£ ra kh·ªèi b√£i)'}`);
      } else {
        exportCount++;
        if (hasSlot) exportWithSlot++;
        console.log(`   - Logic: ${hasSlot ? '‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ (N√ÇNG nh∆∞ng v·∫´n c√≥ v·ªã tr√≠)' : '‚úÖ ƒê√∫ng (N√ÇNG ra kh·ªèi b√£i)'}`);
      }
    }

    console.log('\n' + '=' .repeat(60));
    console.log('üìä T√ìM T·∫ÆT LOGIC:');
    console.log(`\nüîÑ IMPORT (H·∫†) - ${importCount} container:`);
    console.log(`   - C√≥ v·ªã tr√≠: ${importWithSlot} ‚Üí C·∫ßn chuy·ªÉn GATE_OUT ‚Üí IN_YARD`);
    console.log(`   - Kh√¥ng c√≥ v·ªã tr√≠: ${importCount - importWithSlot} ‚Üí ƒê√£ ra kh·ªèi b√£i, b·ªè qua`);
    
    console.log(`\nüì§ EXPORT (N√ÇNG) - ${exportCount} container:`);
    console.log(`   - C√≥ v·ªã tr√≠: ${exportWithSlot} ‚Üí C√≥ v·∫•n ƒë·ªÅ! (N√ÇNG nh∆∞ng v·∫´n c√≥ v·ªã tr√≠)`);
    console.log(`   - Kh√¥ng c√≥ v·ªã tr√≠: ${exportCount - exportWithSlot} ‚Üí ƒê√∫ng (N√ÇNG ra kh·ªèi b√£i)`);

    console.log('\nüéØ LOGIC M·ªöI:');
    console.log('‚úÖ IMPORT (H·∫†) + GATE_OUT + c√≥ v·ªã tr√≠ ‚Üí T·ª± ƒë·ªông chuy·ªÉn IN_YARD');
    console.log('‚úÖ EXPORT (N√ÇNG) + GATE_OUT + kh√¥ng v·ªã tr√≠ ‚Üí ƒê√∫ng (ra kh·ªèi b√£i)');
    console.log('‚ö†Ô∏è EXPORT (N√ÇNG) + GATE_OUT + c√≥ v·ªã tr√≠ ‚Üí C√≥ v·∫•n ƒë·ªÅ (c·∫ßn ki·ªÉm tra)');

    if (exportWithSlot > 0) {
      console.log('\nüö® C·∫¢NH B√ÅO: C√≥ EXPORT container v·∫´n c√≥ v·ªã tr√≠ trong YardSlot!');
      console.log('   ƒêi·ªÅu n√†y c√≥ th·ªÉ l√† l·ªói trong logic N√ÇNG container.');
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi test logic:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testLiftVsLowerLogic();

