import { Request, Response } from 'express';
import { prisma } from '../../../shared/config/database';
import { AuthRequest } from '../../../shared/middlewares/auth';

class ContainerController {
  /**
   * L·∫•y th√¥ng tin container
   */
  async get(req: AuthRequest, res: Response) {
    try {
      const { container_no } = req.params;
      
      // ∆Øu ti√™n t√¨m trong ServiceRequest tr∆∞·ªõc (d·ªØ li·ªáu m·ªõi nh·∫•t)
      const latestRequest = await prisma.serviceRequest.findFirst({
        where: { container_no },
        orderBy: { createdAt: 'desc' },
        include: {
          customer: {
            select: { id: true, name: true, code: true }
          },
          shipping_line: {
            select: { id: true, name: true, code: true }
          },
          container_type: {
            select: { id: true, code: true, description: true }
          }
        }
      });

      if (latestRequest) {
        return res.json({
          success: true,
          data: {
            container_no,
            customer: latestRequest.customer,
            shipping_line: latestRequest.shipping_line,
            container_type: latestRequest.container_type,
            seal_number: latestRequest.seal_number,
            dem_det: latestRequest.dem_det
          }
        });
      }

      // Fallback: t√¨m trong Container model (cho EMPTY_IN_YARD)
      const container = await prisma.container.findUnique({
        where: { container_no },
        include: {
          customer: {
            select: { id: true, name: true, code: true }
          },
          shipping_line: {
            select: { id: true, name: true, code: true }
          },
          container_type: {
            select: { id: true, code: true, description: true }
          }
        }
      });

      if (container) {
        return res.json({
          success: true,
          data: {
            container_no,
            customer: container.customer,
            shipping_line: container.shipping_line,
            container_type: container.container_type,
            seal_number: container.seal_number,
            dem_det: container.dem_det,
            yard_name: container.yard_name,
            block_code: container.block_code,
            slot_code: container.slot_code
          }
        });
      }

      return res.status(404).json({ 
        success: false, 
        message: 'Kh√¥ng t√¨m th·∫•y container' 
      });

    } catch (error: any) {
      console.error('Error getting container:', error);
      return res.status(500).json({ 
        success: false, 
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin container' 
      });
    }
  }

  /**
   * L·∫•y danh s√°ch alerts
   */
  async alerts(req: AuthRequest, res: Response) {
    try {
      // TODO: Implement alerts logic
      return res.json({
        success: true,
        data: []
      });
    } catch (error: any) {
      console.error('Error getting alerts:', error);
      return res.status(500).json({ 
        success: false, 
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch alerts' 
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin container (alias cho updateContainerInfo)
   */
  async updateContainer(req: AuthRequest, res: Response) {
    return this.updateContainerInfo(req, res);
  }

  /**
   * L·∫•y containers trong yard theo shipping line cho lift request (Simple version)
   * Ch·ªâ l·∫•y containers c√≥ tr·∫°ng th√°i:
   * - EMPTY_IN_YARD (ƒë∆∞·ª£c SystemAdmin th√™m)
   * - GATE_OUT v·ªõi type IMPORT
   */
  async getContainersInYardByShippingLine(req: AuthRequest, res: Response, shipping_line_id: string, searchQuery?: string) {
    try {
      console.log('Debug - shipping_line_id:', shipping_line_id);
      console.log('Debug - searchQuery:', searchQuery);

      // B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ containers trong yard
      const yardContainers = await prisma.yardPlacement.findMany({
        where: {
          status: 'OCCUPIED',
          removed_at: null,
          container_no: { not: null },
          ...(searchQuery && searchQuery.trim() && {
            container_no: {
              contains: searchQuery.trim(),
              mode: 'insensitive'
            }
          })
        },
        include: {
          slot: {
            include: {
              block: {
                include: {
                  yard: true
                }
              }
            }
          }
        },
        take: 100
      });

      console.log(`Debug - Found ${yardContainers.length} containers in yard`);

      const result = [];

      // B∆∞·ªõc 2: Ki·ªÉm tra t·ª´ng container
      for (const yardContainer of yardContainers) {
        const container_no = yardContainer.container_no;
        if (!container_no) continue;

        // T√¨m ServiceRequest m·ªõi nh·∫•t cho container n√†y (ch·ªâ l·∫•y request ch∆∞a b·ªã x√≥a)
        const latestServiceRequest = await prisma.serviceRequest.findFirst({
          where: { 
            container_no,
            shipping_line_id,
            depot_deleted_at: null // Ch·ªâ l·∫•y request ch∆∞a b·ªã soft-delete
          },
          orderBy: { createdAt: 'desc' },
          include: {
            shipping_line: {
              select: { id: true, name: true, code: true }
            },
            container_type: {
              select: { id: true, code: true, description: true }
            },
            customer: {
              select: { id: true, name: true, code: true }
            }
          }
        });

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 2: IN_YARD ho·∫∑c GATE_OUT v·ªõi type IMPORT v√† quality GOOD
        if (latestServiceRequest && 
            latestServiceRequest.type === 'IMPORT' &&
            (latestServiceRequest.status === 'IN_YARD' || latestServiceRequest.status === 'GATE_OUT')) {
          
          // üîÑ S·ª¨A LOGIC: Ki·ªÉm tra container_quality t·ª´ b·∫£ng Container thay v√¨ RepairTicket status
          // ∆Øu ti√™n container_quality t·ª´ database (ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ ManagerCont)
          const containerRecord = await prisma.$queryRaw<Array<{container_quality: string | null}>>`
            SELECT container_quality FROM "Container" WHERE container_no = ${container_no}
          `;

          // N·∫øu kh√¥ng c√≥ container_quality, fallback v·ªÅ RepairTicket status
          let isGoodQuality = false;
          if (containerRecord.length > 0 && containerRecord[0].container_quality) {
            isGoodQuality = containerRecord[0].container_quality === 'GOOD';
            console.log(`üîç [Container Suggestion] Container ${container_no} - container_quality: ${containerRecord[0].container_quality} ‚Üí isGoodQuality: ${isGoodQuality}`);
          } else {
            // Fallback: Ki·ªÉm tra RepairTicket status
            const repairTicket = await prisma.repairTicket.findFirst({
              where: { 
                container_no,
                status: 'COMPLETE'
              },
              orderBy: { updatedAt: 'desc' }
            });
            isGoodQuality = !!repairTicket;
            console.log(`üîç [Container Suggestion] Container ${container_no} - fallback RepairTicket status: ${repairTicket?.status || 'NONE'} ‚Üí isGoodQuality: ${isGoodQuality}`);
          }

          // Ch·ªâ th√™m v√†o k·∫øt qu·∫£ n·∫øu container c√≥ quality GOOD
          if (isGoodQuality) {
            result.push({
              container_no,
              slot_code: yardContainer.slot?.code || '',
              block_code: yardContainer.slot?.block?.code || '',
              yard_name: yardContainer.slot?.block?.yard?.name || '',
              tier: yardContainer.tier,
              placed_at: yardContainer.placed_at,
              shipping_line: latestServiceRequest.shipping_line,
              container_type: latestServiceRequest.container_type,
              customer: latestServiceRequest.customer,
              seal_number: latestServiceRequest.seal_number,
              dem_det: latestServiceRequest.dem_det,
              service_status: latestServiceRequest.status,
              request_type: 'IMPORT',
              container_quality: 'GOOD' // Th√™m th√¥ng tin quality
            });
          }
          continue;
        }

        // üîÑ B·ªî SUNG LOGIC: X·ª≠ l√Ω container c√≥ ServiceRequest b·ªã REJECTED (y√™u c·∫ßu n√¢ng b·ªã h·ªßy)
        if (latestServiceRequest && 
            latestServiceRequest.type === 'EXPORT' &&
            latestServiceRequest.status === 'REJECTED') {
          
          console.log(`üîÑ [Container Suggestion] Container ${container_no} c√≥ y√™u c·∫ßu n√¢ng b·ªã h·ªßy, ki·ªÉm tra kh·∫£ nƒÉng n√¢ng l·∫°i`);
          
          // T√¨m ServiceRequest IMPORT g·∫ßn nh·∫•t ƒë·ªÉ l·∫•y th√¥ng tin container
          const importRequest = await prisma.serviceRequest.findFirst({
            where: { 
              container_no,
              type: 'IMPORT',
              status: { in: ['IN_YARD', 'GATE_OUT'] },
              depot_deleted_at: null
            },
            orderBy: { createdAt: 'desc' },
            include: {
              shipping_line: {
                select: { id: true, name: true, code: true }
              },
              container_type: {
                select: { id: true, code: true, description: true }
              },
              customer: {
                select: { id: true, name: true, code: true }
              }
            }
          });

          if (importRequest) {
            // üîÑ S·ª¨A LOGIC: Ki·ªÉm tra container_quality t·ª´ b·∫£ng Container thay v√¨ RepairTicket status
            const containerRecord = await prisma.$queryRaw<Array<{container_quality: string | null}>>`
              SELECT container_quality FROM "Container" WHERE container_no = ${container_no}
            `;

            // N·∫øu kh√¥ng c√≥ container_quality, fallback v·ªÅ RepairTicket status
            let isGoodQuality = false;
            if (containerRecord.length > 0 && containerRecord[0].container_quality) {
              isGoodQuality = containerRecord[0].container_quality === 'GOOD';
              console.log(`üîç [Container Suggestion] Container ${container_no} (EXPORT REJECTED) - container_quality: ${containerRecord[0].container_quality} ‚Üí isGoodQuality: ${isGoodQuality}`);
            } else {
              // Fallback: Ki·ªÉm tra RepairTicket status
              const repairTicket = await prisma.repairTicket.findFirst({
                where: { 
                  container_no,
                  status: 'COMPLETE'
                },
                orderBy: { updatedAt: 'desc' }
              });
              isGoodQuality = !!repairTicket;
              console.log(`üîç [Container Suggestion] Container ${container_no} (EXPORT REJECTED) - fallback RepairTicket status: ${repairTicket?.status || 'NONE'} ‚Üí isGoodQuality: ${isGoodQuality}`);
            }

            // Ch·ªâ th√™m v√†o k·∫øt qu·∫£ n·∫øu container c√≥ quality GOOD
            if (isGoodQuality) {
              console.log(`‚úÖ [Container Suggestion] Container ${container_no} s·∫µn s√†ng ƒë·ªÉ n√¢ng l·∫°i sau khi h·ªßy y√™u c·∫ßu`);
              result.push({
                container_no,
                slot_code: yardContainer.slot?.code || '',
                block_code: yardContainer.slot?.block?.code || '',
                yard_name: yardContainer.slot?.block?.yard?.name || '',
                tier: yardContainer.tier,
                placed_at: yardContainer.placed_at,
                shipping_line: importRequest.shipping_line,
                container_type: importRequest.container_type,
                customer: importRequest.customer,
                seal_number: importRequest.seal_number,
                dem_det: importRequest.dem_det,
                service_status: importRequest.status,
                request_type: 'IMPORT',
                container_quality: 'GOOD',
                note: 'C√≥ th·ªÉ n√¢ng l·∫°i sau khi h·ªßy y√™u c·∫ßu tr∆∞·ªõc ƒë√≥' // Th√™m ghi ch√∫
              });
            } else {
              console.log(`‚ö†Ô∏è [Container Suggestion] Container ${container_no} kh√¥ng c√≥ RepairTicket COMPLETE, kh√¥ng th·ªÉ n√¢ng l·∫°i`);
            }
          } else {
            console.log(`‚ö†Ô∏è [Container Suggestion] Container ${container_no} kh√¥ng t√¨m th·∫•y ServiceRequest IMPORT h·ª£p l·ªá`);
          }
          continue;
        }

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 1: EMPTY_IN_YARD (SystemAdmin th√™m) ho·∫∑c container ƒë√£ t·ª´ng c√≥ request nh∆∞ng request ƒë√£ b·ªã x√≥a
        if (!latestServiceRequest) {
          // T√¨m trong b·∫£ng Container
          const container = await prisma.container.findUnique({
            where: { container_no },
            include: {
              shipping_line: {
                select: { id: true, name: true, code: true }
              },
              container_type: {
                select: { id: true, code: true, description: true }
              },
              customer: {
                select: { id: true, name: true, code: true }
              }
            }
          });

          console.log(`üîç [Container Suggestion] Container ${container_no} - Container record:`, {
            exists: !!container,
            shipping_line_id: container?.shipping_line_id,
            requested_shipping_line_id: shipping_line_id,
            matches: container?.shipping_line_id === shipping_line_id
          });

          // üîÑ B·ªî SUNG LOGIC: X·ª≠ l√Ω container kh√¥ng c√≥ shipping_line_id ho·∫∑c c√≥ shipping_line_id kh√°c
          if (container) {
            // Ki·ªÉm tra xem container c√≥ t·ª´ng c√≥ request kh√¥ng (k·ªÉ c·∫£ request ƒë√£ b·ªã x√≥a)
            const hasAnyRequest = await prisma.serviceRequest.findFirst({
              where: { 
                container_no,
                shipping_line_id 
              }
            });

            // üîÑ LOGIC M·ªöI: N·∫øu container kh√¥ng c√≥ shipping_line_id ho·∫∑c c√≥ shipping_line_id kh√°c,
            // nh∆∞ng c√≥ ServiceRequest v·ªõi shipping line ƒë√£ ch·ªçn, v·∫´n hi·ªÉn th·ªã
            if (container.shipping_line_id === shipping_line_id || !container.shipping_line_id) {
              // üîÑ B·ªî SUNG: Ki·ªÉm tra container_quality cho EMPTY_IN_YARD
              const containerQualityRecord = await prisma.$queryRaw<Array<{container_quality: string | null}>>`
                SELECT container_quality FROM "Container" WHERE container_no = ${container_no}
              `;
              
              let isGoodQuality = false;
              if (containerQualityRecord.length > 0 && containerQualityRecord[0].container_quality) {
                isGoodQuality = containerQualityRecord[0].container_quality === 'GOOD';
                console.log(`üîç [Container Suggestion] Container ${container_no} (EMPTY_IN_YARD) - container_quality: ${containerQualityRecord[0].container_quality} ‚Üí isGoodQuality: ${isGoodQuality}`);
              } else {
                // Fallback: M·∫∑c ƒë·ªãnh GOOD cho EMPTY_IN_YARD
                isGoodQuality = true;
                console.log(`üîç [Container Suggestion] Container ${container_no} (EMPTY_IN_YARD) - kh√¥ng c√≥ container_quality, m·∫∑c ƒë·ªãnh GOOD`);
              }

              if (isGoodQuality) {
                console.log(`‚úÖ [Container Suggestion] Container ${container_no} s·∫µn s√†ng ƒë·ªÉ n√¢ng (EMPTY_IN_YARD ho·∫∑c kh√¥ng c√≥ shipping_line_id)`);
                result.push({
                container_no,
                slot_code: yardContainer.slot?.code || '',
                block_code: yardContainer.slot?.block?.code || '',
                yard_name: yardContainer.slot?.block?.yard?.name || '',
                tier: yardContainer.tier,
                placed_at: yardContainer.placed_at,
                shipping_line: container.shipping_line,
                container_type: container.container_type,
                customer: container.customer,
                seal_number: container.seal_number,
                dem_det: container.dem_det,
                service_status: hasAnyRequest ? 'DELETED_REQUEST' : 'EMPTY_IN_YARD',
                request_type: hasAnyRequest ? 'DELETED_REQUEST' : 'SYSTEM_ADMIN_ADDED',
                note: !container.shipping_line_id ? 'Container kh√¥ng c√≥ shipping line, c√≥ th·ªÉ n√¢ng cho b·∫•t k·ª≥ h√£ng t√†u n√†o' : undefined
                });
              } else {
                console.log(`‚ö†Ô∏è [Container Suggestion] Container ${container_no} (EMPTY_IN_YARD) c√≥ container_quality kh√¥ng t·ªët, b·ªè qua`);
              }
            } else {
              console.log(`‚ö†Ô∏è [Container Suggestion] Container ${container_no} c√≥ shipping_line_id kh√°c (${container.shipping_line_id} vs ${shipping_line_id}), b·ªè qua`);
            }
          } else {
            console.log(`‚ö†Ô∏è [Container Suggestion] Container ${container_no} kh√¥ng t√¨m th·∫•y trong b·∫£ng Container`);
          }
        }
      }

      console.log(`Debug - Final result: ${result.length} containers`);

      return res.json({
        success: true,
        data: result,
        total: result.length
      });

    } catch (error) {
      console.error('Error getting containers in yard by shipping line:', error);
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
      return res.status(500).json({ 
        success: false, 
        message: 'L·ªói khi l·∫•y danh s√°ch container trong yard',
        error: process.env.NODE_ENV === 'development' ? error : undefined
      });
    }
  }

  /**
   * L·∫•y containers trong yard theo shipping line v√† container type cho edit modal
   * Ch·ªâ l·∫•y containers c√≥ tr·∫°ng th√°i:
   * - EMPTY_IN_YARD (ƒë∆∞·ª£c SystemAdmin th√™m)
   * - GATE_OUT v·ªõi type IMPORT
   * V√† l·ªçc th√™m theo container_type_id n·∫øu c√≥
   */
  async getContainersInYardByShippingLineAndType(req: AuthRequest, res: Response, shipping_line_id: string, container_type_id?: string, searchQuery?: string) {
    try {
      console.log('Debug - shipping_line_id:', shipping_line_id);
      console.log('Debug - container_type_id:', container_type_id);
      console.log('Debug - searchQuery:', searchQuery);

      // B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ containers trong yard
      const yardContainers = await prisma.yardPlacement.findMany({
        where: {
          status: 'OCCUPIED',
          removed_at: null,
          container_no: { not: null },
          ...(searchQuery && searchQuery.trim() && {
            container_no: {
              contains: searchQuery.trim(),
              mode: 'insensitive'
            }
          })
        },
        include: {
          slot: {
            include: {
              block: {
                include: {
                  yard: true
                }
              }
            }
          }
        },
        take: 100
      });

      console.log(`Debug - Found ${yardContainers.length} containers in yard`);

      const result = [];

      // B∆∞·ªõc 2: Ki·ªÉm tra t·ª´ng container
      for (const yardContainer of yardContainers) {
        const container_no = yardContainer.container_no;
        if (!container_no) continue;

        // T√¨m ServiceRequest m·ªõi nh·∫•t cho container n√†y (ch·ªâ l·∫•y request ch∆∞a b·ªã x√≥a)
        const latestServiceRequest = await prisma.serviceRequest.findFirst({
          where: { 
            container_no,
            shipping_line_id,
            depot_deleted_at: null // Ch·ªâ l·∫•y request ch∆∞a b·ªã soft-delete
          },
          orderBy: { createdAt: 'desc' },
          include: {
            shipping_line: {
              select: { id: true, name: true, code: true }
            },
            container_type: {
              select: { id: true, code: true, description: true }
            },
            customer: {
              select: { id: true, name: true, code: true }
            }
          }
        });

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 2: IN_YARD ho·∫∑c GATE_OUT v·ªõi type IMPORT v√† quality GOOD
        if (latestServiceRequest && 
            latestServiceRequest.type === 'IMPORT' &&
            (latestServiceRequest.status === 'IN_YARD' || latestServiceRequest.status === 'GATE_OUT')) {
          
          // L·ªçc theo container type n·∫øu c√≥
          if (container_type_id && latestServiceRequest.container_type_id !== container_type_id) {
            continue;
          }

          // Ki·ªÉm tra container quality - ph·∫£i c√≥ RepairTicket v·ªõi status COMPLETE (GOOD)
          const repairTicket = await prisma.repairTicket.findFirst({
            where: { 
              container_no,
              status: 'COMPLETE' // Container quality GOOD
            },
            orderBy: { updatedAt: 'desc' }
          });

          // Ch·ªâ th√™m v√†o k·∫øt qu·∫£ n·∫øu container c√≥ quality GOOD
          if (repairTicket) {
            result.push({
              container_no,
              slot_code: yardContainer.slot?.code || '',
              block_code: yardContainer.slot?.block?.code || '',
              yard_name: yardContainer.slot?.block?.yard?.name || '',
              tier: yardContainer.tier,
              placed_at: yardContainer.placed_at,
              shipping_line: latestServiceRequest.shipping_line,
              container_type: latestServiceRequest.container_type,
              customer: latestServiceRequest.customer,
              seal_number: latestServiceRequest.seal_number,
              dem_det: latestServiceRequest.dem_det,
              service_status: latestServiceRequest.status,
              request_type: 'IMPORT',
              container_quality: 'GOOD'
            });
          }
          continue;
        }

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 1: EMPTY_IN_YARD (SystemAdmin th√™m) ho·∫∑c container ƒë√£ t·ª´ng c√≥ request nh∆∞ng request ƒë√£ b·ªã x√≥a
        if (!latestServiceRequest) {
          // T√¨m trong b·∫£ng Container
          const container = await prisma.container.findUnique({
            where: { container_no },
            include: {
              shipping_line: {
                select: { id: true, name: true, code: true }
              },
              container_type: {
                select: { id: true, code: true, description: true }
              },
              customer: {
                select: { id: true, name: true, code: true }
              }
            }
          });

          if (container && container.shipping_line_id === shipping_line_id) {
            // L·ªçc theo container type n·∫øu c√≥
            if (container_type_id && container.container_type_id !== container_type_id) {
              continue;
            }

            // Ki·ªÉm tra xem container c√≥ t·ª´ng c√≥ request kh√¥ng (k·ªÉ c·∫£ request ƒë√£ b·ªã x√≥a)
            const hasAnyRequest = await prisma.serviceRequest.findFirst({
              where: { 
                container_no,
                shipping_line_id 
              }
            });

            result.push({
              container_no,
              slot_code: yardContainer.slot?.code || '',
              block_code: yardContainer.slot?.block?.code || '',
              yard_name: yardContainer.slot?.block?.yard?.name || '',
              tier: yardContainer.tier,
              placed_at: yardContainer.placed_at,
              shipping_line: container.shipping_line,
              container_type: container.container_type,
              customer: container.customer,
              seal_number: container.seal_number,
              dem_det: container.dem_det,
              service_status: hasAnyRequest ? 'DELETED_REQUEST' : 'EMPTY_IN_YARD',
              request_type: hasAnyRequest ? 'DELETED_REQUEST' : 'SYSTEM_ADMIN_ADDED'
            });
          }
        }
      }

      console.log(`Debug - Final result: ${result.length} containers`);

      return res.json({
        success: true,
        data: result,
        total: result.length
      });

    } catch (error) {
      console.error('Error getting containers in yard by shipping line and type:', error);
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
      return res.status(500).json({ 
        success: false, 
        message: 'L·ªói khi l·∫•y danh s√°ch container trong yard',
        error: process.env.NODE_ENV === 'development' ? error : undefined
      });
    }
  }

  /**
   * Ki·ªÉm tra container c√≥ t·ªìn t·∫°i trong b√£i hay kh√¥ng
   */
  async checkContainerExistsInYard(req: AuthRequest, res: Response) {
    try {
      const { container_no } = req.params;

      if (!container_no) {
        return res.status(400).json({
          success: false,
          message: 'Container number is required'
        });
      }

      // Ki·ªÉm tra container c√≥ trong yard placement kh√¥ng
      const yardPlacement = await prisma.yardPlacement.findFirst({
        where: {
          container_no,
          status: 'OCCUPIED',
          removed_at: null
        },
        include: {
          slot: {
            include: {
              block: {
                include: {
                  yard: true
                }
              }
            }
          }
        }
      });

      if (yardPlacement) {
        return res.json({
          success: true,
          data: {
            exists: true,
            container_no,
            slot_code: yardPlacement.slot?.code || '',
            block_code: yardPlacement.slot?.block?.code || '',
            yard_name: yardPlacement.slot?.block?.yard?.name || '',
            tier: yardPlacement.tier,
            placed_at: yardPlacement.placed_at
          },
          message: `Container ${container_no} c√≥ trong b√£i`
        });
      }

      return res.json({
        success: true,
        data: {
          exists: false,
          container_no
        },
        message: `Container ${container_no} kh√¥ng c√≥ trong b√£i`
      });

    } catch (error: any) {
      console.error('Error checking container in yard:', error);
      return res.status(500).json({
        success: false,
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra container trong b√£i'
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin container
   */
  async updateContainerInfo(req: AuthRequest, res: Response) {
    try {
      const { container_no } = req.params;
      const { customer_id, shipping_line_id, container_type_id, seal_number, dem_det, container_quality } = req.body;

      // T√¨m ServiceRequest m·ªõi nh·∫•t cho container n√†y
      const latestRequest = await prisma.serviceRequest.findFirst({
        where: { container_no },
        orderBy: { createdAt: 'desc' }
      });

      let updatedRequest = null;
      let customer = null;

      if (latestRequest) {
        // C·∫≠p nh·∫≠t th√¥ng tin ServiceRequest n·∫øu c√≥
        updatedRequest = await prisma.serviceRequest.update({
          where: { id: latestRequest.id },
          data: {
            ...(customer_id && { customer_id }),
            ...(shipping_line_id && { shipping_line_id }),
            ...(container_type_id && { container_type_id }),
            ...(seal_number !== undefined && { seal_number }),
            ...(dem_det !== undefined && { dem_det }),
            updatedAt: new Date()
          },
          include: {
            customer: {
              select: { id: true, name: true, code: true }
            },
            shipping_line: {
              select: { id: true, name: true, code: true }
            },
            container_type: {
              select: { id: true, code: true, description: true }
            }
          }
        });
        customer = updatedRequest.customer;
        
        // B·ªî SUNG: C·∫≠p nh·∫≠t t·∫•t c·∫£ ServiceRequest c·ªßa container n√†y ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
        if (customer_id || shipping_line_id || container_type_id || seal_number !== undefined || dem_det !== undefined) {
          await prisma.serviceRequest.updateMany({
            where: { container_no },
            data: {
              ...(customer_id && { customer_id }),
              ...(shipping_line_id && { shipping_line_id }),
              ...(container_type_id && { container_type_id }),
              ...(seal_number !== undefined && { seal_number }),
              ...(dem_det !== undefined && { dem_det }),
              updatedAt: new Date()
            }
          });
          console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t customer_id, shipping_line_id, container_type_id, seal_number v√† dem_det cho t·∫•t c·∫£ ServiceRequest c·ªßa container ${container_no}`);
        }
      } else {
        // Container kh√¥ng c√≥ ServiceRequest - ch·ªâ c·∫≠p nh·∫≠t Container model
        const containerData: any = {
          container_no,
          status: 'EMPTY_IN_YARD',
          created_by: req.user!._id,
          updatedAt: new Date()
        };

        if (customer_id) containerData.customer_id = customer_id;
        if (shipping_line_id) containerData.shipping_line_id = shipping_line_id;
        if (container_type_id) containerData.container_type_id = container_type_id;
        if (seal_number !== undefined) containerData.seal_number = seal_number;
        if (dem_det !== undefined) containerData.dem_det = dem_det;

        // Upsert Container record
        const container = await prisma.container.upsert({
          where: { container_no },
          update: containerData,
          create: {
            ...containerData,
            createdAt: new Date()
          },
          include: {
            customer: {
              select: { id: true, name: true, code: true }
            },
            shipping_line: {
              select: { id: true, name: true, code: true }
            },
            container_type: {
              select: { id: true, code: true, description: true }
            }
          }
        });

        customer = container.customer;
        updatedRequest = null; // Kh√¥ng c√≥ ServiceRequest ƒë·ªÉ c·∫≠p nh·∫≠t
      }

      // C·∫≠p nh·∫≠t container_quality
      if (container_quality) {
        // üîÑ LUU CONTAINER_QUALITY V√ÄO DATABASE
        // T√¨m ho·∫∑c t·∫°o Container record ƒë·ªÉ l∆∞u container_quality
        let containerRecord = await prisma.container.findFirst({
          where: { container_no }
        });

        if (!containerRecord) {
          // T·∫°o Container record m·ªõi n·∫øu ch∆∞a c√≥
          await prisma.$executeRaw`
            INSERT INTO "Container" (id, container_no, container_quality, created_by, "createdAt", "updatedAt")
            VALUES (gen_random_uuid(), ${container_no}, ${container_quality}, ${req.user!._id}, NOW(), NOW())
          `;
          console.log(`‚úÖ T·∫°o m·ªõi Container record cho ${container_no} v·ªõi quality: ${container_quality}`);
        } else {
          // C·∫≠p nh·∫≠t Container record hi·ªán c√≥
          await prisma.$executeRaw`
            UPDATE "Container" 
            SET container_quality = ${container_quality}, "updatedAt" = NOW()
            WHERE id = ${containerRecord.id}
          `;
          console.log(`‚úÖ C·∫≠p nh·∫≠t Container record cho ${container_no}: quality ‚Üí ${container_quality}`);
        }

        // T√¨m RepairTicket m·ªõi nh·∫•t c·ªßa container n√†y
        const latestRepairTicket = await prisma.repairTicket.findFirst({
          where: { container_no },
          orderBy: { createdAt: 'desc' }
        });

        if (latestRepairTicket) {
          // üîí B·∫¢O V·ªÜ: Ki·ªÉm tra ServiceRequest status tr∆∞·ªõc khi c·∫≠p nh·∫≠t RepairTicket
          const serviceRequest = await prisma.serviceRequest.findFirst({
            where: { 
              container_no,
              type: 'IMPORT'
            },
            orderBy: { createdAt: 'desc' }
          });

          // N·∫øu ServiceRequest ƒë√£ ·ªü tr·∫°ng th√°i IN_YARD ho·∫∑c GATE_OUT, KH√îNG c·∫≠p nh·∫≠t RepairTicket
          if (serviceRequest && (serviceRequest.status === 'IN_YARD' || serviceRequest.status === 'GATE_OUT')) {
            console.log(`üîí B·∫£o v·ªá RepairTicket cho container ${container_no}: ServiceRequest ƒë√£ ·ªü tr·∫°ng th√°i ${serviceRequest.status}, kh√¥ng c·∫≠p nh·∫≠t RepairTicket`);
            console.log(`‚ÑπÔ∏è Container quality ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${container_quality} nh∆∞ng RepairTicket gi·ªØ nguy√™n tr·∫°ng th√°i ${latestRepairTicket.status}`);
          } else {
            // Ch·ªâ c·∫≠p nh·∫≠t RepairTicket khi ServiceRequest ch∆∞a ·ªü tr·∫°ng th√°i cu·ªëi
            let repairStatus: 'COMPLETE' | 'COMPLETE_NEEDREPAIR' | 'PENDING' = 'PENDING';
            if (container_quality === 'GOOD') {
              repairStatus = 'COMPLETE';
            } else if (container_quality === 'NEED_REPAIR') {
              repairStatus = 'COMPLETE_NEEDREPAIR';
            }
            
            console.log(`üîÑ C·∫≠p nh·∫≠t RepairTicket cho container ${container_no}: ${latestRepairTicket.status} ‚Üí ${repairStatus}`);
            
            await prisma.repairTicket.update({
              where: { id: latestRepairTicket.id },
              data: { 
                status: repairStatus,
                updatedAt: new Date()
              }
            });
          }
        } else if (container_quality === 'NEED_REPAIR') {
          // T·∫°o RepairTicket m·ªõi n·∫øu ch∆∞a c√≥ v√† c·∫ßn s·ª≠a ch·ªØa
          const code = `RT-${new Date().toISOString().replace(/[-:TZ.]/g, '').slice(0, 14)}-${Math.floor(Math.random()*1000)}`;
          await prisma.repairTicket.create({
            data: {
              container_no,
              status: 'COMPLETE_NEEDREPAIR',
              problem_description: 'Container c·∫ßn s·ª≠a ch·ªØa - Manual creation',
              code,
              created_by: req.user!._id,
              createdAt: new Date(),
              updatedAt: new Date()
            }
          });
        } else if (container_quality === 'GOOD') {
          // N·∫øu container t·ªët v√† kh√¥ng c√≥ repair ticket, kh√¥ng c·∫ßn l√†m g√¨
          // Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o kh√¥ng c√≥ repair ticket n√†o ƒëang pending
        }
      }

      return res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t th√¥ng tin container th√†nh c√¥ng',
        data: {
          container_no,
          customer: customer,
          shipping_line: updatedRequest?.shipping_line || null,
          container_type: updatedRequest?.container_type || null,
          seal_number: updatedRequest?.seal_number || null,
          dem_det: updatedRequest?.dem_det || null
        }
      });

    } catch (error: any) {
      console.error('Error updating container info:', error);
      return res.status(500).json({ 
        success: false, 
        message: error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin container' 
      });
    }
  }
}

export default new ContainerController();