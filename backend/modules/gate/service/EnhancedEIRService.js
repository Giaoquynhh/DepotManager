const { PrismaClient } = require('@prisma/client');
const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

const prisma = new PrismaClient();

class EnhancedEIRService {
  
  /**
   * Generate EIR v·ªõi logic ho√†n ch·ªânh nh∆∞ script ƒë√£ t·∫°o
   */
  async generateCompleteEIR(requestId) {
    try {
      console.log('üìÑ EnhancedEIRService: Generating complete EIR for request:', requestId);

      // L·∫•y th√¥ng tin request v·ªõi c√°c th√¥ng tin li√™n quan
      const request = await prisma.serviceRequest.findUnique({
        where: { id: requestId },
        include: {
          customer: {
            select: { id: true, name: true, code: true, address: true, tax_code: true, phone: true }
          },
          shipping_line: {
            select: { id: true, name: true, code: true, template_eir: true }
          },
          container_type: {
            select: { id: true, code: true, description: true }
          }
        }
      });

      if (!request) {
        return {
          success: false,
          message: 'Request kh√¥ng t·ªìn t·∫°i'
        };
      }

      if (request.status !== 'GATE_OUT' && request.status !== 'IN_YARD' && request.status !== 'IN_CAR') {
        return {
          success: false,
          message: 'Ch·ªâ c√≥ th·ªÉ t·∫°o EIR cho container ·ªü tr·∫°ng th√°i GATE_OUT, IN_YARD ho·∫∑c IN_CAR'
        };
      }

      // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
      if (!request.is_paid) {
        return {
          success: false,
          message: 'Ch·ªâ c√≥ th·ªÉ t·∫°o EIR cho container ƒë√£ thanh to√°n'
        };
      }

      console.log('üìã Request details:', {
        container_no: request.container_no,
        customer: request.customer?.name,
        shipping_line: request.shipping_line?.name,
        status: request.status
      });

      // L·∫•y template EIR t·ª´ shipping line
      const templateEir = request.shipping_line?.template_eir;
      if (!templateEir) {
        return {
          success: false,
          message: 'H√£ng t√†u ch∆∞a c√≥ template EIR'
        };
      }

      // ƒê·ªçc template file
      const templatePath = path.join(__dirname, '../../../uploads/shipping-lines-eir', templateEir);
      
      if (!fs.existsSync(templatePath)) {
        return {
          success: false,
          message: 'Template EIR kh√¥ng t·ªìn t·∫°i'
        };
      }

      console.log('üìÅ Template path:', templatePath);

      // ƒê·ªçc template Excel v·ªõi ExcelJS
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(templatePath);
      
      console.log('üìã Template structure loaded...');

      // L·∫•y worksheet ƒë·∫ßu ti√™n
      const worksheet = workbook.getWorksheet(1);
      console.log(`üìä Worksheet: ${worksheet.name}, c√≥ ${worksheet.rowCount} h√†ng, ${worksheet.columnCount} c·ªôt`);

      // L∆∞u l·∫°i t·∫•t c·∫£ thu·ªôc t√≠nh ƒë·ªãnh d·∫°ng g·ªëc
      const originalProperties = {
        cols: [],
        rows: [],
        merges: worksheet.model.merges || [],
        images: worksheet.model.images || [],
        drawings: worksheet.model.drawings || []
      };

      // L∆∞u l·∫°i k√≠ch th∆∞·ªõc c·ªôt
      for (let i = 1; i <= worksheet.columnCount; i++) {
        const col = worksheet.getColumn(i);
        originalProperties.cols.push({
          width: col.width,
          hidden: col.hidden,
          style: col.style
        });
      }

      // L∆∞u l·∫°i k√≠ch th∆∞·ªõc h√†ng
      for (let i = 1; i <= worksheet.rowCount; i++) {
        const row = worksheet.getRow(i);
        originalProperties.rows.push({
          height: row.height,
          hidden: row.hidden,
          style: row.style
        });
      }

      console.log(`üìê ƒê√£ l∆∞u ${originalProperties.cols.length} c·ªôt v√† ${originalProperties.rows.length} h√†ng`);

      // T√¨m h√≥a ƒë∆°n li√™n quan ƒë·∫øn request n√†y
      const invoice = await prisma.invoice.findFirst({
        where: {
          source_module: 'REQUESTS',
          source_id: request.id
        },
        include: {
          items: true
        }
      });

      // ƒêi·ªÅn th√¥ng tin theo logic ho√†n ch·ªânh
      let filledCells = 0;

      console.log('\nüìù ƒêI·ªÄN TH√îNG TIN HO√ÄN CH·ªàNH:');
      console.log('=' .repeat(50));

      // C7:H7 - T√™n kh√°ch h√†ng
      const customerName = request.customer?.name || '';
      for (let col = 3; col <= 8; col++) { // C=3, D=4, E=5, F=6, G=7, H=8
        const cell = worksheet.getCell(7, col);
        cell.value = customerName;
        filledCells++;
      }
      console.log(`   ‚úÖ C7:H7 - T√™n kh√°ch h√†ng: "${customerName}"`);

      // C8:D8 - H√£ng t√†u
      const shippingLine = request.shipping_line?.code || request.shipping_line?.name || '';
      for (let col = 3; col <= 4; col++) { // C=3, D=4
        const cell = worksheet.getCell(8, col);
        cell.value = shippingLine;
        filledCells++;
      }
      console.log(`   ‚úÖ C8:D8 - H√£ng t√†u: "${shippingLine}"`);

      // G8:H8 - Lo·∫°i t√°c nghi·ªáp
      const operationType = request.type === 'IMPORT' ? 'H·∫° container' : 'N√¢ng container';
      for (let col = 7; col <= 8; col++) { // G=7, H=8
        const cell = worksheet.getCell(8, col);
        cell.value = operationType;
        filledCells++;
      }
      console.log(`   ‚úÖ G8:H8 - Lo·∫°i t√°c nghi·ªáp: "${operationType}"`);

      // J8:L8 - Lo·∫°i container
      const containerType = request.container_type?.code || request.container_type?.description || '';
      for (let col = 10; col <= 12; col++) { // J=10, K=11, L=12
        const cell = worksheet.getCell(8, col);
        cell.value = containerType;
        filledCells++;
      }
      console.log(`   ‚úÖ J8:L8 - Lo·∫°i container: "${containerType}"`);

      // C9:D9 - Container No
      const containerNo = request.container_no;
      for (let col = 3; col <= 4; col++) { // C=3, D=4
        const cell = worksheet.getCell(9, col);
        cell.value = containerNo;
        filledCells++;
      }
      console.log(`   ‚úÖ C9:D9 - Container No: "${containerNo}"`);

      // G9:H9 - Booking
      const bookingNumber = request.booking_bill || '';
      for (let col = 7; col <= 8; col++) { // G=7, H=8
        const cell = worksheet.getCell(9, col);
        cell.value = bookingNumber;
        filledCells++;
      }
      console.log(`   ‚úÖ G9:H9 - Booking: "${bookingNumber}"`);

      // J9:L9 - S·ªë seal
      const sealNumber = request.seal_number || '';
      for (let col = 10; col <= 12; col++) { // J=10, K=11, L=12
        const cell = worksheet.getCell(9, col);
        cell.value = sealNumber;
        filledCells++;
      }
      console.log(`   ‚úÖ J9:L9 - S·ªë seal: "${sealNumber}"`);

      // C10:L10 - Ghi ch√∫
      const notes = request.notes || '';
      for (let col = 3; col <= 12; col++) { // C=3, D=4, E=5, F=6, G=7, H=8, I=9, J=10, K=11, L=12
        const cell = worksheet.getCell(10, col);
        cell.value = notes;
        filledCells++;
      }
      console.log(`   ‚úÖ C10:L10 - Ghi ch√∫: "${notes}"`);

      // A11:F11 - Text "S·ªë xe:"
      for (let col = 1; col <= 6; col++) { // A=1, B=2, C=3, D=4, E=5, F=6
        const cell = worksheet.getCell(11, col);
        cell.value = 'S·ªë xe:';
        filledCells++;
      }
      console.log(`   ‚úÖ A11:F11 - Text "S·ªë xe:"`);

      // G11:L11 - Text "S·ªë ƒëi·ªán tho·∫°i t√†i x·∫ø:"
      for (let col = 7; col <= 12; col++) { // G=7, H=8, I=9, J=10, K=11, L=12
        const cell = worksheet.getCell(11, col);
        cell.value = 'S·ªë ƒëi·ªán tho·∫°i t√†i x·∫ø:';
        filledCells++;
      }
      console.log(`   ‚úÖ G11:L11 - Text "S·ªë ƒëi·ªán tho·∫°i t√†i x·∫ø:"`);

      // A12:F12 - S·ªë xe
      const vehiclePlate = request.license_plate || '';
      for (let col = 1; col <= 6; col++) { // A=1, B=2, C=3, D=4, E=5, F=6
        const cell = worksheet.getCell(12, col);
        cell.value = vehiclePlate;
        filledCells++;
      }
      console.log(`   ‚úÖ A12:F12 - S·ªë xe: "${vehiclePlate}"`);

      // G12:L12 - SƒêT t√†i x·∫ø
      const driverPhone = request.driver_phone || '';
      for (let col = 7; col <= 12; col++) { // G=7, H=8, I=9, J=10, K=11, L=12
        const cell = worksheet.getCell(12, col);
        cell.value = driverPhone;
        filledCells++;
      }
      console.log(`   ‚úÖ G12:L12 - SƒêT t√†i x·∫ø: "${driverPhone}"`);

      // I7 - Text "S·ªë h√≥a ƒë∆°n:"
      const cellI7 = worksheet.getCell(7, 9); // I=9
      cellI7.value = 'S·ªë h√≥a ƒë∆°n:';
      filledCells++;
      console.log(`   ‚úÖ I7 - Text "S·ªë h√≥a ƒë∆°n:"`);

      // J7:L7 - S·ªë h√≥a ƒë∆°n (n·∫øu c√≥)
      const invoiceNumber = invoice?.invoice_no || '';
      for (let col = 10; col <= 12; col++) { // J=10, K=11, L=12
        const cell = worksheet.getCell(7, col);
        cell.value = invoiceNumber;
        filledCells++;
      }
      console.log(`   ‚úÖ J7:L7 - S·ªë h√≥a ƒë∆°n: "${invoiceNumber}"`);

      // K4:L4 - S·ªë y√™u c·∫ßu
      const requestNumber = request.request_no || request.id;
      for (let col = 11; col <= 12; col++) { // K=11, L=12
        const cell = worksheet.getCell(4, col);
        cell.value = requestNumber;
        filledCells++;
      }
      console.log(`   ‚úÖ K4:L4 - S·ªë y√™u c·∫ßu: "${requestNumber}"`);

      console.log(`\nüìä ƒê√£ ƒëi·ªÅn ${filledCells} √¥ d·ªØ li·ªáu`);

      // Kh√¥i ph·ª•c l·∫°i t·∫•t c·∫£ thu·ªôc t√≠nh ƒë·ªãnh d·∫°ng g·ªëc
      console.log('üîÑ Kh√¥i ph·ª•c ƒë·ªãnh d·∫°ng g·ªëc...');
      
      // Kh√¥i ph·ª•c k√≠ch th∆∞·ªõc c·ªôt
      originalProperties.cols.forEach((colProps, index) => {
        const col = worksheet.getColumn(index + 1);
        if (colProps.width !== undefined) {
          col.width = colProps.width;
        }
        if (colProps.hidden !== undefined) {
          col.hidden = colProps.hidden;
        }
        if (colProps.style) {
          col.style = colProps.style;
        }
      });

      // Kh√¥i ph·ª•c k√≠ch th∆∞·ªõc h√†ng
      originalProperties.rows.forEach((rowProps, index) => {
        const row = worksheet.getRow(index + 1);
        if (rowProps.height !== undefined) {
          row.height = rowProps.height;
        }
        if (rowProps.hidden !== undefined) {
          row.hidden = rowProps.hidden;
        }
        if (rowProps.style) {
          row.style = rowProps.style;
        }
      });

      // Kh√¥i ph·ª•c merged cells
      if (originalProperties.merges && originalProperties.merges.length > 0) {
        worksheet.model.merges = originalProperties.merges;
      }

      // Kh√¥i ph·ª•c h√¨nh ·∫£nh
      if (originalProperties.images && originalProperties.images.length > 0) {
        worksheet.model.images = originalProperties.images;
      }

      // Kh√¥i ph·ª•c drawings
      if (originalProperties.drawings && originalProperties.drawings.length > 0) {
        worksheet.model.drawings = originalProperties.drawings;
      }

      console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c ho√†n to√†n ƒë·ªãnh d·∫°ng g·ªëc');

      // T·∫°o t√™n file
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
      const filename = `EIR_${request.container_no}_${timestamp}.xlsx`;

      // T·∫°o buffer t·ª´ workbook
      const buffer = await workbook.xlsx.writeBuffer();

      console.log('‚úÖ Phi·∫øu EIR ho√†n ch·ªânh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
      console.log(`üìÑ Filename: ${filename}`);

      return {
        success: true,
        data: {
          filename,
          fileBuffer: buffer
        }
      };

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o phi·∫øu EIR ho√†n ch·ªânh:', error);
      return {
        success: false,
        message: 'L·ªói khi t·∫°o phi·∫øu EIR ho√†n ch·ªânh: ' + error.message
      };
    }
  }
}

module.exports = { EnhancedEIRService };

