import { Request, Response } from 'express';
import { prisma } from './dependencies';

// Helper function to calculate totals
function calculateTotals(lineItems: any[]) {
  let subtotal = 0;
  let tax = 0;

  for (const item of lineItems) {
    const qty = Number(item.qty);
    const price = Number(item.unit_price);
    const line = qty * price;
    const taxAmt = item.tax_rate ? line * (Number(item.tax_rate) / 100) : 0;
    subtotal += line;
    tax += taxAmt;
  }

  return {
    subtotal: Math.round(subtotal * 100) / 100,
    tax_amount: Math.round(tax * 100) / 100,
    total_amount: Math.round((subtotal + tax) * 100) / 100
  };
}

// C·∫≠p nh·∫≠t t·∫•t c·∫£ invoice hi·ªán c√≥ v·ªõi seal cost
export const updateAllInvoicesWithSealCost = async (req: Request, res: Response) => {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t·∫•t c·∫£ invoice v·ªõi seal cost...');
    
    // L·∫•y t·∫•t c·∫£ ServiceRequest c√≥ type EXPORT
    const serviceRequests = await prisma.serviceRequest.findMany({
      where: {
        type: 'EXPORT'
      },
      include: {
        invoices: {
          where: {
            source_module: 'REQUESTS'
          },
          include: {
            items: true
          }
        }
      }
    });

    console.log(`üìã T√¨m th·∫•y ${serviceRequests.length} ServiceRequest EXPORT`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const serviceRequest of serviceRequests) {
      const invoice = serviceRequest.invoices[0];
      
      if (!invoice) {
        console.log(`‚ö†Ô∏è ServiceRequest ${serviceRequest.id} ch∆∞a c√≥ invoice, b·ªè qua`);
        skippedCount++;
        continue;
      }

      // Ki·ªÉm tra xem ƒë√£ c√≥ seal cost ch∆∞a
      const hasSealCost = invoice.items.some(item => item.service_code === 'SEAL');
      
      if (hasSealCost) {
        console.log(`‚úÖ Invoice ${invoice.id} ƒë√£ c√≥ seal cost, b·ªè qua`);
        skippedCount++;
        continue;
      }

      // T√¨m seal cost cho container n√†y
      const sealUsage = await prisma.sealUsageHistory.findFirst({
        where: {
          OR: [
            { container_number: serviceRequest.container_no },
            { booking_number: serviceRequest.booking_bill }
          ]
        },
        include: {
          seal: {
            select: {
              unit_price: true,
              shipping_company: true
            }
          }
        }
      });

      if (!sealUsage || !sealUsage.seal) {
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y seal usage cho ServiceRequest ${serviceRequest.id}, b·ªè qua`);
        skippedCount++;
        continue;
      }

      // Th√™m seal cost v√†o invoice
      await prisma.invoiceLineItem.create({
        data: {
          org_id: null,
          invoice_id: invoice.id,
          service_code: 'SEAL',
          description: `Chi ph√≠ seal container (${sealUsage.seal.shipping_company})`,
          qty: 1 as any,
          unit_price: Number(sealUsage.seal.unit_price) as any,
          line_amount: Number(sealUsage.seal.unit_price) as any,
          tax_code: null,
          tax_rate: null as any,
          tax_amount: 0 as any,
          total_line_amount: Number(sealUsage.seal.unit_price) as any
        }
      });

      // T√≠nh l·∫°i t·ªïng ti·ªÅn
      const allLineItems = await prisma.invoiceLineItem.findMany({
        where: { invoice_id: invoice.id }
      });

      const totals = calculateTotals(allLineItems);

      await prisma.invoice.update({
        where: { id: invoice.id },
        data: {
          subtotal: totals.subtotal as any,
          tax_amount: totals.tax_amount as any,
          total_amount: totals.total_amount as any
        }
      });

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t invoice ${invoice.id} v·ªõi seal cost: ${sealUsage.seal.unit_price} VND`);
      console.log(`   - T·ªïng ti·ªÅn m·ªõi: ${totals.total_amount} VND`);
      updatedCount++;
    }

    res.json({
      success: true,
      message: `ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} invoice, b·ªè qua ${skippedCount} invoice`,
      data: {
        total: serviceRequests.length,
        updated: updatedCount,
        skipped: skippedCount
      }
    });

  } catch (error: any) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t invoice v·ªõi seal cost:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t invoice',
      error: error.toString()
    });
  }
};

// C·∫≠p nh·∫≠t invoice c·ª• th·ªÉ v·ªõi seal cost
export const updateInvoiceWithSealCost = async (req: Request, res: Response) => {
  try {
    const { requestId } = req.params;
    
    console.log(`üîÑ C·∫≠p nh·∫≠t invoice cho ServiceRequest: ${requestId}`);

    const serviceRequest = await prisma.serviceRequest.findUnique({
      where: { id: requestId },
      include: {
        invoices: {
          where: {
            source_module: 'REQUESTS'
          },
          include: {
            items: true
          }
        }
      }
    });

    if (!serviceRequest) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ServiceRequest'
      });
    }

    const invoice = serviceRequest.invoices[0];
    
    if (!invoice) {
      return res.status(404).json({
        success: false,
        message: 'ServiceRequest ch∆∞a c√≥ invoice'
      });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ seal cost ch∆∞a
    const hasSealCost = invoice.items.some(item => item.service_code === 'SEAL');
    
    if (hasSealCost) {
      return res.json({
        success: true,
        message: 'Invoice ƒë√£ c√≥ seal cost',
        data: invoice
      });
    }

    // T√¨m seal cost cho container n√†y
    const sealUsage = await prisma.sealUsageHistory.findFirst({
      where: {
        OR: [
          { container_number: serviceRequest.container_no },
          { booking_number: serviceRequest.booking_bill }
        ]
      },
      include: {
        seal: {
          select: {
            unit_price: true,
            shipping_company: true
          }
        }
      }
    });

    if (!sealUsage || !sealUsage.seal) {
      return res.json({
        success: true,
        message: 'Kh√¥ng t√¨m th·∫•y seal usage cho container n√†y',
        data: invoice
      });
    }

    // Th√™m seal cost v√†o invoice
    await prisma.invoiceLineItem.create({
      data: {
        org_id: null,
        invoice_id: invoice.id,
        service_code: 'SEAL',
        description: `Chi ph√≠ seal container (${sealUsage.seal.shipping_company})`,
        qty: 1 as any,
        unit_price: Number(sealUsage.seal.unit_price) as any,
        line_amount: Number(sealUsage.seal.unit_price) as any,
        tax_code: null,
        tax_rate: null as any,
        tax_amount: 0 as any,
        total_line_amount: Number(sealUsage.seal.unit_price) as any
      }
    });

    // T√≠nh l·∫°i t·ªïng ti·ªÅn
    const allLineItems = await prisma.invoiceLineItem.findMany({
      where: { invoice_id: invoice.id }
    });

    const totals = calculateTotals(allLineItems);

    const updatedInvoice = await prisma.invoice.update({
      where: { id: invoice.id },
      data: {
        subtotal: totals.subtotal as any,
        tax_amount: totals.tax_amount as any,
        total_amount: totals.total_amount as any
      },
      include: {
        items: true
      }
    });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t invoice ${invoice.id} v·ªõi seal cost: ${sealUsage.seal.unit_price} VND`);

    res.json({
      success: true,
      message: 'ƒê√£ c·∫≠p nh·∫≠t invoice v·ªõi seal cost',
      data: {
        invoice: updatedInvoice,
        sealCost: Number(sealUsage.seal.unit_price),
        newTotal: totals.total_amount
      }
    });

  } catch (error: any) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t invoice:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t invoice',
      error: error.toString()
    });
  }
};
