import { Request, Response } from 'express';
import { prisma } from './dependencies';

// Cancel request
export const cancelRequest = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { reason } = req.body;
        const cancelledBy = (req as any).user?._id;

        const request = await prisma.serviceRequest.findUnique({
            where: {
                id,
                depot_deleted_at: null
            }
        });

        if (!request) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu' });
        }

        if (request.status === 'REJECTED') {
            return res.status(400).json({ success: false, message: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥' });
        }

        if (request.status === 'COMPLETED') {
            return res.status(400).json({ success: false, message: 'Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu ƒë√£ ho√†n th√†nh' });
        }

        const updatedRequest = await prisma.$transaction(async (tx) => {
            // C·∫≠p nh·∫≠t ServiceRequest th√†nh REJECTED
            const updatedRequest = await tx.serviceRequest.update({
                where: { id },
                data: {
                    status: 'REJECTED',
                    updatedAt: new Date(),
                    rejected_reason: reason || null,
                    rejected_by: cancelledBy || null,
                    rejected_at: new Date()
                }
            });

            // üîÑ B·ªî SUNG LOGIC: C·∫≠p nh·∫≠t tr·∫°ng th√°i container ƒë·ªÉ c√≥ th·ªÉ n√¢ng l·∫°i
            if (request.container_no && request.type === 'EXPORT') {
                console.log(`üîÑ [Cancel Request] Container ${request.container_no} - y√™u c·∫ßu n√¢ng b·ªã h·ªßy, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ c√≥ th·ªÉ n√¢ng l·∫°i`);
                
                // T√¨m container record ƒë·ªÉ l∆∞u th√¥ng tin kh√°ch h√†ng b·ªã t·ª´ ch·ªëi
                const containerRecord = await tx.container.findFirst({
                    where: {
                        container_no: request.container_no
                    },
                    include: {
                        customer: true
                    }
                });

                if (containerRecord) {
                    // L∆∞u th√¥ng tin kh√°ch h√†ng hi·ªán t·∫°i v√†o rejected_customer tr∆∞·ªõc khi reset
                    if (containerRecord.customer_id && containerRecord.customer) {
                        console.log(`üìù [Cancel Request] L∆∞u th√¥ng tin kh√°ch h√†ng b·ªã t·ª´ ch·ªëi: ${containerRecord.customer.name} (ID: ${containerRecord.customer_id})`);
                        
                        await tx.container.update({
                            where: { id: containerRecord.id },
                            data: {
                                rejected_customer_id: containerRecord.customer_id,
                                rejected_customer_name: containerRecord.customer.name,
                                rejected_at: new Date(),
                                customer_id: null // Reset customer_id ƒë·ªÉ container c√≥ th·ªÉ d√πng l·∫°i
                            }
                        });
                        
                        console.log(`‚úÖ [Cancel Request] ƒê√£ l∆∞u l·ªãch s·ª≠ kh√°ch h√†ng v√† reset customer_id cho container ${request.container_no}`);
                    } else {
                        console.log(`‚ÑπÔ∏è [Cancel Request] Container ${request.container_no} kh√¥ng c√≥ kh√°ch h√†ng, kh√¥ng c·∫ßn l∆∞u l·ªãch s·ª≠`);
                    }
                }

                // T√¨m container trong yard
                const yardPlacement = await tx.yardPlacement.findFirst({
                    where: {
                        container_no: request.container_no,
                        status: 'OCCUPIED',
                        removed_at: null
                    }
                });

                if (yardPlacement) {
                    // Container v·∫´n ·ªü trong yard, c·∫ßn ƒë·∫£m b·∫£o c√≥ th·ªÉ n√¢ng l·∫°i
                    // Ki·ªÉm tra xem container c√≥ ph·∫£i l√† EMPTY_IN_YARD (SystemAdmin th√™m) kh√¥ng
                    const containerRecord = await tx.container.findFirst({
                        where: {
                            container_no: request.container_no,
                            status: 'EMPTY_IN_YARD'
                        }
                    });

                    if (containerRecord) {
                        // Container l√† EMPTY_IN_YARD, kh√¥ng c·∫ßn l√†m g√¨ th√™m
                        console.log(`‚úÖ Container ${request.container_no} l√† EMPTY_IN_YARD, s·∫µn s√†ng ƒë·ªÉ n√¢ng l·∫°i`);
                    } else {
                        // Container t·ª´ IMPORT, c·∫ßn ƒë·∫£m b·∫£o c√≥ RepairTicket v·ªõi status COMPLETE
                        const repairTicket = await tx.repairTicket.findFirst({
                            where: {
                                container_no: request.container_no,
                                status: 'COMPLETE'
                            },
                            orderBy: { updatedAt: 'desc' }
                        });

                        if (repairTicket) {
                            console.log(`‚úÖ Container ${request.container_no} c√≥ RepairTicket COMPLETE, s·∫µn s√†ng ƒë·ªÉ n√¢ng l·∫°i`);
                        } else {
                            console.log(`‚ö†Ô∏è Container ${request.container_no} kh√¥ng c√≥ RepairTicket COMPLETE, c√≥ th·ªÉ kh√¥ng xu·∫•t hi·ªán trong g·ª£i √Ω`);
                        }
                    }
                } else {
                    console.log(`‚ö†Ô∏è Container ${request.container_no} kh√¥ng t√¨m th·∫•y trong yard, c√≥ th·ªÉ ƒë√£ b·ªã x√≥a kh·ªèi b√£i`);
                }
            }

            // üîÑ B·ªî SUNG LOGIC: X√≥a booking_number kh·ªèi SealUsageHistory khi h·ªßy y√™u c·∫ßu
            if (request.container_no) {
                console.log(`üîÑ [Cancel Request] X√≥a booking_number kh·ªèi SealUsageHistory cho container: ${request.container_no}`);
                
                // X√≥a t·∫•t c·∫£ booking_number c·ªßa container n√†y (kh√¥ng c·∫ßn kh·ªõp ch√≠nh x√°c booking_bill)
                // V√¨ user c√≥ th·ªÉ ƒë√£ c·∫≠p nh·∫≠t booking sau khi t·∫°o seal history
                const updatedSealHistory = await tx.sealUsageHistory.updateMany({
                    where: {
                        container_number: request.container_no,
                        booking_number: { not: null } // Ch·ªâ x√≥a nh·ªØng record c√≥ booking_number
                    },
                    data: {
                        booking_number: null // X√≥a booking_number
                    }
                });

                console.log(`‚úÖ ƒê√£ x√≥a booking_number kh·ªèi ${updatedSealHistory.count} record trong SealUsageHistory cho container ${request.container_no}`);
            }

            return updatedRequest;
        });

        res.json({ success: true, data: updatedRequest, message: 'H·ªßy y√™u c·∫ßu th√†nh c√¥ng' });

    } catch (error: any) {
        console.error('Cancel request error:', error);
        res.status(500).json({ success: false, message: error.message || 'C√≥ l·ªói x·∫£y ra khi h·ªßy y√™u c·∫ßu' });
    }
};


