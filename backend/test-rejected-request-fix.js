const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRejectedRequestFix() {
    console.log('üß™ Test: REJECTED request kh√¥ng b·ªã "s·ªëng l·∫°i" khi t·∫°o repair invoice...\n');
    
    try {
        // 1. T·∫°o request ƒë·∫ßu ti√™n v√† reject n√≥
        console.log('1Ô∏è‚É£ T·∫°o request ƒë·∫ßu ti√™n cho container 9999...');
        const firstRequest = await prisma.serviceRequest.create({
            data: {
                created_by: 'test-user-id',
                type: 'IMPORT',
                container_no: '9999',
                eta: new Date(),
                status: 'PENDING',
                history: [{ at: new Date().toISOString(), by: 'test-user-id', action: 'CREATE' }]
            }
        });
        console.log(`‚úÖ Request ƒë·∫ßu ti√™n: ${firstRequest.id} (Status: ${firstRequest.status})`);

        // 2. Reject request ƒë·∫ßu ti√™n
        console.log('\n2Ô∏è‚É£ Reject request ƒë·∫ßu ti√™n...');
        const rejectedRequest = await prisma.serviceRequest.update({
            where: { id: firstRequest.id },
            data: {
                status: 'REJECTED',
                rejected_reason: 'Test rejection',
                rejected_by: 'test-admin-id',
                rejected_at: new Date()
            }
        });
        console.log(`‚úÖ Request ƒë√£ b·ªã reject: ${rejectedRequest.id} (Status: ${rejectedRequest.status})`);

        // 3. T·∫°o request m·ªõi cho c√πng container
        console.log('\n3Ô∏è‚É£ T·∫°o request m·ªõi cho container 9999...');
        const secondRequest = await prisma.serviceRequest.create({
            data: {
                created_by: 'test-user-id',
                type: 'IMPORT',
                container_no: '9999',
                eta: new Date(),
                status: 'PENDING',
                history: [{ at: new Date().toISOString(), by: 'test-user-id', action: 'CREATE' }]
            }
        });
        console.log(`‚úÖ Request m·ªõi: ${secondRequest.id} (Status: ${secondRequest.status})`);

        // 4. T·∫°o RepairTicket cho container n√†y
        console.log('\n4Ô∏è‚É£ T·∫°o RepairTicket cho container 9999...');
        const repairTicket = await prisma.repairTicket.create({
            data: {
                code: 'TEST-REPAIR-9999',
                container_no: '9999',
                problem_description: 'Test problem description',
                status: 'CHECKING',
                created_by: 'test-admin-id'
            }
        });
        console.log(`‚úÖ RepairTicket: ${repairTicket.id} (Status: ${repairTicket.status})`);

        // 5. T·∫°o repair invoice (s·∫Ω trigger logic c·∫≠p nh·∫≠t ServiceRequest)
        console.log('\n5Ô∏è‚É£ T·∫°o repair invoice (s·∫Ω trigger c·∫≠p nh·∫≠t ServiceRequest)...');
        
        // Simulate createRepairInvoice logic
        const updatedTicket = await prisma.repairTicket.update({
            where: { id: repairTicket.id },
            data: { 
                status: 'PENDING_ACCEPT',
                updatedAt: new Date()
            }
        });
        console.log(`‚úÖ RepairTicket updated to: ${updatedTicket.status}`);

        // Simulate logic c·∫≠p nh·∫≠t ServiceRequest (v·ªõi fix m·ªõi)
        const updatedRequests = await prisma.serviceRequest.updateMany({
            where: { 
                container_no: '9999',
                status: { 
                    notIn: ['COMPLETED', 'REJECTED', 'GATE_REJECTED'] // Ch·ªâ c·∫≠p nh·∫≠t request active
                }
            },
            data: {
                status: 'PENDING_ACCEPT'
            }
        });
        console.log(`‚úÖ Updated ${updatedRequests.count} ServiceRequest(s) to PENDING_ACCEPT`);

        // 6. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\n6Ô∏è‚É£ Ki·ªÉm tra k·∫øt qu·∫£...');
        const allRequests = await prisma.serviceRequest.findMany({
            where: { container_no: '9999' },
            orderBy: { createdAt: 'asc' },
            select: {
                id: true,
                status: true,
                createdAt: true,
                rejected_at: true
            }
        });

        console.log('\nüìä Danh s√°ch t·∫•t c·∫£ requests cho container 9999:');
        allRequests.forEach((req, index) => {
            console.log(`   ${index + 1}. ID: ${req.id}`);
            console.log(`      Status: ${req.status}`);
            console.log(`      Created: ${req.createdAt.toISOString()}`);
            if (req.rejected_at) {
                console.log(`      Rejected: ${req.rejected_at.toISOString()}`);
            }
            console.log('');
        });

        // 7. Verify k·∫øt qu·∫£
        const rejectedRequestAfter = allRequests.find(r => r.id === firstRequest.id);
        const newRequestAfter = allRequests.find(r => r.id === secondRequest.id);

        console.log('üîç K·∫øt qu·∫£ ki·ªÉm tra:');
        console.log(`   - Request c≈© (REJECTED): ${rejectedRequestAfter?.status} ${rejectedRequestAfter?.status === 'REJECTED' ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Request m·ªõi (PENDING_ACCEPT): ${newRequestAfter?.status} ${newRequestAfter?.status === 'PENDING_ACCEPT' ? '‚úÖ' : '‚ùå'}`);

        if (rejectedRequestAfter?.status === 'REJECTED' && newRequestAfter?.status === 'PENDING_ACCEPT') {
            console.log('\nüéâ TEST TH√ÄNH C√îNG!');
            console.log('   - Request c≈© v·∫´n gi·ªØ status REJECTED');
            console.log('   - Request m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh PENDING_ACCEPT');
            console.log('   - Kh√¥ng c√≥ conflict gi·ªØa c√°c request');
        } else {
            console.log('\n‚ùå TEST TH·∫§T B·∫†I!');
            console.log('   - Request c≈© b·ªã thay ƒë·ªïi status kh√¥ng mong mu·ªën');
        }

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
        console.error('Chi ti·∫øt l·ªói:', error);
    } finally {
        // Cleanup
        console.log('\nüßπ D·ªçn d·∫πp test data...');
        try {
            await prisma.serviceRequest.deleteMany({
                where: { 
                    container_no: '9999',
                    created_by: 'test-user-id'
                }
            });
            await prisma.repairTicket.deleteMany({
                where: { 
                    container_no: '9999',
                    created_by: 'test-admin-id'
                }
            });
            console.log('‚úÖ ƒê√£ x√≥a test data');
        } catch (cleanupError) {
            console.error('‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp:', cleanupError.message);
        }
        
        await prisma.$disconnect();
        console.log('\nüèÅ Test ho√†n th√†nh!');
    }
}

// Ch·∫°y test
testRejectedRequestFix();
