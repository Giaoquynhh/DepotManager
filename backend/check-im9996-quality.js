const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkIM9996Quality() {
  try {
    console.log('üîç Ki·ªÉm tra container_quality c·ªßa IM9996...\n');

    const containerNo = 'IM9996';

    // Ki·ªÉm tra Container table
    const container = await prisma.container.findUnique({
      where: { container_no: containerNo },
      select: { 
        container_no: true,
        container_quality: true,
        status: true
      }
    });

    if (container) {
      console.log('‚úÖ Container IM9996:');
      console.log(`   - container_no: ${container.container_no}`);
      console.log(`   - container_quality: ${container.container_quality || 'NULL'}`);
      console.log(`   - status: ${container.status}`);
      
      if (container.container_quality === 'GOOD') {
        console.log('‚úÖ Container c√≥ quality GOOD - s·∫Ω xu·∫•t hi·ªán trong g·ª£i √Ω');
      } else if (container.container_quality === 'NEED_REPAIR') {
        console.log('‚ùå Container c√≥ quality NEED_REPAIR - s·∫Ω KH√îNG xu·∫•t hi·ªán trong g·ª£i √Ω');
      } else {
        console.log('‚ö†Ô∏è Container kh√¥ng c√≥ container_quality - s·∫Ω fallback v·ªÅ RepairTicket');
      }
    } else {
      console.log('‚ùå Container IM9996 kh√¥ng t√¨m th·∫•y trong b·∫£ng Container');
    }

    // Ki·ªÉm tra RepairTicket
    const repairTicket = await prisma.repairTicket.findFirst({
      where: { container_no: containerNo },
      orderBy: { updatedAt: 'desc' }
    });

    if (repairTicket) {
      console.log('\nüîß RepairTicket:');
      console.log(`   - status: ${repairTicket.status}`);
      console.log(`   - updatedAt: ${repairTicket.updatedAt}`);
    } else {
      console.log('\n‚ùå Kh√¥ng c√≥ RepairTicket');
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkIM9996Quality();

