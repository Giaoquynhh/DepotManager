const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSystemAdminLogic() {
  try {
    console.log('üß™ Test logic SystemAdmin ƒë·∫∑t container v√†o b√£i');
    console.log('=' .repeat(60));

    // 1. T√¨m SystemAdmin user
    const systemAdmin = await prisma.user.findFirst({
      where: { role: 'SystemAdmin' },
      select: { id: true, username: true, role: true }
    });

    if (!systemAdmin) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y SystemAdmin user');
      return;
    }

    console.log(`üë§ SystemAdmin: ${systemAdmin.username} (${systemAdmin.id})`);

    // 2. T√¨m m·ªôt slot tr·ªëng ƒë·ªÉ test
    const emptySlot = await prisma.yardSlot.findFirst({
      where: { 
        status: 'EMPTY',
        occupant_container_no: null
      },
      include: {
        block: {
          include: {
            yard: true
          }
        }
      }
    });

    if (!emptySlot) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y slot tr·ªëng ƒë·ªÉ test');
      return;
    }

    console.log(`üìç Slot test: ${emptySlot.block?.yard?.name || 'N/A'} - ${emptySlot.block?.code || 'N/A'} - ${emptySlot.code || 'N/A'}`);

    // 3. T·∫°o container test
    const testContainerNo = `TEST${Date.now()}`;
    console.log(`üì¶ Container test: ${testContainerNo}`);

    // 4. Simulate SystemAdmin ƒë·∫∑t container v√†o b√£i
    console.log('\nüîÑ Simulating SystemAdmin placement...');
    
    // T·∫°o YardPlacement HOLD tr∆∞·ªõc
    const holdPlacement = await prisma.yardPlacement.create({
      data: {
        slot_id: emptySlot.id,
        tier: 1,
        status: 'HOLD',
        container_no: null,
        hold_expires_at: new Date(Date.now() + 15 * 60 * 1000), // 15 ph√∫t
        created_by: systemAdmin.id
      }
    });

    console.log(`‚úÖ Created HOLD placement: ${holdPlacement.id}`);

    // 5. Simulate confirm action (logic m·ªõi)
    const now = new Date();
    const result = await prisma.$transaction(async (tx) => {
      // C·∫≠p nh·∫≠t placement th√†nh OCCUPIED
      const updatedPlacement = await tx.yardPlacement.update({
        where: { slot_tier_unique: { slot_id: emptySlot.id, tier: 1 } },
        data: { 
          status: 'OCCUPIED', 
          container_no: testContainerNo, 
          hold_expires_at: null, 
          placed_at: now 
        }
      });

      // C·∫≠p nh·∫≠t YardSlot
      await tx.yardSlot.update({
        where: { id: emptySlot.id },
        data: { 
          status: 'OCCUPIED',
          occupant_container_no: testContainerNo
        }
      });

      // Logic SystemAdmin: T·∫°o ServiceRequest n·∫øu ch∆∞a c√≥
      let latestRequest = await tx.serviceRequest.findFirst({
        where: { container_no: testContainerNo },
        orderBy: { createdAt: 'desc' }
      });

      if (!latestRequest) {
        console.log(`üÜï Creating new ServiceRequest for ${testContainerNo}`);
        latestRequest = await tx.serviceRequest.create({
          data: {
            container_no: testContainerNo,
            type: 'EXPORT', // SystemAdmin ƒë·∫∑t container v√†o b√£i = EXPORT (N√ÇNG)
            status: 'IN_YARD', // Container ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v√†o b√£i
            created_by: systemAdmin.id,
            createdAt: now,
            updatedAt: now,
            history: {
              created_by_systemadmin: {
                reason: 'Container ƒë∆∞·ª£c SystemAdmin ƒë·∫∑t tr·ª±c ti·∫øp v√†o b√£i',
                created_at: now.toISOString(),
                yard: emptySlot.block?.yard?.name || 'N/A',
                block: emptySlot.block?.code || 'N/A',
                slot: emptySlot.code || 'N/A',
                tier: 1
              }
            }
          }
        });
        console.log(`‚úÖ Created ServiceRequest: ${latestRequest.id} - ${latestRequest.type} - ${latestRequest.status}`);
      }

      // T·∫°o ContainerMeta
      await tx.containerMeta.upsert({
        where: { container_no: testContainerNo },
        update: { updatedAt: now },
        create: { 
          container_no: testContainerNo,
          updatedAt: now
        }
      });

      return {
        placement: updatedPlacement,
        request: latestRequest
      };
    });

    console.log('\n‚úÖ SystemAdmin placement completed!');
    console.log(`üì¶ Container: ${testContainerNo}`);
    console.log(`üìç Placement: ${result.placement.status}, Tier ${result.placement.tier}`);
    console.log(`üìã ServiceRequest: ${result.request.type} - ${result.request.status}`);

    // 6. Verify k·∫øt qu·∫£
    console.log('\nüîç Verification:');
    
    const verifyPlacement = await prisma.yardPlacement.findFirst({
      where: { container_no: testContainerNo },
      include: {
        slot: {
          include: {
            block: {
              include: {
                yard: true
              }
            }
          }
        }
      }
    });

    const verifyRequest = await prisma.serviceRequest.findFirst({
      where: { container_no: testContainerNo },
      orderBy: { createdAt: 'desc' }
    });

    const verifySlot = await prisma.yardSlot.findUnique({
      where: { id: emptySlot.id }
    });

    console.log(`‚úÖ YardPlacement: ${verifyPlacement?.status} - ${verifyPlacement?.slot?.block?.yard?.name || 'N/A'} - ${verifyPlacement?.slot?.block?.code || 'N/A'} - ${verifyPlacement?.slot?.code || 'N/A'}`);
    console.log(`‚úÖ ServiceRequest: ${verifyRequest?.type} - ${verifyRequest?.status}`);
    console.log(`‚úÖ YardSlot: ${verifySlot?.status} - ${verifySlot?.occupant_container_no}`);

    // 7. Cleanup
    console.log('\nüßπ Cleaning up test data...');
    await prisma.yardPlacement.deleteMany({ where: { container_no: testContainerNo } });
    await prisma.serviceRequest.deleteMany({ where: { container_no: testContainerNo } });
    await prisma.containerMeta.deleteMany({ where: { container_no: testContainerNo } });
    await prisma.yardSlot.update({
      where: { id: emptySlot.id },
      data: { 
        status: 'EMPTY',
        occupant_container_no: null
      }
    });
    console.log('‚úÖ Cleanup completed');

    console.log('\nüéâ Test completed successfully!');
    console.log('\nüìã Logic SystemAdmin ƒë√£ ƒë∆∞·ª£c s·ª≠a:');
    console.log('   ‚úÖ T·ª± ƒë·ªông t·∫°o ServiceRequest (EXPORT - IN_YARD)');
    console.log('   ‚úÖ C·∫≠p nh·∫≠t YardSlot (OCCUPIED)');
    console.log('   ‚úÖ C·∫≠p nh·∫≠t YardPlacement (OCCUPIED)');
    console.log('   ‚úÖ Container hi·ªÉn th·ªã trong ManagerCont');
    console.log('   ‚úÖ Container hi·ªÉn th·ªã trong LiftContainer');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
testSystemAdminLogic();

