const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function updateExportContainers() {
	try {
		console.log('üîÑ C·∫≠p nh·∫≠t containers EXPORT t·ª´ IN_YARD sang DONE_LIFTING');
		console.log('=' .repeat(60));

		// T√¨m t·∫•t c·∫£ EXPORT requests v·ªõi status IN_YARD
		const exportInYardRequests = await prisma.serviceRequest.findMany({
			where: { 
				type: 'EXPORT',
				status: 'IN_YARD'
			},
			orderBy: { createdAt: 'desc' }
		});

		console.log(`üìã T√¨m th·∫•y ${exportInYardRequests.length} EXPORT requests v·ªõi IN_YARD:`);
		exportInYardRequests.forEach((req, index) => {
			console.log(`   ${index + 1}. Container: ${req.container_no} (ID: ${req.id})`);
		});

		if (exportInYardRequests.length === 0) {
			console.log('‚úÖ Kh√¥ng c√≥ EXPORT requests n√†o c·∫ßn c·∫≠p nh·∫≠t');
			return;
		}

		console.log('\n' + '-'.repeat(40) + '\n');
		console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t...');

		// C·∫≠p nh·∫≠t t·ª´ng request t·ª´ IN_YARD sang DONE_LIFTING
		let successCount = 0;
		for (const request of exportInYardRequests) {
			try {
				const updatedRequest = await prisma.serviceRequest.update({
					where: { id: request.id },
					data: {
						status: 'DONE_LIFTING',
						updatedAt: new Date(),
						history: {
							...(request.history || {}),
							status_update: {
								previous_status: 'IN_YARD',
								new_status: 'DONE_LIFTING',
								updated_at: new Date().toISOString(),
								reason: 'Chuy·ªÉn tr·∫°ng th√°i cho quy tr√¨nh EXPORT: lo·∫°i b·ªè IN_YARD'
							}
						}
					}
				});

				console.log(`‚úÖ ${request.container_no}: IN_YARD ‚Üí DONE_LIFTING`);
				successCount++;
			} catch (error) {
				console.log(`‚ùå ${request.container_no}: L·ªói khi c·∫≠p nh·∫≠t -`, error.message);
			}
		}

		console.log('\n' + '='.repeat(60) + '\n');
		console.log('üìä K·∫æT QU·∫¢ C·∫¨P NH·∫¨T:');
		console.log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: ${successCount}/${exportInYardRequests.length}`);

		// Ki·ªÉm tra k·∫øt qu·∫£
		console.log('\nüîç Ki·ªÉm tra sau khi c·∫≠p nh·∫≠t:');
		const remainingInYard = await prisma.serviceRequest.findMany({
			where: { 
				type: 'EXPORT',
				status: 'IN_YARD'
			}
		});

		const doneLifting = await prisma.serviceRequest.findMany({
			where: { 
				type: 'EXPORT',
				status: 'DONE_LIFTING'
			}
		});

		console.log(`üìã EXPORT requests c√≤n IN_YARD: ${remainingInYard.length}`);
		console.log(`üìã EXPORT requests v·ªõi DONE_LIFTING: ${doneLifting.length}`);

		if (remainingInYard.length === 0) {
			console.log('‚úÖ T·∫•t c·∫£ EXPORT requests ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh DONE_LIFTING!');
		}

	} catch (error) {
		console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
	} finally {
		await prisma.$disconnect();
	}
}

// Ch·∫°y c·∫≠p nh·∫≠t
updateExportContainers();
