const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

async function analyzeFilledTemplate() {
  try {
    console.log('üìä PH√ÇN T√çCH FILE M·∫™U ƒê√É ƒêI·ªÄN S·∫¥N');
    console.log('=' .repeat(60));

    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file template ƒë√£ ƒëi·ªÅn s·∫µn
    const templatePath = path.join(__dirname, 'uploads/shipping-lines-eir/EIR_KMTU_1759511193505.xlsx');
    
    if (!fs.existsSync(templatePath)) {
      console.log('‚ùå File template ƒë√£ ƒëi·ªÅn s·∫µn kh√¥ng t·ªìn t·∫°i:', templatePath);
      return;
    }

    console.log('üìÅ Template path:', templatePath);

    // ƒê·ªçc template Excel v·ªõi ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);
    
    console.log('üìã Template structure loaded...');

    // L·∫•y worksheet ƒë·∫ßu ti√™n
    const worksheet = workbook.getWorksheet(1);
    console.log(`üìä Worksheet: ${worksheet.name}, c√≥ ${worksheet.rowCount} h√†ng, ${worksheet.columnCount} c·ªôt`);

    // Ph√¢n t√≠ch t·ª´ng h√†ng ƒë·ªÉ t√¨m v·ªã tr√≠ c√°c tr∆∞·ªùng
    console.log('\nüîç PH√ÇN T√çCH V·ªä TR√ç C√ÅC TR∆Ø·ªúNG:');
    console.log('=' .repeat(50));

    const fieldPositions = {};

    // Duy·ªát qua c√°c h√†ng ƒë·ªÉ t√¨m v·ªã tr√≠ c√°c tr∆∞·ªùng
    for (let rowNum = 1; rowNum <= Math.min(20, worksheet.rowCount); rowNum++) {
      const row = worksheet.getRow(rowNum);
      
      row.eachCell((cell, colNum) => {
        const cellValue = cell.value;
        
        if (typeof cellValue === 'string') {
          // T√¨m c√°c tr∆∞·ªùng quan tr·ªçng
          if (cellValue.includes('Giao cho') || cellValue.includes('Nh·∫≠n c·ªßa')) {
            fieldPositions.customer = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç Kh√°ch h√†ng: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('H√£ng t√†u') || cellValue.includes('h√£ng t√†u')) {
            fieldPositions.shipping_line = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç H√£ng t√†u: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('S·ªë container') || cellValue.includes('container')) {
            fieldPositions.container = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç S·ªë container: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('S·ªë seal') || cellValue.includes('seal')) {
            fieldPositions.seal = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç S·ªë seal: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('S·ªë xe') || cellValue.includes('xe')) {
            fieldPositions.vehicle = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç S·ªë xe: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('T√†i x·∫ø') || cellValue.includes('t√†i x·∫ø')) {
            fieldPositions.driver = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç T√†i x·∫ø: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('CMND') || cellValue.includes('cmnd')) {
            fieldPositions.driver_phone = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç CMND: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
          
          if (cellValue.includes('Ng√†y') && cellValue.includes('th√°ng') && cellValue.includes('nƒÉm')) {
            fieldPositions.date = { row: rowNum, col: colNum, value: cellValue };
            console.log(`   üìç Ng√†y: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
        }
      });
    }

    // T√¨m c√°c √¥ c√≥ d·ªØ li·ªáu th·ª±c t·∫ø (kh√¥ng ph·∫£i label)
    console.log('\nüìù T√åM C√ÅC √î C√ì D·ªÆ LI·ªÜU TH·ª∞C T·∫æ:');
    console.log('=' .repeat(50));

    for (let rowNum = 1; rowNum <= Math.min(20, worksheet.rowCount); rowNum++) {
      const row = worksheet.getRow(rowNum);
      
      row.eachCell((cell, colNum) => {
        const cellValue = cell.value;
        
        if (typeof cellValue === 'string' && cellValue.trim() !== '') {
          // Ki·ªÉm tra xem c√≥ ph·∫£i d·ªØ li·ªáu th·ª±c t·∫ø kh√¥ng (kh√¥ng ph·∫£i label)
          if (!cellValue.includes(':') && 
              !cellValue.includes('Giao cho') && 
              !cellValue.includes('H√£ng t√†u') && 
              !cellValue.includes('S·ªë container') && 
              !cellValue.includes('S·ªë seal') && 
              !cellValue.includes('S·ªë xe') && 
              !cellValue.includes('T√†i x·∫ø') && 
              !cellValue.includes('CMND') && 
              !cellValue.includes('Ng√†y') &&
              !cellValue.includes('PHI·∫æU') &&
              !cellValue.includes('C√îNG TY') &&
              !cellValue.includes('ƒê·ªãa ch·ªâ') &&
              !cellValue.includes('Tel') &&
              !cellValue.includes('MST') &&
              cellValue.length > 2) {
            
            console.log(`   üìç D·ªØ li·ªáu: H√†ng ${rowNum}, C·ªôt ${colNum} - "${cellValue}"`);
          }
        }
      });
    }

    // T·∫°o mapping d·ª±a tr√™n ph√¢n t√≠ch
    console.log('\nüéØ MAPPING ƒê∆Ø·ª¢C ƒê·ªÄ XU·∫§T:');
    console.log('=' .repeat(50));
    
    if (fieldPositions.customer) {
      console.log(`customer_name: { row: ${fieldPositions.customer.row}, col: ${fieldPositions.customer.col + 2}, description: 'T√™n kh√°ch h√†ng' },`);
    }
    if (fieldPositions.shipping_line) {
      console.log(`shipping_line: { row: ${fieldPositions.shipping_line.row}, col: ${fieldPositions.shipping_line.col + 2}, description: 'H√£ng t√†u' },`);
    }
    if (fieldPositions.container) {
      console.log(`container_no: { row: ${fieldPositions.container.row}, col: ${fieldPositions.container.col + 2}, description: 'S·ªë container' },`);
    }
    if (fieldPositions.seal) {
      console.log(`seal_number: { row: ${fieldPositions.seal.row}, col: ${fieldPositions.seal.col + 1}, description: 'S·ªë seal' },`);
    }
    if (fieldPositions.vehicle) {
      console.log(`vehicle_plate: { row: ${fieldPositions.vehicle.row}, col: ${fieldPositions.vehicle.col + 2}, description: 'S·ªë xe' },`);
    }
    if (fieldPositions.driver) {
      console.log(`driver_name: { row: ${fieldPositions.driver.row}, col: ${fieldPositions.driver.col + 1}, description: 'T√†i x·∫ø' },`);
    }
    if (fieldPositions.driver_phone) {
      console.log(`driver_phone: { row: ${fieldPositions.driver_phone.row}, col: ${fieldPositions.driver_phone.col + 1}, description: 'CMND/SƒêT t√†i x·∫ø' },`);
    }
    if (fieldPositions.date) {
      console.log(`date: { row: ${fieldPositions.date.row}, col: ${fieldPositions.date.col}, description: 'Ng√†y' },`);
    }

    console.log('\n‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!');
    console.log('üìã B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng mapping tr√™n ƒë·ªÉ c·∫≠p nh·∫≠t script fill-eir-with-mapping.js');

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch template:', error);
  }
}

analyzeFilledTemplate();
