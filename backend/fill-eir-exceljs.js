const { PrismaClient } = require('@prisma/client');
const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

const prisma = new PrismaClient();

async function fillEIRWithExcelJS() {
  try {
    console.log('üìÑ ƒêi·ªÅn th√¥ng tin container OO11 v√†o phi·∫øu EIR m·∫´u (s·ª≠ d·ª•ng ExcelJS)');
    console.log('=' .repeat(70));

    const containerNo = 'OO11';

    // L·∫•y th√¥ng tin ServiceRequest m·ªõi nh·∫•t (EXPORT v·ªõi status GATE_OUT)
    const latestRequest = await prisma.serviceRequest.findFirst({
      where: { 
        container_no: containerNo,
        type: 'EXPORT',
        status: 'GATE_OUT'
      },
      orderBy: { createdAt: 'desc' },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (!latestRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest EXPORT v·ªõi status GATE_OUT cho container OO11');
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y ServiceRequest:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.name || 'N/A'} (${latestRequest.shipping_line?.code || 'N/A'})`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - License plate: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - Driver name: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - Driver phone: ${latestRequest.driver_phone || 'N/A'}`);

    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file template EIR
    const templatePath = path.join(__dirname, 'uploads/shipping-lines-eir/EIR_KMTU_1759508813838.xlsx');
    
    if (!fs.existsSync(templatePath)) {
      console.log('‚ùå File template EIR kh√¥ng t·ªìn t·∫°i:', templatePath);
      return;
    }

    console.log('üìÅ Template path:', templatePath);

    // ƒê·ªçc template Excel v·ªõi ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);
    
    console.log('üìã Template structure loaded v·ªõi ExcelJS, gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng v√† logo...');

    // L·∫•y worksheet ƒë·∫ßu ti√™n
    const worksheet = workbook.getWorksheet(1);
    console.log(`üìä Worksheet: ${worksheet.name}, c√≥ ${worksheet.rowCount} h√†ng, ${worksheet.columnCount} c·ªôt`);

    // T√¨m v√† ƒëi·ªÅn th√¥ng tin v√†o c√°c √¥ c·ª• th·ªÉ
    let filledCells = 0;

    // Duy·ªát qua t·∫•t c·∫£ c√°c √¥ ƒë·ªÉ t√¨m v√† ƒëi·ªÅn th√¥ng tin
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell, colNumber) => {
        const cellValue = cell.value;
        
        if (typeof cellValue === 'string') {
          // T√¨m v√† ƒëi·ªÅn th√¥ng tin kh√°ch h√†ng
          if (cellValue.includes('Giao cho/Nh·∫≠n c·ªßa') || cellValue.includes('Giao cho')) {
            const customerCell = worksheet.getCell(rowNumber, colNumber + 2);
            customerCell.value = latestRequest.customer?.name || 'C√îNG TY TNHH FORD VI·ªÜT NAM';
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn kh√°ch h√†ng: ${customerCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn s·ªë container
          if (cellValue.includes('S·ªë container') || cellValue.includes('container')) {
            const containerCell = worksheet.getCell(rowNumber, colNumber + 2);
            containerCell.value = latestRequest.container_no;
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn s·ªë container: ${containerCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn s·ªë seal
          if (cellValue.includes('S·ªë seal') || cellValue.includes('seal')) {
            const sealCell = worksheet.getCell(rowNumber, colNumber + 1);
            sealCell.value = latestRequest.seal_number || '';
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn s·ªë seal: ${sealCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn s·ªë xe
          if (cellValue.includes('S·ªë xe') || cellValue.includes('xe')) {
            const vehicleCell = worksheet.getCell(rowNumber, colNumber + 2);
            vehicleCell.value = latestRequest.license_plate || '67H-395.20';
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn s·ªë xe: ${vehicleCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn t√†i x·∫ø
          if (cellValue.includes('T√†i x·∫ø') || cellValue.includes('t√†i x·∫ø')) {
            const driverCell = worksheet.getCell(rowNumber, colNumber + 1);
            driverCell.value = `T√†i x·∫ø: ${latestRequest.driver_name || 'Tr·∫ßn Th·ªã B√¨nh'}`;
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn t√†i x·∫ø: ${driverCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn CMND
          if (cellValue.includes('CMND') || cellValue.includes('cmnd')) {
            const cmndCell = worksheet.getCell(rowNumber, colNumber + 1);
            cmndCell.value = `CMND: ${latestRequest.driver_phone || '714529869'}`;
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn CMND: ${cmndCell.value}`);
          }
          
          // T√¨m v√† ƒëi·ªÅn ng√†y
          if (cellValue.includes('Ng√†y') && cellValue.includes('th√°ng') && cellValue.includes('nƒÉm')) {
            const currentDate = new Date();
            const day = currentDate.getDate();
            const month = currentDate.getMonth() + 1;
            const year = currentDate.getFullYear();
            cell.value = `Ng√†y ${day} th√°ng ${month} nƒÉm ${year}`;
            filledCells++;
            console.log(`   ‚úÖ ƒêi·ªÅn ng√†y: ${cell.value}`);
          }
        }
      });
    });

    console.log(`üìä ƒê√£ ƒëi·ªÅn ${filledCells} √¥ d·ªØ li·ªáu`);

    // T·∫°o t√™n file
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const filename = `EIR_OO11_EXCELJS_${timestamp}.xlsx`;

    // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    const outputDir = path.join(__dirname, 'uploads/generated-eir');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const outputPath = path.join(outputDir, filename);

    // Ghi file v·ªõi ExcelJS (gi·ªØ nguy√™n t·∫•t c·∫£ ƒë·ªãnh d·∫°ng)
    await workbook.xlsx.writeFile(outputPath);

    console.log('‚úÖ Phi·∫øu EIR ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn th√¥ng tin th√†nh c√¥ng v·ªõi ExcelJS!');
    console.log(`üìÅ File: ${outputPath}`);
    console.log(`üìÑ Filename: ${filename}`);

    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
    console.log('\nüìã Th√¥ng tin ƒë√£ ƒëi·ªÅn v√†o phi·∫øu EIR:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.name || 'N/A'} (${latestRequest.shipping_line?.code || 'N/A'})`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - S·ªë xe: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - T√†i x·∫ø: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - SƒêT t√†i x·∫ø: ${latestRequest.driver_phone || 'N/A'}`);

    console.log('\nüéØ ∆Øu ƒëi·ªÉm c·ªßa ExcelJS:');
    console.log('   - Gi·ªØ nguy√™n logo v√† h√¨nh ·∫£nh');
    console.log('   - Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng cells (font, m√†u s·∫Øc, border)');
    console.log('   - Gi·ªØ nguy√™n c√¥ng th·ª©c Excel');
    console.log('   - Gi·ªØ nguy√™n merged cells');
    console.log('   - Gi·ªØ nguy√™n charts v√† objects');

  } catch (error) {
    console.error('‚ùå L·ªói khi ƒëi·ªÅn th√¥ng tin v√†o phi·∫øu EIR:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fillEIRWithExcelJS();
