const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixSystemAdminContainers() {
  try {
    console.log('üîß S·ª≠a l·∫°i c√°c container ƒë∆∞·ª£c SystemAdmin ƒë·∫∑t v√†o b√£i');
    console.log('=' .repeat(70));

    const containersToFix = ['SA10', 'SB10'];

    for (const containerNo of containersToFix) {
      console.log(`\nüì¶ S·ª≠a container ${containerNo}:`);

      // 1. Ki·ªÉm tra YardPlacement
      const yardPlacement = await prisma.yardPlacement.findFirst({
        where: { 
          container_no: containerNo,
          status: 'OCCUPIED'
        },
        include: {
          slot: {
            include: {
              block: {
                include: {
                  yard: true
                }
              }
            }
          }
        }
      });

      if (!yardPlacement) {
        console.log(`   ‚ùå Kh√¥ng t√¨m th·∫•y YardPlacement cho ${containerNo}`);
        continue;
      }

      console.log(`   üìç V·ªã tr√≠: ${yardPlacement.slot?.block?.yard?.name || 'N/A'} - ${yardPlacement.slot?.block?.code || 'N/A'} - ${yardPlacement.slot?.code || 'N/A'}`);
      console.log(`   üì¶ YardPlacement: ${yardPlacement.status}, Tier ${yardPlacement.tier}`);

      // 2. C·∫≠p nh·∫≠t YardSlot
      const updatedSlot = await prisma.yardSlot.update({
        where: { id: yardPlacement.slot_id },
        data: {
          status: 'OCCUPIED',
          occupant_container_no: containerNo
        }
      });

      console.log(`   ‚úÖ YardSlot: ${yardPlacement.slot?.status || 'N/A'} ‚Üí ${updatedSlot.status}`);

      // 3. T·∫°o ServiceRequest
      const currentTime = new Date();
      
      const serviceRequest = await prisma.serviceRequest.create({
        data: {
          container_no: containerNo,
          type: 'EXPORT', // SystemAdmin ƒë·∫∑t container v√†o b√£i = EXPORT (N√ÇNG)
          status: 'IN_YARD', // Container ·ªü trong b√£i, ch·ªù n√¢ng
          created_by: 'SYSTEM_FIX',
          createdAt: currentTime,
          updatedAt: currentTime,
          history: {
            created_by_systemadmin: {
              reason: 'Container ƒë∆∞·ª£c SystemAdmin ƒë·∫∑t tr·ª±c ti·∫øp v√†o b√£i',
              created_at: currentTime.toISOString(),
              yard: yardPlacement.slot?.block?.yard?.name || 'N/A',
              block: yardPlacement.slot?.block?.code || 'N/A',
              slot: yardPlacement.slot?.code || 'N/A',
              tier: yardPlacement.tier
            }
          }
        }
      });

      console.log(`   ‚úÖ ServiceRequest: ${serviceRequest.type} - ${serviceRequest.status}`);
      console.log(`   ‚úÖ Container ${containerNo} ƒë√£ ƒë∆∞·ª£c s·ª≠a ho√†n ch·ªânh!`);
    }

    console.log('\n' + '=' .repeat(70));
    console.log('üéâ HO√ÄN TH√ÄNH: T·∫•t c·∫£ container SystemAdmin ƒë√£ ƒë∆∞·ª£c s·ª≠a!');
    console.log('\nüìã K·∫øt qu·∫£:');
    console.log('   ‚úÖ YardSlot: EMPTY ‚Üí OCCUPIED');
    console.log('   ‚úÖ ServiceRequest: EXPORT - IN_YARD');
    console.log('   ‚úÖ Container hi·ªÉn th·ªã trong LiftContainer');
    console.log('   ‚úÖ Container KH√îNG hi·ªÉn th·ªã trong LowerContainer');
    console.log('   ‚úÖ Logic nh·∫•t qu√°n v·ªõi quy tr√¨nh EXPORT');

  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a container:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// S·ª≠a container SystemAdmin
fixSystemAdminContainers();

