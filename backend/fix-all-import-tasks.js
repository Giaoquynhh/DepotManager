const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixAllImportTasks() {
    try {
        console.log('üîß Fixing all IMPORT tasks without fixed location...');
        
        // 1. T√¨m t·∫•t c·∫£ task IMPORT ƒë√£ completed nh∆∞ng ch∆∞a c√≥ fixed_location_slot_id
        const tasksToFix = await prisma.forkliftTask.findMany({
            where: {
                status: 'COMPLETED',
                fixed_location_slot_id: null,
                to_slot_id: { not: null }
            },
            include: {
                to_slot: {
                    include: {
                        block: {
                            include: {
                                yard: true
                            }
                        }
                    }
                }
            }
        });
        
        console.log(`üìã Found ${tasksToFix.length} tasks to check...`);
        
        let fixedCount = 0;
        let skippedCount = 0;
        
        for (const task of tasksToFix) {
            console.log(`\nüîç Checking task ${task.id} (${task.container_no})...`);
            
            // 2. T√¨m ServiceRequest t∆∞∆°ng ·ª©ng ƒë·ªÉ ki·ªÉm tra type
            const requests = await prisma.serviceRequest.findMany({
                where: { container_no: task.container_no },
                orderBy: { createdAt: 'desc' }
            });
            
            if (requests.length === 0) {
                console.log(`   ‚ö†Ô∏è  No service request found for ${task.container_no}`);
                skippedCount++;
                continue;
            }
            
            // 3. T√¨m request g·∫ßn nh·∫•t v·ªõi task
            const taskCreatedAt = task.createdAt;
            let closestRequest = requests[0];
            let minTimeDiff = Math.abs(taskCreatedAt.getTime() - requests[0].createdAt.getTime());
            
            for (const request of requests) {
                const timeDiff = Math.abs(taskCreatedAt.getTime() - request.createdAt.getTime());
                if (timeDiff < minTimeDiff) {
                    minTimeDiff = timeDiff;
                    closestRequest = request;
                }
            }
            
            console.log(`   üìã Matched request: ${closestRequest.type} (${closestRequest.status})`);
            
            // 4. Ch·ªâ fix cho IMPORT request
            if (closestRequest.type === 'IMPORT') {
                console.log(`   ‚úÖ IMPORT request - should fix fixed location`);
                console.log(`   üìç To slot: ${task.to_slot_id}`);
                console.log(`   üìç Location: ${task.to_slot.block.yard.name} / ${task.to_slot.block.code} / ${task.to_slot.code}`);
                
                // C·∫≠p nh·∫≠t fixed_location_slot_id
                await prisma.forkliftTask.update({
                    where: { id: task.id },
                    data: { 
                        fixed_location_slot_id: task.to_slot_id
                    }
                });
                
                console.log(`   ‚úÖ Fixed!`);
                fixedCount++;
            } else {
                console.log(`   ‚è≠Ô∏è  EXPORT request - skip (no fixed location needed)`);
                skippedCount++;
            }
        }
        
        console.log(`\nüìä Summary:`);
        console.log(`   ‚úÖ Fixed: ${fixedCount} IMPORT tasks`);
        console.log(`   ‚è≠Ô∏è  Skipped: ${skippedCount} tasks (EXPORT or no request)`);
        console.log(`   üìã Total checked: ${tasksToFix.length} tasks`);
        
        // 5. Verify fixes
        console.log(`\nüîç Verifying fixes...`);
        const fixedTasks = await prisma.forkliftTask.findMany({
            where: {
                status: 'COMPLETED',
                fixed_location_slot_id: { not: null }
            },
            include: {
                fixed_location_slot: {
                    include: {
                        block: {
                            include: {
                                yard: true
                            }
                        }
                    }
                }
            }
        });
        
        console.log(`‚úÖ Total tasks with fixed location: ${fixedTasks.length}`);
        
        // Hi·ªÉn th·ªã m·ªôt v√†i v√≠ d·ª•
        console.log(`\nüìã Examples of fixed tasks:`);
        fixedTasks.slice(0, 5).forEach((task, index) => {
            console.log(`   ${index + 1}. ${task.container_no}: ${task.fixed_location_slot.block.yard.name} / ${task.fixed_location_slot.block.code} / ${task.fixed_location_slot.code}`);
        });
        
        console.log(`\n‚úÖ All IMPORT tasks fixed successfully!`);
        
    } catch (error) {
        console.error('‚ùå Fix failed:', error);
    } finally {
        await prisma.$disconnect();
    }
}

fixAllImportTasks();
