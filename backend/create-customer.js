const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// T·∫°o customer th·ª±c t·∫ø
async function createCustomer() {
  console.log('üß™ T·∫°o customer th·ª±c t·∫ø...');
  
  try {
    // T·∫°o customer m·ªõi
    const customer = await prisma.customer.create({
      data: {
        name: 'Smartlog Container Company',
        tax_code: '0123456789',
        address: '123 Container Street, Ho Chi Minh City',
        contact_email: 'info@smartlog.com',
        status: 'ACTIVE'
      }
    });
    
    console.log('‚úÖ Customer ƒë√£ ƒë∆∞·ª£c t·∫°o:', customer);
    
    // C·∫≠p nh·∫≠t h√≥a ƒë∆°n hi·ªán c√≥ ƒë·ªÉ s·ª≠ d·ª•ng customer m·ªõi
    const updatedInvoice = await prisma.invoice.update({
      where: { id: 'cmeykxwn0000582al1o37iqrl' },
      data: {
        customer_id: customer.id
      }
    });
    
    console.log('‚úÖ H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:', updatedInvoice.id);
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    const finalInvoice = await prisma.invoice.findUnique({
      where: { id: 'cmeykxwn0000582al1o37iqrl' },
      include: {
        serviceRequest: {
          select: {
            container_no: true,
            type: true,
            tenant_id: true
          }
        }
      }
    });
    
    console.log('\nüéØ K·∫øt qu·∫£ cu·ªëi c√πng:');
    console.log(`  - Invoice ID: ${finalInvoice.id}`);
    console.log(`  - Customer ID: ${finalInvoice.customer_id}`);
    console.log(`  - Container: ${finalInvoice.serviceRequest?.container_no}`);
    console.log(`  - Tenant ID: ${finalInvoice.serviceRequest?.tenant_id}`);
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
createCustomer();
