const { PrismaClient } = require('@prisma/client');
const XLSX = require('xlsx');
const path = require('path');
const fs = require('fs');

const prisma = new PrismaClient();

async function generateEIRForOO11() {
  try {
    console.log('üìÑ T·∫°o phi·∫øu EIR cho container OO11');
    console.log('=' .repeat(60));

    const containerNo = 'OO11';

    // L·∫•y th√¥ng tin ServiceRequest m·ªõi nh·∫•t (EXPORT v·ªõi status GATE_OUT)
    const latestRequest = await prisma.serviceRequest.findFirst({
      where: { 
        container_no: containerNo,
        type: 'EXPORT',
        status: 'GATE_OUT'
      },
      orderBy: { createdAt: 'desc' },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (!latestRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest EXPORT v·ªõi status GATE_OUT cho container OO11');
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y ServiceRequest:');
    console.log(`   - ID: ${latestRequest.id}`);
    console.log(`   - Type: ${latestRequest.type}`);
    console.log(`   - Status: ${latestRequest.status}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.name || 'N/A'}`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - License plate: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - Driver name: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - Driver phone: ${latestRequest.driver_phone || 'N/A'}`);

    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file template EIR
    const templatePath = path.join(__dirname, 'uploads/shipping-lines-eir/EIR_KMTU_1759508813838.xlsx');
    
    if (!fs.existsSync(templatePath)) {
      console.log('‚ùå File template EIR kh√¥ng t·ªìn t·∫°i:', templatePath);
      return;
    }

    console.log('üìÅ Template path:', templatePath);

    // ƒê·ªçc template Excel
    const workbook = XLSX.readFile(templatePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    console.log('üìã Template structure loaded');

    // T·∫°o d·ªØ li·ªáu m·ªõi v·ªõi th√¥ng tin container
    const currentDate = new Date();
    const day = currentDate.getDate();
    const month = currentDate.getMonth() + 1;
    const year = currentDate.getFullYear();
    
    const worksheetData = [
      // Row 1: T√™n c√¥ng ty
      ['', 'C√îNG TY C·ªî PH·∫¶N LOGISTICS TH√ÅI B√åNH', '', '', '', '', '', '', '', ''],
      
      // Row 2: ƒê·ªãa ch·ªâ
      ['', 'ƒê·ªãa ch·ªâ: KCN Th√°i B√¨nh, Ph∆∞·ªùng Tr·∫ßn L√£m, TP.Th√°i B√¨nh, T·ªânh Th√°i B√¨nh', '', '', '', '', '', '', '', ''],
      
      // Row 3: Tel v√† MST
      ['', 'Tel: 0227.3745.678        MST: 3701587234', '', '', '', '', '', '', '', ''],
      
      // Row 4: Ti√™u ƒë·ªÅ
      ['', '', '', '', 'PHI·∫æU TH√îNG TIN CONTAINER', '', '', '', '', ''],
      
      // Row 5: Ng√†y
      ['', '', '', '', '', '', '', '', `Ng√†y ${day} th√°ng ${month} nƒÉm ${year}`, ''],
      
      // Row 6: Giao cho/Nh·∫≠n c·ªßa
      ['Giao cho/Nh·∫≠n c·ªßa:', '', latestRequest.customer?.name || 'C√îNG TY TNHH FORD VI·ªÜT NAM', '', '', '', '', '', '', ''],
      
      // Row 7: H√£ng t√†u v√† T√°c nghi·ªáp
      ['H√£ng t√†u:', '', latestRequest.shipping_line?.code || 'KMTU', '', '', '', '', '', '', 'T√°c nghi·ªáp:'],
      
      // Row 8: S·ªë container, seal, booking
      ['S·ªë container:', '', latestRequest.container_no, '', '', '', '', '', 'S·ªë seal:', latestRequest.seal_number || ''],
      
      // Row 9: Ghi ch√∫
      ['GHI CH√ö\nEMPTY', '', '', '', '', '', '', '', '', ''],
      
      // Row 10: S·ªë xe
      ['S·ªë xe:', '', latestRequest.license_plate || '67H-395.20', '', '', '', '', '', '', ''],
      
      // Row 11: T√†i x·∫ø v√† CMND
      [`T√†i x·∫ø: ${latestRequest.driver_name || 'Tr·∫ßn Th·ªã B√¨nh'}`, '', '', '', '', '', `CMND: ${latestRequest.driver_phone || '714529869'}`, '', '', ''],
      
      // Row 12: Nh√¢n vi√™n giao nh·∫≠n
      ['Nh√¢n vi√™n giao nh·∫≠n\nGate Check', '', '', '', '', '', 'Nh√¢n vi√™n ki·ªÉm h√†ng\nYard Check', '', '', '']
    ];

    // T·∫°o workbook m·ªõi
    const newWorkbook = XLSX.utils.book_new();
    const newWorksheet = XLSX.utils.aoa_to_sheet(worksheetData);
    
    // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
    newWorksheet['!cols'] = [
      { width: 15 }, // A
      { width: 20 }, // B
      { width: 15 }, // C
      { width: 15 }, // D
      { width: 20 }, // E
      { width: 15 }, // F
      { width: 15 }, // G
      { width: 15 }, // H
      { width: 20 }, // I
      { width: 15 }  // J
    ];

    // Thi·∫øt l·∫≠p ƒë·ªô cao h√†ng
    newWorksheet['!rows'] = [
      { height: 25 }, // Row 1
      { height: 25 }, // Row 2
      { height: 25 }, // Row 3
      { height: 30 }, // Row 4
      { height: 25 }, // Row 5
      { height: 25 }, // Row 6
      { height: 25 }, // Row 7
      { height: 25 }, // Row 8
      { height: 30 }, // Row 9
      { height: 25 }, // Row 10
      { height: 25 }, // Row 11
      { height: 30 }  // Row 12
    ];

    // Merge cells cho ti√™u ƒë·ªÅ
    newWorksheet['!merges'] = [
      { s: { r: 0, c: 1 }, e: { r: 0, c: 9 } }, // Row 1: T√™n c√¥ng ty
      { s: { r: 1, c: 1 }, e: { r: 1, c: 9 } }, // Row 2: ƒê·ªãa ch·ªâ
      { s: { r: 2, c: 1 }, e: { r: 2, c: 9 } }, // Row 3: Tel v√† MST
      { s: { r: 3, c: 4 }, e: { r: 3, c: 5 } }, // Row 4: Ti√™u ƒë·ªÅ
      { s: { r: 4, c: 7 }, e: { r: 4, c: 8 } }, // Row 5: Ng√†y
      { s: { r: 5, c: 1 }, e: { r: 5, c: 3 } }, // Row 6: Giao cho/Nh·∫≠n c·ªßa
      { s: { r: 6, c: 1 }, e: { r: 6, c: 3 } }, // Row 7: H√£ng t√†u
      { s: { r: 6, c: 9 }, e: { r: 6, c: 9 } }, // Row 7: T√°c nghi·ªáp
      { s: { r: 7, c: 1 }, e: { r: 7, c: 3 } }, // Row 8: S·ªë container
      { s: { r: 7, c: 7 }, e: { r: 7, c: 8 } }, // Row 8: S·ªë seal
      { s: { r: 8, c: 0 }, e: { r: 8, c: 2 } }, // Row 9: Ghi ch√∫
      { s: { r: 9, c: 1 }, e: { r: 9, c: 3 } }, // Row 10: S·ªë xe
      { s: { r: 10, c: 0 }, e: { r: 10, c: 3 } }, // Row 11: T√†i x·∫ø
      { s: { r: 10, c: 6 }, e: { r: 10, c: 8 } }, // Row 11: CMND
      { s: { r: 11, c: 0 }, e: { r: 11, c: 2 } }, // Row 12: Nh√¢n vi√™n giao nh·∫≠n
      { s: { r: 11, c: 6 }, e: { r: 11, c: 8 } }  // Row 12: Nh√¢n vi√™n ki·ªÉm h√†ng
    ];

    // Th√™m worksheet v√†o workbook
    XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, 'EIR');

    // T·∫°o t√™n file
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const filename = `EIR_OO11_${timestamp}.xlsx`;

    // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    const outputDir = path.join(__dirname, 'uploads/generated-eir');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const outputPath = path.join(outputDir, filename);

    // Ghi file
    XLSX.writeFile(newWorkbook, outputPath);

    console.log('‚úÖ Phi·∫øu EIR ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
    console.log(`üìÅ File: ${outputPath}`);
    console.log(`üìÑ Filename: ${filename}`);

    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
    console.log('\nüìã Th√¥ng tin phi·∫øu EIR:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.name || 'N/A'} (${latestRequest.shipping_line?.code || 'N/A'})`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - S·ªë xe: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - T√†i x·∫ø: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - SƒêT t√†i x·∫ø: ${latestRequest.driver_phone || 'N/A'}`);
    console.log(`   - Ng√†y t·∫°o: ${day}/${month}/${year}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o phi·∫øu EIR:', error);
  } finally {
    await prisma.$disconnect();
  }
}

generateEIRForOO11();

