const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testContainerValidation() {
    try {
        console.log('üß™ TEST CONTAINER VALIDATION LOGIC M·ªöI');
        console.log('=' .repeat(60));

        const testContainerNo = 'TEST123';

        // Test Case 1: Container kh√¥ng t·ªìn t·∫°i - n√™n cho ph√©p t·∫°o IMPORT request
        console.log('\n1. Test Case: Container kh√¥ng t·ªìn t·∫°i');
        const nonExistentCheck = await checkContainerForImport(testContainerNo);
        console.log(`   Container ${testContainerNo}: ${nonExistentCheck.allowed ? '‚úÖ Cho ph√©p' : '‚ùå Kh√¥ng cho ph√©p'}`);
        if (!nonExistentCheck.allowed) {
            console.log(`   L√Ω do: ${nonExistentCheck.reason}`);
        }

        // Test Case 2: Container c√≥ EXPORT request v·ªõi status IN_CAR - kh√¥ng cho ph√©p t·∫°o IMPORT
        console.log('\n2. Test Case: Container c√≥ EXPORT request v·ªõi status IN_CAR');
        
        // T·∫°o EXPORT request v·ªõi status IN_CAR
        const exportRequest = await prisma.serviceRequest.create({
            data: {
                type: 'EXPORT',
                container_no: testContainerNo,
                status: 'IN_CAR',
                request_no: 'EXPORT_TEST_001',
                created_by: 'test_user',
                history: [{ at: new Date().toISOString(), by: 'test_user', action: 'CREATE' }]
            }
        });
        console.log(`   ƒê√£ t·∫°o EXPORT request: ${exportRequest.id} v·ªõi status IN_CAR`);

        const inCarCheck = await checkContainerForImport(testContainerNo);
        console.log(`   Container ${testContainerNo}: ${inCarCheck.allowed ? '‚úÖ Cho ph√©p' : '‚ùå Kh√¥ng cho ph√©p'}`);
        if (!inCarCheck.allowed) {
            console.log(`   L√Ω do: ${inCarCheck.reason}`);
        }

        // Test Case 3: C·∫≠p nh·∫≠t EXPORT request th√†nh GATE_OUT - n√™n cho ph√©p t·∫°o IMPORT
        console.log('\n3. Test Case: C·∫≠p nh·∫≠t EXPORT request th√†nh GATE_OUT');
        await prisma.serviceRequest.update({
            where: { id: exportRequest.id },
            data: { 
                status: 'GATE_OUT',
                history: [{ at: new Date().toISOString(), by: 'test_user', action: 'UPDATE_STATUS' }]
            }
        });
        console.log(`   ƒê√£ c·∫≠p nh·∫≠t EXPORT request th√†nh GATE_OUT`);

        const gateOutCheck = await checkContainerForImport(testContainerNo);
        console.log(`   Container ${testContainerNo}: ${gateOutCheck.allowed ? '‚úÖ Cho ph√©p' : '‚ùå Kh√¥ng cho ph√©p'}`);
        if (!gateOutCheck.allowed) {
            console.log(`   L√Ω do: ${gateOutCheck.reason}`);
        }

        // Test Case 4: T·∫°o IMPORT request - n√™n th√†nh c√¥ng
        console.log('\n4. Test Case: T·∫°o IMPORT request');
        try {
            const importRequest = await prisma.serviceRequest.create({
                data: {
                    type: 'IMPORT',
                    container_no: testContainerNo,
                    status: 'PENDING',
                    request_no: 'IMPORT_TEST_001',
                    created_by: 'test_user',
                    history: [{ at: new Date().toISOString(), by: 'test_user', action: 'CREATE' }]
                }
            });
            console.log(`   ‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng IMPORT request: ${importRequest.id}`);
        } catch (error) {
            console.log(`   ‚ùå L·ªói khi t·∫°o IMPORT request: ${error.message}`);
        }

        // Test Case 5: Th·ª≠ t·∫°o IMPORT request th·ª© 2 - n√™n b·ªã t·ª´ ch·ªëi
        console.log('\n5. Test Case: Th·ª≠ t·∫°o IMPORT request th·ª© 2');
        const secondImportCheck = await checkContainerForImport(testContainerNo);
        console.log(`   Container ${testContainerNo}: ${secondImportCheck.allowed ? '‚úÖ Cho ph√©p' : '‚ùå Kh√¥ng cho ph√©p'}`);
        if (!secondImportCheck.allowed) {
            console.log(`   L√Ω do: ${secondImportCheck.reason}`);
        }
        
        try {
            const importRequest2 = await prisma.serviceRequest.create({
                data: {
                    type: 'IMPORT',
                    container_no: testContainerNo,
                    status: 'PENDING',
                    request_no: 'IMPORT_TEST_002',
                    created_by: 'test_user',
                    history: [{ at: new Date().toISOString(), by: 'test_user', action: 'CREATE' }]
                }
            });
            console.log(`   ‚ùå Kh√¥ng n√™n t·∫°o ƒë∆∞·ª£c IMPORT request th·ª© 2: ${importRequest2.id}`);
        } catch (error) {
            console.log(`   ‚úÖ ƒê√∫ng r·ªìi, b·ªã t·ª´ ch·ªëi: ${error.message}`);
        }

        // Cleanup
        console.log('\nüßπ Cleanup test data...');
        await prisma.serviceRequest.deleteMany({
            where: { container_no: testContainerNo }
        });
        console.log('   ‚úÖ ƒê√£ x√≥a test data');

        console.log('\n‚úÖ Test ho√†n th√†nh!');

    } catch (error) {
        console.error('‚ùå Test error:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Function ƒë·ªÉ ki·ªÉm tra container c√≥ th·ªÉ t·∫°o IMPORT request kh√¥ng
async function checkContainerForImport(containerNo) {
    // B·ªî SUNG: Ki·ªÉm tra container c√≥ EXPORT request v·ªõi tr·∫°ng th√°i kh√°c GATE_OUT kh√¥ng
    const activeExportRequest = await prisma.serviceRequest.findFirst({
        where: {
            container_no: containerNo,
            type: 'EXPORT',
            status: {
                notIn: ['COMPLETED', 'REJECTED', 'GATE_REJECTED', 'GATE_OUT']
            }
        },
        orderBy: { createdAt: 'desc' }
    });

    // N·∫øu c√≥ EXPORT request v·ªõi tr·∫°ng th√°i kh√°c GATE_OUT, kh√¥ng cho ph√©p t·∫°o IMPORT request
    if (activeExportRequest) {
        return {
            allowed: false,
            reason: `Container ${containerNo} ƒëang c√≥ EXPORT request v·ªõi tr·∫°ng th√°i ${activeExportRequest.status} (kh√°c GATE_OUT). Kh√¥ng th·ªÉ t·∫°o IMPORT request m·ªõi.`
        };
    }

    // Ki·ªÉm tra container c√≥ IMPORT request ƒëang active kh√¥ng
    const activeImportRequest = await prisma.serviceRequest.findFirst({
        where: {
            container_no: containerNo,
            type: 'IMPORT',
            status: {
                notIn: ['COMPLETED', 'REJECTED', 'GATE_REJECTED']
            }
        },
        orderBy: { createdAt: 'desc' }
    });

    // N·∫øu c√≥ container IMPORT ƒëang active, kh√¥ng cho ph√©p t·∫°o IMPORT request m·ªõi
    if (activeImportRequest) {
        return {
            allowed: false,
            reason: `Container ${containerNo} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng v·ªõi tr·∫°ng th√°i ${activeImportRequest.status} (IMPORT). Ch·ªâ c√≥ th·ªÉ t·∫°o request m·ªõi khi container kh√¥ng c√≤n trong h·ªá th·ªëng.`
        };
    }

    // Container kh√¥ng t·ªìn t·∫°i - c√≥ th·ªÉ t·∫°o request m·ªõi
    return {
        allowed: true,
        reason: `Container ${containerNo} c√≥ th·ªÉ t·∫°o request m·ªõi`
    };
}

// Ch·∫°y test
testContainerValidation();
