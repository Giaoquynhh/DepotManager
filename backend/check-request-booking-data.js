const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkRequestBookingData() {
  try {
    console.log('üîç KI·ªÇM TRA D·ªÆ LI·ªÜU BOOKING C·ª¶A REQUEST');
    console.log('=' .repeat(60));

    const requestNumber = 'NA03102500004';

    // T√¨m request theo request_no
    const request = await prisma.serviceRequest.findFirst({
      where: {
        OR: [
          { request_no: requestNumber },
          { id: requestNumber }
        ]
      },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (!request) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y request v·ªõi s·ªë y√™u c·∫ßu: ${requestNumber}`);
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y request:');
    console.log(`   - Request ID: ${request.id}`);
    console.log(`   - Request No: ${request.request_no}`);
    console.log(`   - Container: ${request.container_no}`);
    console.log(`   - Type: ${request.type}`);
    console.log(`   - Status: ${request.status}`);
    console.log(`   - Created At: ${request.createdAt}`);
    console.log(`   - Updated At: ${request.updatedAt}`);

    console.log('\nüìã TH√îNG TIN CHI TI·∫æT:');
    console.log('=' .repeat(50));
    console.log(`   - Customer: ${request.customer?.name || 'N/A'}`);
    console.log(`   - Shipping Line: ${request.shipping_line?.name || 'N/A'}`);
    console.log(`   - Container Type: ${request.container_type?.description || 'N/A'}`);

    console.log('\nüîç KI·ªÇM TRA C√ÅC TR∆Ø·ªúNG BOOKING:');
    console.log('=' .repeat(50));
    console.log(`   - booking_number: "${request.booking_number || 'NULL'}"`);
    console.log(`   - booking_reference: "${request.booking_reference || 'NULL'}"`);
    console.log(`   - bill_of_lading: "${request.bill_of_lading || 'NULL'}"`);
    console.log(`   - booking_id: "${request.booking_id || 'NULL'}"`);

    // Ki·ªÉm tra t·∫•t c·∫£ c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a th√¥ng tin booking
    console.log('\nüìä T·∫§T C·∫¢ C√ÅC TR∆Ø·ªúNG C·ª¶A REQUEST:');
    console.log('=' .repeat(50));
    Object.keys(request).forEach(key => {
      if (request[key] !== null && request[key] !== undefined) {
        console.log(`   - ${key}: ${request[key]}`);
      }
    });

    // Ki·ªÉm tra xem c√≥ request n√†o kh√°c c√≥ booking kh√¥ng
    console.log('\nüîç KI·ªÇM TRA C√ÅC REQUEST KH√ÅC C√ì BOOKING:');
    console.log('=' .repeat(50));
    
    const requestsWithBooking = await prisma.serviceRequest.findMany({
      where: {
        booking_number: {
          not: null
        }
      },
      select: {
        id: true,
        request_no: true,
        container_no: true,
        type: true,
        booking_number: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    if (requestsWithBooking.length > 0) {
      console.log(`   T√¨m th·∫•y ${requestsWithBooking.length} request c√≥ booking:`);
      requestsWithBooking.forEach(req => {
        console.log(`   - ${req.request_no} (${req.container_no}): "${req.booking_number}"`);
      });
    } else {
      console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y request n√†o c√≥ booking_number');
    }

    // Ki·ªÉm tra schema ƒë·ªÉ xem c√≥ tr∆∞·ªùng n√†o kh√°c kh√¥ng
    console.log('\nüîç KI·ªÇM TRA SCHEMA C·ª¶A SERVICEREQUEST:');
    console.log('=' .repeat(50));
    
    // L·∫•y m·ªôt request m·∫´u ƒë·ªÉ xem t·∫•t c·∫£ c√°c tr∆∞·ªùng
    const sampleRequest = await prisma.serviceRequest.findFirst({
      select: {
        id: true,
        request_no: true,
        container_no: true,
        type: true,
        status: true,
        booking_number: true,
        booking_reference: true,
        bill_of_lading: true,
        booking_id: true,
        notes: true,
        createdAt: true,
        updatedAt: true
      }
    });

    if (sampleRequest) {
      console.log('   C√°c tr∆∞·ªùng c√≥ s·∫µn trong ServiceRequest:');
      Object.keys(sampleRequest).forEach(key => {
        console.log(`   - ${key}: ${sampleRequest[key]}`);
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu booking:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkRequestBookingData();
