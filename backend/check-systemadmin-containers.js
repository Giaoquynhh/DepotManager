const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkSystemAdminContainers() {
  try {
    console.log('üîç Ki·ªÉm tra c√°c container ƒë∆∞·ª£c SystemAdmin ƒë·∫∑t tr·ª±c ti·∫øp v√†o b√£i');
    console.log('=' .repeat(80));

    // 1. Ki·ªÉm tra YardPlacement ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin
    const systemAdminPlacements = await prisma.yardPlacement.findMany({
      where: { 
        created_by: 'SYSTEM_FIX' // Ho·∫∑c user ID c·ªßa SystemAdmin
      },
      include: {
        slot: {
          include: {
            block: {
              include: {
                yard: true
              }
            }
          }
        }
      },
      orderBy: { updatedAt: 'desc' }
    });

    console.log(`üì¶ YardPlacement ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin: ${systemAdminPlacements.length} record(s)`);

    systemAdminPlacements.forEach((placement, index) => {
      console.log(`\n${index + 1}. Container ${placement.container_no}:`);
      console.log(`   - Slot: ${placement.slot?.block?.yard?.name || 'N/A'} - ${placement.slot?.block?.code || 'N/A'} - ${placement.slot?.code || 'N/A'}`);
      console.log(`   - Tier: ${placement.tier}`);
      console.log(`   - Tr·∫°ng th√°i: ${placement.status}`);
      console.log(`   - Ng√†y t·∫°o: ${placement.updatedAt.toLocaleString('vi-VN')}`);
      if (placement.removed_at) {
        console.log(`   - Ng√†y x√≥a: ${placement.removed_at.toLocaleString('vi-VN')}`);
      }
    });

    // 2. Ki·ªÉm tra ServiceRequest ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin
    const systemAdminRequests = await prisma.serviceRequest.findMany({
      where: { 
        created_by: 'SYSTEM_FIX' // Ho·∫∑c user ID c·ªßa SystemAdmin
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüìã ServiceRequest ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin: ${systemAdminRequests.length} record(s)`);

    systemAdminRequests.forEach((request, index) => {
      console.log(`\n${index + 1}. Container ${request.container_no}:`);
      console.log(`   - Lo·∫°i: ${request.type} (${request.type === 'IMPORT' ? 'H·∫†' : 'N√ÇNG'})`);
      console.log(`   - Tr·∫°ng th√°i: ${request.status}`);
      console.log(`   - Ng√†y t·∫°o: ${request.createdAt.toLocaleString('vi-VN')}`);
      console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${request.updatedAt.toLocaleString('vi-VN')}`);
    });

    // 3. Ki·ªÉm tra Container model ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin
    const systemAdminContainers = await prisma.container.findMany({
      where: { 
        created_by: 'SYSTEM_FIX' // Ho·∫∑c user ID c·ªßa SystemAdmin
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`\nüì¶ Container model ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin: ${systemAdminContainers.length} record(s)`);

    systemAdminContainers.forEach((container, index) => {
      console.log(`\n${index + 1}. Container ${container.container_no}:`);
      console.log(`   - Tr·∫°ng th√°i: ${container.status}`);
      console.log(`   - Yard: ${container.yard_name || 'N/A'}`);
      console.log(`   - Block: ${container.block_code || 'N/A'}`);
      console.log(`   - Slot: ${container.slot_code || 'N/A'}`);
      console.log(`   - Ng√†y t·∫°o: ${container.createdAt.toLocaleString('vi-VN')}`);
    });

    // 4. Ki·ªÉm tra YardSlot c√≥ container ƒë∆∞·ª£c ƒë·∫∑t b·ªüi SystemAdmin
    const systemAdminSlots = await prisma.yardSlot.findMany({
      where: { 
        occupant_container_no: { not: null }
      },
      include: { 
        block: { 
          include: { 
            yard: true 
          } 
        } 
      }
    });

    console.log(`\nüìç YardSlot c√≥ container: ${systemAdminSlots.length} slot(s)`);

    for (const slot of systemAdminSlots) {
      const containerNo = slot.occupant_container_no;
      
      // Ki·ªÉm tra xem container n√†y c√≥ ƒë∆∞·ª£c t·∫°o b·ªüi SystemAdmin kh√¥ng
      const placement = await prisma.yardPlacement.findFirst({
        where: { 
          container_no: containerNo,
          created_by: 'SYSTEM_FIX'
        }
      });

      const request = await prisma.serviceRequest.findFirst({
        where: { 
          container_no: containerNo,
          created_by: 'SYSTEM_FIX'
        }
      });

      if (placement || request) {
        console.log(`\nüì¶ Container ${containerNo} (SystemAdmin):`);
        console.log(`   - Slot: ${slot.block?.yard?.name || 'N/A'} - ${slot.block?.code || 'N/A'} - ${slot.code || 'N/A'}`);
        console.log(`   - Slot tr·∫°ng th√°i: ${slot.status}`);
        
        if (request) {
          console.log(`   - ServiceRequest: ${request.type} - ${request.status}`);
        }
        
        if (placement) {
          console.log(`   - YardPlacement: ${placement.status}, Tier ${placement.tier}`);
        }
      }
    }

    // 5. Ph√¢n t√≠ch logic SystemAdmin
    console.log('\n' + '=' .repeat(80));
    console.log('üéØ PH√ÇN T√çCH LOGIC SYSTEMADMIN:');
    
    console.log('\nüìã Logic hi·ªán t·∫°i:');
    console.log('   - SystemAdmin c√≥ th·ªÉ ƒë·∫∑t container tr·ª±c ti·∫øp v√†o b√£i');
    console.log('   - Container ƒë∆∞·ª£c ƒë·∫∑t s·∫Ω c√≥ lo·∫°i EXPORT (N√ÇNG)');
    console.log('   - Container s·∫Ω c√≥ tr·∫°ng th√°i IN_YARD (ch·ªù n√¢ng)');
    console.log('   - YardSlot s·∫Ω c√≥ tr·∫°ng th√°i OCCUPIED');
    console.log('   - YardPlacement s·∫Ω c√≥ tr·∫°ng th√°i OCCUPIED');

    console.log('\n‚úÖ ∆Øu ƒëi·ªÉm:');
    console.log('   - SystemAdmin c√≥ th·ªÉ qu·∫£n l√Ω container linh ho·∫°t');
    console.log('   - Container ƒë∆∞·ª£c ƒë·∫∑t ƒë√∫ng v·ªã tr√≠ trong b√£i');
    console.log('   - Logic nh·∫•t qu√°n v·ªõi quy tr√¨nh EXPORT');

    console.log('\n‚ö†Ô∏è  C·∫ßn l∆∞u √Ω:');
    console.log('   - Container ƒë∆∞·ª£c ƒë·∫∑t s·∫Ω hi·ªÉn th·ªã trong LiftContainer (EXPORT)');
    console.log('   - Kh√¥ng hi·ªÉn th·ªã trong LowerContainer (IMPORT)');
    console.log('   - C·∫ßn ƒë·∫£m b·∫£o th√¥ng tin container ƒë·∫ßy ƒë·ªß (kh√°ch h√†ng, h√£ng t√†u, etc.)');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y ki·ªÉm tra
checkSystemAdminContainers();

