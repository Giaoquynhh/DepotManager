/**
 * Test script ƒë·ªÉ ƒë·ªìng b·ªô booking cho c√°c container hi·ªán t·∫°i
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function syncExistingContainers() {
    console.log('üîÑ ƒê·ªìng b·ªô booking cho c√°c container hi·ªán t·∫°i\n');

    try {
        // T√¨m t·∫•t c·∫£ ServiceRequest c√≥ booking nh∆∞ng SealUsageHistory ch∆∞a c√≥
        const serviceRequestsWithBooking = await prisma.serviceRequest.findMany({
            where: {
                booking_bill: { not: null },
                container_no: { not: null },
                depot_deleted_at: null
            },
            select: {
                id: true,
                container_no: true,
                booking_bill: true
            }
        });

        console.log(`üìä T√¨m th·∫•y ${serviceRequestsWithBooking.length} ServiceRequest c√≥ booking`);

        let totalUpdated = 0;
        const results = [];

        for (const request of serviceRequestsWithBooking) {
            console.log(`\nüì¶ X·ª≠ l√Ω container: ${request.container_no}`);
            console.log(`   Booking: ${request.booking_bill}`);

            try {
                // C·∫≠p nh·∫≠t SealUsageHistory cho container n√†y
                const updateResult = await prisma.sealUsageHistory.updateMany({
                    where: {
                        container_number: request.container_no,
                        booking_number: null
                    },
                    data: {
                        booking_number: request.booking_bill
                    }
                });

                if (updateResult.count > 0) {
                    totalUpdated += updateResult.count;
                    console.log(`   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updateResult.count} record`);
                    results.push({
                        containerNo: request.container_no,
                        bookingBill: request.booking_bill,
                        updatedCount: updateResult.count
                    });
                } else {
                    console.log(`   ‚ÑπÔ∏è  Kh√¥ng c√≥ record n√†o c·∫ßn c·∫≠p nh·∫≠t`);
                }
            } catch (error) {
                console.error(`   ‚ùå L·ªói khi c·∫≠p nh·∫≠t container ${request.container_no}:`, error.message);
                results.push({
                    containerNo: request.container_no,
                    bookingBill: request.booking_bill,
                    error: error.message
                });
            }
        }

        console.log(`\nüéâ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${totalUpdated} record t·ª´ ${serviceRequestsWithBooking.length} ServiceRequest`);

        // Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\nüîç Ki·ªÉm tra k·∫øt qu·∫£:');
        const containersToCheck = ['SV44', 'SA999', 'SA888'];
        
        for (const containerNo of containersToCheck) {
            const sealHistory = await prisma.sealUsageHistory.findMany({
                where: {
                    container_number: containerNo
                },
                select: {
                    seal_number: true,
                    container_number: true,
                    booking_number: true
                }
            });

            console.log(`\nüì¶ Container ${containerNo}:`);
            sealHistory.forEach((history, index) => {
                console.log(`  ${index + 1}. Seal: ${history.seal_number}, Booking: ${history.booking_number || 'null'}`);
            });
        }

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y sync
if (require.main === module) {
    syncExistingContainers();
}

module.exports = { syncExistingContainers };
