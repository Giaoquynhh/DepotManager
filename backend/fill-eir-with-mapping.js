const { PrismaClient } = require('@prisma/client');
const ExcelJS = require('exceljs');
const path = require('path');
const fs = require('fs');

const prisma = new PrismaClient();

// Mapping ch√≠nh x√°c t·ª´ b·∫°n - b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a ·ªü ƒë√¢y
const FIELD_MAPPING = {
  // Format: 'field_name': { row: s·ªë_h√†ng, col: s·ªë_c·ªôt, description: 'm√¥ t·∫£' }
  'customer_name': { row: 6, col: 3, description: 'T√™n kh√°ch h√†ng' },
  'shipping_line': { row: 7, col: 3, description: 'H√£ng t√†u' },
  'container_no': { row: 8, col: 3, description: 'S·ªë container' },
  'seal_number': { row: 8, col: 9, description: 'S·ªë seal' },
  'vehicle_plate': { row: 10, col: 3, description: 'S·ªë xe' },
  'driver_name': { row: 11, col: 1, description: 'T√†i x·∫ø' },
  'driver_phone': { row: 11, col: 7, description: 'CMND/SƒêT t√†i x·∫ø' },
  'date': { row: 5, col: 8, description: 'Ng√†y' }
};

async function fillEIRWithMapping() {
  try {
    console.log('üìÑ T·∫°o phi·∫øu EIR v·ªõi mapping ch√≠nh x√°c cho container OO11');
    console.log('=' .repeat(80));

    const containerNo = 'OO11';

    // L·∫•y th√¥ng tin ServiceRequest m·ªõi nh·∫•t (EXPORT v·ªõi status GATE_OUT)
    const latestRequest = await prisma.serviceRequest.findFirst({
      where: { 
        container_no: containerNo,
        type: 'EXPORT',
        status: 'GATE_OUT'
      },
      orderBy: { createdAt: 'desc' },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (!latestRequest) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ServiceRequest EXPORT v·ªõi status GATE_OUT cho container OO11');
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y ServiceRequest:');
    console.log(`   - Container: ${latestRequest.container_no}`);
    console.log(`   - Kh√°ch h√†ng: ${latestRequest.customer?.name || 'N/A'}`);
    console.log(`   - H√£ng t√†u: ${latestRequest.shipping_line?.name || 'N/A'} (${latestRequest.shipping_line?.code || 'N/A'})`);
    console.log(`   - Lo·∫°i container: ${latestRequest.container_type?.description || 'N/A'}`);
    console.log(`   - Seal s·ªë: ${latestRequest.seal_number || 'N/A'}`);
    console.log(`   - License plate: ${latestRequest.license_plate || 'N/A'}`);
    console.log(`   - Driver name: ${latestRequest.driver_name || 'N/A'}`);
    console.log(`   - Driver phone: ${latestRequest.driver_phone || 'N/A'}`);

    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file template EIR
    const templatePath = path.join(__dirname, 'uploads/shipping-lines-eir/EIR_KMTU_1759508813838.xlsx');
    
    if (!fs.existsSync(templatePath)) {
      console.log('‚ùå File template EIR kh√¥ng t·ªìn t·∫°i:', templatePath);
      return;
    }

    console.log('üìÅ Template path:', templatePath);

    // ƒê·ªçc template Excel v·ªõi ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(templatePath);
    
    console.log('üìã Template structure loaded v·ªõi ExcelJS, ƒëi·ªÅn theo mapping ch√≠nh x√°c...');

    // L·∫•y worksheet ƒë·∫ßu ti√™n
    const worksheet = workbook.getWorksheet(1);
    console.log(`üìä Worksheet: ${worksheet.name}, c√≥ ${worksheet.rowCount} h√†ng, ${worksheet.columnCount} c·ªôt`);

    // L∆∞u l·∫°i t·∫•t c·∫£ thu·ªôc t√≠nh ƒë·ªãnh d·∫°ng g·ªëc
    const originalProperties = {
      cols: [],
      rows: [],
      merges: worksheet.model.merges || [],
      images: worksheet.model.images || [],
      drawings: worksheet.model.drawings || []
    };

    // L∆∞u l·∫°i k√≠ch th∆∞·ªõc c·ªôt
    for (let i = 1; i <= worksheet.columnCount; i++) {
      const col = worksheet.getColumn(i);
      originalProperties.cols.push({
        width: col.width,
        hidden: col.hidden,
        style: col.style
      });
    }

    // L∆∞u l·∫°i k√≠ch th∆∞·ªõc h√†ng
    for (let i = 1; i <= worksheet.rowCount; i++) {
      const row = worksheet.getRow(i);
      originalProperties.rows.push({
        height: row.height,
        hidden: row.hidden,
        style: row.style
      });
    }

    console.log(`üìê ƒê√£ l∆∞u ${originalProperties.cols.length} c·ªôt v√† ${originalProperties.rows.length} h√†ng`);

    // ƒêi·ªÅn th√¥ng tin theo mapping ch√≠nh x√°c
    let filledCells = 0;

    console.log('\nüéØ ƒêI·ªÄN TH√îNG TIN THEO MAPPING CH√çNH X√ÅC:');
    console.log('=' .repeat(50));

    // ƒêi·ªÅn t·ª´ng tr∆∞·ªùng theo mapping
    Object.entries(FIELD_MAPPING).forEach(([fieldName, mapping]) => {
      const cell = worksheet.getCell(mapping.row, mapping.col);
      let value = '';

      switch (fieldName) {
        case 'customer_name':
          value = latestRequest.customer?.name || 'C√îNG TY TNHH FORD VI·ªÜT NAM';
          break;
        case 'shipping_line':
          value = latestRequest.shipping_line?.code || 'KMTU';
          break;
        case 'container_no':
          value = latestRequest.container_no;
          break;
        case 'seal_number':
          value = latestRequest.seal_number || '';
          break;
        case 'vehicle_plate':
          value = latestRequest.license_plate || '67H-395.20';
          break;
        case 'driver_name':
          value = `T√†i x·∫ø: ${latestRequest.driver_name || 'Tr·∫ßn Th·ªã B√¨nh'}`;
          break;
        case 'driver_phone':
          value = `CMND: ${latestRequest.driver_phone || '714529869'}`;
          break;
        case 'date':
          const currentDate = new Date();
          const day = currentDate.getDate();
          const month = currentDate.getMonth() + 1;
          const year = currentDate.getFullYear();
          value = `Ng√†y ${day} th√°ng ${month} nƒÉm ${year}`;
          break;
        default:
          value = 'N/A';
      }

      cell.value = value;
      filledCells++;
      console.log(`   ‚úÖ ${mapping.description}: ${value} (H√†ng ${mapping.row}, C·ªôt ${mapping.col})`);
    });

    console.log(`\nüìä ƒê√£ ƒëi·ªÅn ${filledCells} √¥ d·ªØ li·ªáu theo mapping ch√≠nh x√°c`);

    // Kh√¥i ph·ª•c l·∫°i t·∫•t c·∫£ thu·ªôc t√≠nh ƒë·ªãnh d·∫°ng g·ªëc
    console.log('üîÑ Kh√¥i ph·ª•c ƒë·ªãnh d·∫°ng g·ªëc...');
    
    // Kh√¥i ph·ª•c k√≠ch th∆∞·ªõc c·ªôt
    originalProperties.cols.forEach((colProps, index) => {
      const col = worksheet.getColumn(index + 1);
      if (colProps.width !== undefined) {
        col.width = colProps.width;
      }
      if (colProps.hidden !== undefined) {
        col.hidden = colProps.hidden;
      }
      if (colProps.style) {
        col.style = colProps.style;
      }
    });

    // Kh√¥i ph·ª•c k√≠ch th∆∞·ªõc h√†ng
    originalProperties.rows.forEach((rowProps, index) => {
      const row = worksheet.getRow(index + 1);
      if (rowProps.height !== undefined) {
        row.height = rowProps.height;
      }
      if (rowProps.hidden !== undefined) {
        row.hidden = rowProps.hidden;
      }
      if (rowProps.style) {
        row.style = rowProps.style;
      }
    });

    // Kh√¥i ph·ª•c merged cells
    if (originalProperties.merges && originalProperties.merges.length > 0) {
      worksheet.model.merges = originalProperties.merges;
    }

    // Kh√¥i ph·ª•c h√¨nh ·∫£nh
    if (originalProperties.images && originalProperties.images.length > 0) {
      worksheet.model.images = originalProperties.images;
    }

    // Kh√¥i ph·ª•c drawings
    if (originalProperties.drawings && originalProperties.drawings.length > 0) {
      worksheet.model.drawings = originalProperties.drawings;
    }

    console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c ho√†n to√†n ƒë·ªãnh d·∫°ng g·ªëc');

    // T·∫°o t√™n file
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
    const filename = `EIR_OO11_MAPPED_${timestamp}.xlsx`;

    // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    const outputDir = path.join(__dirname, 'uploads/generated-eir');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const outputPath = path.join(outputDir, filename);

    // Ghi file v·ªõi ExcelJS (gi·ªØ nguy√™n 100% ƒë·ªãnh d·∫°ng)
    await workbook.xlsx.writeFile(outputPath);

    console.log('‚úÖ Phi·∫øu EIR v·ªõi mapping ch√≠nh x√°c ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
    console.log(`üìÅ File: ${outputPath}`);
    console.log(`üìÑ Filename: ${filename}`);

    // Hi·ªÉn th·ªã mapping ƒë√£ s·ª≠ d·ª•ng
    console.log('\nüìã MAPPING ƒê√É S·ª¨ D·ª§NG:');
    console.log('=' .repeat(50));
    Object.entries(FIELD_MAPPING).forEach(([fieldName, mapping]) => {
      console.log(`   ${fieldName}: H√†ng ${mapping.row}, C·ªôt ${mapping.col} - ${mapping.description}`);
    });

    console.log('\nüéØ ƒê·∫∂C ƒêI·ªÇM FILE MAPPING:');
    console.log('   ‚úÖ ƒêi·ªÅn ch√≠nh x√°c theo mapping do b·∫°n cung c·∫•p');
    console.log('   ‚úÖ Gi·ªØ nguy√™n 100% k√≠ch th∆∞·ªõc c·ªôt v√† h√†ng');
    console.log('   ‚úÖ Gi·ªØ nguy√™n logo v√† h√¨nh ·∫£nh');
    console.log('   ‚úÖ Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng cells (font, m√†u s·∫Øc, border)');
    console.log('   ‚úÖ Gi·ªØ nguy√™n c√¥ng th·ª©c Excel');
    console.log('   ‚úÖ Gi·ªØ nguy√™n merged cells');
    console.log('   ‚úÖ Gi·ªØ nguy√™n charts v√† objects');
    console.log('   ‚úÖ Gi·ªØ nguy√™n layout v√† spacing');

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o phi·∫øu EIR v·ªõi mapping:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fillEIRWithMapping();


