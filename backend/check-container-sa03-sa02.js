/**
 * Script ki·ªÉm tra tr·∫°ng th√°i container SA03 v√† SA02
 * So s√°nh s·ª± kh√°c nhau gi·ªØa hai container
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkContainerStatus(containerNo) {
  console.log(`\nüîç Ki·ªÉm tra container ${containerNo}...`);
  console.log('='.repeat(50));

  const result = {
    containerNo,
    yardPlacement: null,
    container: null,
    serviceRequests: [],
    canLift: false,
    reason: ''
  };

  // 1. Ki·ªÉm tra trong YardPlacement
  console.log('üìç 1. Ki·ªÉm tra v·ªã tr√≠ trong yard:');
  const yardPlacement = await prisma.yardPlacement.findFirst({
    where: {
      container_no: containerNo,
      status: 'OCCUPIED',
      removed_at: null
    },
    include: {
      slot: {
        include: {
          block: {
            include: {
              yard: true
            }
          }
        }
      }
    }
  });

  if (yardPlacement) {
    console.log(`‚úÖ Container ${containerNo} ƒëang trong yard:`);
    const placementInfo = {
      container_no: yardPlacement.container_no,
      yard: yardPlacement.slot?.block?.yard?.name,
      block: yardPlacement.slot?.block?.code,
      slot: yardPlacement.slot?.code,
      tier: yardPlacement.tier,
      placed_at: yardPlacement.placed_at,
      status: yardPlacement.status
    };
    console.log(placementInfo);
    result.yardPlacement = placementInfo;
  } else {
    console.log(`‚ùå Container ${containerNo} kh√¥ng c√≥ trong yard ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i OCCUPIED`);
  }

  // 2. Ki·ªÉm tra trong Container table
  console.log('\nüì¶ 2. Ki·ªÉm tra trong Container table:');
  const container = await prisma.container.findUnique({
    where: { container_no: containerNo },
    include: {
      shipping_line: {
        select: { id: true, name: true, code: true }
      },
      container_type: {
        select: { id: true, code: true, description: true }
      },
      customer: {
        select: { id: true, name: true, code: true }
      }
    }
  });

  if (container) {
    console.log(`‚úÖ Container ${containerNo} c√≥ trong Container table:`);
    const containerInfo = {
      container_no: container.container_no,
      shipping_line_id: container.shipping_line_id,
      shipping_line: container.shipping_line,
      container_type_id: container.container_type_id,
      container_type: container.container_type,
      customer_id: container.customer_id,
      customer: container.customer,
      seal_number: container.seal_number,
      dem_det: container.dem_det
    };
    console.log(containerInfo);
    result.container = containerInfo;
  } else {
    console.log(`‚ùå Container ${containerNo} kh√¥ng c√≥ trong Container table`);
  }

  // 3. Ki·ªÉm tra ServiceRequest
  console.log('\nüìã 3. Ki·ªÉm tra ServiceRequest:');
  const serviceRequests = await prisma.serviceRequest.findMany({
    where: { container_no: containerNo },
    orderBy: { createdAt: 'desc' },
    include: {
      shipping_line: {
        select: { id: true, name: true, code: true }
      },
      container_type: {
        select: { id: true, code: true, description: true }
      },
      customer: {
        select: { id: true, name: true, code: true }
      }
    }
  });

  if (serviceRequests.length > 0) {
    console.log(`‚úÖ T√¨m th·∫•y ${serviceRequests.length} ServiceRequest cho ${containerNo}:`);
    serviceRequests.forEach((sr, index) => {
      console.log(`\n   Request ${index + 1}:`);
      const srInfo = {
        id: sr.id,
        type: sr.type,
        status: sr.status,
        shipping_line_id: sr.shipping_line_id,
        shipping_line: sr.shipping_line,
        container_type: sr.container_type,
        customer: sr.customer,
        created_at: sr.createdAt,
        updated_at: sr.updatedAt
      };
      console.log(srInfo);
      result.serviceRequests.push(srInfo);
    });
  } else {
    console.log(`‚ùå Kh√¥ng c√≥ ServiceRequest n√†o cho ${containerNo}`);
  }

  // 4. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng
  console.log('\nüèóÔ∏è 4. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng:');
  
  let canLift = false;
  let reason = '';

  if (yardPlacement) {
    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 1: EMPTY_IN_YARD (SystemAdmin th√™m)
    if (!serviceRequests.length && container && container.shipping_line_id) {
      canLift = true;
      reason = 'EMPTY_IN_YARD - Container ƒë∆∞·ª£c SystemAdmin th√™m';
    }
    
    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 2: GATE_OUT v·ªõi type IMPORT
    const latestSR = serviceRequests[0];
    if (latestSR && latestSR.status === 'GATE_OUT' && latestSR.type === 'IMPORT') {
      canLift = true;
      reason = 'GATE_OUT (IMPORT) - Container ƒë√£ ho√†n th√†nh quy tr√¨nh import';
    }
  }

  if (canLift) {
    console.log(`‚úÖ Container ${containerNo} C√ì TH·ªÇ N√ÇNG: ${reason}`);
  } else {
    console.log(`‚ùå Container ${containerNo} KH√îNG TH·ªÇ N√ÇNG`);
    if (!yardPlacement) {
      console.log('   - L√Ω do: Container kh√¥ng c√≥ trong yard');
      reason = 'Kh√¥ng c√≥ trong yard';
    } else if (serviceRequests.length === 0 && (!container || !container.shipping_line_id)) {
      console.log('   - L√Ω do: Container kh√¥ng c√≥ shipping_line_id trong Container table');
      reason = 'Kh√¥ng c√≥ shipping_line_id';
    } else if (serviceRequests.length > 0) {
      const latestSR = serviceRequests[0];
      console.log(`   - L√Ω do: ServiceRequest c√≥ status "${latestSR.status}" v√† type "${latestSR.type}" (c·∫ßn GATE_OUT + IMPORT)`);
      reason = `ServiceRequest: ${latestSR.status} (${latestSR.type})`;
    }
  }

  result.canLift = canLift;
  result.reason = reason;

  return result;
}

async function compareContainers() {
  try {
    console.log('üîç KI·ªÇM TRA TR·∫†NG TH√ÅI CONTAINER SA03 V√Ä SA02');
    console.log('='.repeat(60));

    // Ki·ªÉm tra SA03
    const sa03Result = await checkContainerStatus('SA03');
    
    // Ki·ªÉm tra SA02
    const sa02Result = await checkContainerStatus('SA02');

    // So s√°nh k·∫øt qu·∫£
    console.log('\nüìä SO S√ÅNH K·∫æT QU·∫¢:');
    console.log('='.repeat(60));

    console.log('\nüèóÔ∏è ƒêi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng:');
    console.log(`SA03: ${sa03Result.canLift ? '‚úÖ C√ì TH·ªÇ N√ÇNG' : '‚ùå KH√îNG TH·ªÇ N√ÇNG'} - ${sa03Result.reason}`);
    console.log(`SA02: ${sa02Result.canLift ? '‚úÖ C√ì TH·ªÇ N√ÇNG' : '‚ùå KH√îNG TH·ªÇ N√ÇNG'} - ${sa02Result.reason}`);

    console.log('\nüìç V·ªã tr√≠ trong yard:');
    console.log(`SA03: ${sa03Result.yardPlacement ? '‚úÖ C√≥ trong yard' : '‚ùå Kh√¥ng c√≥ trong yard'}`);
    console.log(`SA02: ${sa02Result.yardPlacement ? '‚úÖ C√≥ trong yard' : '‚ùå Kh√¥ng c√≥ trong yard'}`);

    console.log('\nüì¶ Container table:');
    console.log(`SA03: ${sa03Result.container ? '‚úÖ C√≥ trong Container table' : '‚ùå Kh√¥ng c√≥ trong Container table'}`);
    console.log(`SA02: ${sa02Result.container ? '‚úÖ C√≥ trong Container table' : '‚ùå Kh√¥ng c√≥ trong Container table'}`);

    console.log('\nüìã ServiceRequest:');
    console.log(`SA03: ${sa03Result.serviceRequests.length} request(s)`);
    console.log(`SA02: ${sa02Result.serviceRequests.length} request(s)`);

    if (sa03Result.serviceRequests.length > 0) {
      console.log('SA03 ServiceRequests:');
      sa03Result.serviceRequests.forEach((sr, index) => {
        console.log(`  ${index + 1}. ${sr.type} - ${sr.status} (${sr.created_at})`);
      });
    }

    if (sa02Result.serviceRequests.length > 0) {
      console.log('SA02 ServiceRequests:');
      sa02Result.serviceRequests.forEach((sr, index) => {
        console.log(`  ${index + 1}. ${sr.type} - ${sr.status} (${sr.created_at})`);
      });
    }

    // Ph√¢n t√≠ch s·ª± kh√°c nhau
    console.log('\nüîç PH√ÇN T√çCH S·ª∞ KH√ÅC NHAU:');
    console.log('='.repeat(60));

    if (sa03Result.canLift !== sa02Result.canLift) {
      console.log(`‚ö†Ô∏è Kh√°c nhau v·ªÅ kh·∫£ nƒÉng n√¢ng: SA03 ${sa03Result.canLift ? 'c√≥ th·ªÉ' : 'kh√¥ng th·ªÉ'} n√¢ng, SA02 ${sa02Result.canLift ? 'c√≥ th·ªÉ' : 'kh√¥ng th·ªÉ'} n√¢ng`);
    } else {
      console.log(`‚úÖ C√πng kh·∫£ nƒÉng n√¢ng: ${sa03Result.canLift ? 'C·∫£ hai ƒë·ªÅu c√≥ th·ªÉ n√¢ng' : 'C·∫£ hai ƒë·ªÅu kh√¥ng th·ªÉ n√¢ng'}`);
    }

    if (sa03Result.yardPlacement && sa02Result.yardPlacement) {
      if (sa03Result.yardPlacement.yard !== sa02Result.yardPlacement.yard) {
        console.log(`‚ö†Ô∏è Kh√°c nhau v·ªÅ b√£i: SA03 ·ªü ${sa03Result.yardPlacement.yard}, SA02 ·ªü ${sa02Result.yardPlacement.yard}`);
      } else {
        console.log(`‚úÖ C√πng b√£i: ${sa03Result.yardPlacement.yard}`);
      }
    }

    if (sa03Result.serviceRequests.length !== sa02Result.serviceRequests.length) {
      console.log(`‚ö†Ô∏è Kh√°c nhau v·ªÅ s·ªë l∆∞·ª£ng ServiceRequest: SA03 c√≥ ${sa03Result.serviceRequests.length}, SA02 c√≥ ${sa02Result.serviceRequests.length}`);
    } else {
      console.log(`‚úÖ C√πng s·ªë l∆∞·ª£ng ServiceRequest: ${sa03Result.serviceRequests.length}`);
    }

    console.log('\nüéâ Ki·ªÉm tra ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y ki·ªÉm tra
if (require.main === module) {
  compareContainers();
}
