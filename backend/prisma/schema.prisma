generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  full_name           String
  role                String
  tenant_id           String?
  partner_id          String?
  status              String
  password_hash       String?
  last_login_at       DateTime?
  invite_token        String?
  invite_expires_at   DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  email_verified      Boolean              @default(false)
  failed_attempts     Int                  @default(0)
  locked_until        DateTime?
  mfa_enabled         Boolean              @default(false)
  phone               String?
  phone_verified      Boolean              @default(false)
  roles               Json?
  username            String?              @unique
  permissions         Json?
  AuditLogs           AuditLog[]
  ChatMessages        ChatMessage[]
  EmailVerifications  EmailVerification[]
  MfaSecrets          MfaSecret[]
  PasswordResetTokens PasswordResetToken[]
  PhoneOtps           PhoneOtp[]
  RefreshTokens       RefreshToken[]
  RequestAttachments  RequestAttachment[]
  SealUsageHistory    SealUsageHistory[]

  @@index([role, tenant_id])
  @@index([partner_id])
}

model Customer {
  id              String           @id @default(cuid())
  name            String
  tax_code        String?          @unique
  address         String?
  status          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  code            String           @unique
  email           String?
  phone           String?
  serviceRequests ServiceRequest[]
  containers      Container[]
  lowerServiceRequests ServiceRequest[] @relation("LowerCustomerRequests")
}


model Partner {
  id            String   @id @default(cuid())
  type          String
  name          String   @unique
  tax_code      String?
  contact_email String?
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  actor_id  String?
  action    String
  entity    String?
  entity_id String?
  meta      Json?
  createdAt DateTime @default(now())
  actor     User?    @relation(fields: [actor_id], references: [id])

  @@index([action, createdAt])
}

model ServiceRequest {
  id                        String              @id @default(cuid())
  tenant_id                 String?
  created_by                String
  type                      String
  container_no              String?
  eta                       DateTime?
  status                    String
  history                   Json?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  customer_deleted_at       DateTime?
  depot_deleted_at          DateTime?
  rejected_at               DateTime?
  rejected_by               String?
  rejected_reason           String?
  appointment_location_id   String?
  appointment_location_type String?
  appointment_note          String?
  appointment_time          DateTime?
  attachments_count         Int                 @default(0)
  gate_ref                  String?
  locked_attachments        Boolean             @default(false)
  forwarded_at              DateTime?
  forwarded_by              String?
  gate_checked_at           DateTime?
  gate_checked_by           String?
  gate_reason               String?
  driver_name               String?
  license_plate             String?
  has_invoice               Boolean             @default(false)
  is_paid                   Boolean             @default(false)
  is_pick                   Boolean             @default(false)
  time_in                   DateTime?
  time_out                  DateTime?
  container_type_id         String?
  customer_id               String?
  lower_customer_id         String?
  request_no                String?
  shipping_line_id          String?
  vehicle_company_id        String?
  booking_bill              String?
  driver_phone              String?
  isCheck                   Boolean             @default(false)
  isRepair                  Boolean             @default(false)
  isRepairRejected          Boolean             @default(false)
  dem_det                   String?
  seal_number               String?
  reuse_status              Boolean             @default(false)
  chatRoom                  ChatRoom?
  docs                      DocumentFile[]
  invoices                  Invoice[]
  notifications             Notification[]
  paymentRequests           PaymentRequest[]
  attachments               RequestAttachment[]
  container_type            ContainerType?      @relation(fields: [container_type_id], references: [id])
  customer                  Customer?           @relation(fields: [customer_id], references: [id])
  lower_customer            Customer?           @relation("LowerCustomerRequests", fields: [lower_customer_id], references: [id])
  shipping_line             ShippingLine?       @relation(fields: [shipping_line_id], references: [id])
  vehicle_company           TransportCompany?   @relation(fields: [vehicle_company_id], references: [id])

  @@index([depot_deleted_at])
  @@index([customer_deleted_at])
  @@index([status])
  @@index([appointment_time])
  @@index([has_invoice])
  @@index([is_paid])
  @@index([lower_customer_id])
}

model DocumentFile {
  id            String         @id @default(cuid())
  request_id    String
  type          String
  name          String
  size          Int
  version       Int
  uploader_id   String
  storage_key   String
  createdAt     DateTime       @default(now())
  deleted_at    DateTime?
  deleted_by    String?
  delete_reason String?
  request       ServiceRequest @relation(fields: [request_id], references: [id])

  @@index([request_id])
}

model PaymentRequest {
  id         String         @id @default(cuid())
  request_id String
  created_by String
  status     String
  createdAt  DateTime       @default(now())
  request    ServiceRequest @relation(fields: [request_id], references: [id])

  @@index([request_id])
}

model ChatRoom {
  id           String         @id @default(cuid())
  request_id   String         @unique
  participants Json
  status       String         @default("active")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  messages     ChatMessage[]
  request      ServiceRequest @relation(fields: [request_id], references: [id])

  @@index([request_id])
  @@index([status])
}

model ChatMessage {
  id           String   @id @default(cuid())
  chat_room_id String
  sender_id    String
  message      String
  type         String   @default("text")
  file_url     String?
  file_name    String?
  file_size    Int?
  createdAt    DateTime @default(now())
  chatRoom     ChatRoom @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
  sender       User     @relation(fields: [sender_id], references: [id])

  @@index([chat_room_id])
  @@index([sender_id])
  @@index([createdAt])
}

model Yard {
  id     String      @id @default(cuid())
  name   String
  blocks YardBlock[]
}

model YardBlock {
  id      String     @id @default(cuid())
  yard_id String
  code    String
  yard    Yard       @relation(fields: [yard_id], references: [id])
  slots   YardSlot[]

  @@index([yard_id])
}

model YardSlot {
  id                    String          @id @default(cuid())
  block_id              String
  code                  String
  status                String
  kind                  String?
  near_gate             Int             @default(0)
  avoid_main            Int             @default(0)
  is_odd                Boolean         @default(false)
  occupant_container_no String?
  reserved_expire_at    DateTime?
  updatedAt             DateTime        @updatedAt
  col_index             Int?
  row_index             Int?
  row_label             String?
  tier_capacity         Int             @default(5)
  from_tasks            ForkliftTask[]  @relation("from_slot")
  to_tasks              ForkliftTask[]  @relation("to_slot")
  fixed_location_tasks  ForkliftTask[]  @relation("fixed_location_slot")
  placements            YardPlacement[]
  block                 YardBlock       @relation(fields: [block_id], references: [id])

  @@index([block_id])
  @@index([occupant_container_no])
  @@index([status])
}

model YardPlacement {
  id              String    @id @default(cuid())
  slot_id         String
  tier            Int
  container_no    String?
  status          String
  hold_expires_at DateTime?
  placed_at       DateTime  @default(now())
  removed_at      DateTime?
  created_by      String
  updatedAt       DateTime  @updatedAt
  slot            YardSlot  @relation(fields: [slot_id], references: [id])

  @@unique([slot_id, tier], name: "slot_tier_unique")
  @@index([container_no])
  @@index([status])
  @@index([hold_expires_at])
  @@index([slot_id, status])
  @@index([status, hold_expires_at])
}

model Container {
  id              String    @id @default(cuid())
  container_no    String    @unique
  status          String    @default("EMPTY_IN_YARD")
  container_quality String? // GOOD, NEED_REPAIR, UNKNOWN
  customer_id     String?
  shipping_line_id String?
  container_type_id String?
  seal_number     String?
  dem_det         String?
  yard_name       String?
  block_code      String?
  slot_code       String?
  created_by      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  customer        Customer? @relation(fields: [customer_id], references: [id])
  shipping_line   ShippingLine? @relation(fields: [shipping_line_id], references: [id])
  container_type  ContainerType? @relation(fields: [container_type_id], references: [id])

  @@index([container_no])
  @@index([status])
  @@index([customer_id])
  @@index([container_quality])
}

model ContainerMeta {
  id           String    @id @default(cuid())
  container_no String    @unique
  dem_date     DateTime?
  det_date     DateTime?
  updatedAt    DateTime  @updatedAt
}

model ForkliftTask {
  id                     String    @id @default(cuid())
  container_no           String
  from_slot_id           String?
  to_slot_id             String?
  fixed_location_slot_id String?
  status                 String
  assigned_driver_id     String?
  created_by             String
  cancel_reason          String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  cost                   Float?    @default(0)
  report_status          String?
  report_image           String?
  from_slot              YardSlot? @relation("from_slot", fields: [from_slot_id], references: [id])
  to_slot                YardSlot? @relation("to_slot", fields: [to_slot_id], references: [id])
  fixed_location_slot    YardSlot? @relation("fixed_location_slot", fields: [fixed_location_slot_id], references: [id])
  reportImages           ForkliftTaskReportImage[]
}

model ForkliftTaskReportImage {
  id          String       @id @default(cuid())
  task_id     String
  file_name   String
  file_type   String
  file_size   Int
  storage_url String
  createdAt   DateTime     @default(now())
  task        ForkliftTask @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@index([task_id])
}

model Equipment {
  id        String         @id @default(cuid())
  code      String         @unique
  type      EquipmentType
  status    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  tickets   RepairTicket[]
}

model InventoryItem {
  id            String              @id @default(cuid())
  name          String              @unique
  uom           String
  qty_on_hand   Int                 @default(0)
  reorder_point Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  unit_price    Int                 @default(0)
  movements     InventoryMovement[]
  repairItems   RepairTicketItem[]
}

model InventoryMovement {
  id                String            @id @default(cuid())
  inventory_item_id String
  type              InventoryMoveType
  quantity          Int
  ref_type          String?
  ref_id            String?
  createdAt         DateTime          @default(now())
  item              InventoryItem     @relation(fields: [inventory_item_id], references: [id])

  @@index([inventory_item_id])
}

model RepairTicket {
  id                  String             @id @default(cuid())
  code                String             @unique
  equipment_id        String?
  created_by          String
  problem_description String
  estimated_cost      Float?             @default(0)
  manager_comment     String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  container_no        String?
  labor_cost          Float?             @default(0)
  viewquote           Int                @default(0)
  status              RepairStatus       @default(PENDING)
  endTime             DateTime?
  images              RepairImage[]
  equipment           Equipment?         @relation(fields: [equipment_id], references: [id])
  items               RepairTicketItem[]

  @@index([equipment_id])
  @@index([container_no])
  @@index([status])
}

model RepairTicketItem {
  id                String        @id @default(cuid())
  repair_ticket_id  String
  inventory_item_id String
  quantity          Int
  inventoryItem     InventoryItem @relation(fields: [inventory_item_id], references: [id])
  ticket            RepairTicket  @relation(fields: [repair_ticket_id], references: [id])

  @@index([repair_ticket_id])
  @@index([inventory_item_id])
}

model RepairImage {
  id               String       @id @default(cuid())
  repair_ticket_id String
  file_name        String
  file_type        String
  file_size        Int
  storage_url      String
  createdAt        DateTime     @default(now())
  ticket           RepairTicket @relation(fields: [repair_ticket_id], references: [id], onDelete: Cascade)

  @@index([repair_ticket_id])
}

model Invoice {
  id             String              @id @default(cuid())
  org_id         String?
  invoice_no     String?
  customer_id    String
  issue_date     DateTime?
  due_date       DateTime?
  currency       String              @default("VND")
  subtotal       Decimal             @db.Decimal(18, 2)
  tax_amount     Decimal             @db.Decimal(18, 2)
  total_amount   Decimal             @db.Decimal(18, 2)
  status         String              @default("DRAFT")
  paid_total     Decimal             @default(0) @db.Decimal(18, 2)
  paid_at        DateTime?
  notes          String?
  source_module  String?
  source_id      String?
  version        Int                 @default(1)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  created_by     String?
  updated_by     String?
  serviceRequest ServiceRequest?     @relation(fields: [source_id], references: [id])
  items          InvoiceLineItem[]
  allocations    PaymentAllocation[]

  @@unique([org_id, invoice_no])
  @@index([org_id, status, issue_date])
  @@index([org_id, customer_id, issue_date])
  @@index([source_id])
}

model InvoiceLineItem {
  id                String   @id @default(cuid())
  org_id            String?
  invoice_id        String
  service_code      String
  description       String
  qty               Decimal  @db.Decimal(12, 3)
  unit_price        Decimal  @db.Decimal(18, 4)
  line_amount       Decimal  @db.Decimal(18, 2)
  tax_code          String?
  tax_rate          Decimal? @db.Decimal(5, 2)
  tax_amount        Decimal  @default(0) @db.Decimal(18, 2)
  total_line_amount Decimal  @db.Decimal(18, 2)
  invoice           Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id])
}

model Payment {
  id              String              @id @default(cuid())
  org_id          String?
  payment_no      String              @unique
  customer_id     String
  amount          Decimal             @db.Decimal(18, 2)
  currency        String
  paid_date       DateTime
  method          String
  reference_no    String?
  notes           String?
  idempotency_key String?             @unique
  createdAt       DateTime            @default(now())
  created_by      String?
  allocations     PaymentAllocation[]

  @@index([org_id, paid_date])
}

model PaymentAllocation {
  id               String  @id @default(cuid())
  org_id           String?
  payment_id       String
  invoice_id       String
  allocated_amount Decimal @db.Decimal(18, 2)
  invoice          Invoice @relation(fields: [invoice_id], references: [id])
  payment          Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)

  @@unique([payment_id, invoice_id])
  @@index([invoice_id])
}

model ExportJob {
  id        String    @id @default(cuid())
  org_id    String?
  type      String
  params    Json
  status    String    @default("PENDING")
  file_key  String?
  error     String?
  createdAt DateTime  @default(now())
  doneAt    DateTime?
}

model RefreshToken {
  id         String    @id @default(cuid())
  user_id    String
  token_hash String
  expires_at DateTime
  revoked_at DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model PasswordResetToken {
  id         String    @id @default(cuid())
  user_id    String
  token_hash String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model MfaSecret {
  id         String   @id @default(cuid())
  user_id    String
  type       String
  secret     String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model EmailVerification {
  id         String    @id @default(cuid())
  user_id    String
  token_hash String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model PhoneOtp {
  id         String    @id @default(cuid())
  user_id    String
  otp_hash   String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model RequestAttachment {
  id            String         @id @default(cuid())
  request_id    String
  uploader_id   String
  uploader_role String
  file_name     String
  file_type     String
  file_size     Int
  storage_url   String
  uploaded_at   DateTime       @default(now())
  deleted_at    DateTime?
  deleted_by    String?
  delete_reason String?
  request       ServiceRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)
  uploader      User           @relation(fields: [uploader_id], references: [id])

  @@index([request_id])
  @@index([uploader_id])
  @@index([uploaded_at])
}

model Notification {
  id         String         @id @default(cuid())
  request_id String
  type       String
  payload    Json
  sent_to    String[]
  created_at DateTime       @default(now())
  request    ServiceRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@index([request_id])
  @@index([type])
  @@index([created_at])
}

model ShippingLine {
  id              String           @id @default(cuid())
  code            String           @unique
  name            String
  eir             String
  template_eir    String?          // File mẫu cố định
  note            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  serviceRequests ServiceRequest[]
  containers      Container[]

  @@map("shipping_lines")
}

model TransportCompany {
  id              String           @id @default(cuid())
  code            String           @unique
  name            String
  address         String?
  mst             String?
  phone           String?
  note            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  serviceRequests ServiceRequest[]

  @@map("transport_companies")
}

model ContainerType {
  id              String           @id @default(cuid())
  code            String           @unique
  description     String
  note            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  serviceRequests ServiceRequest[]
  containers      Container[]

  @@map("container_types")
}

model PriceList {
  id          String   @id @default(cuid())
  serviceCode String   @unique
  serviceName String
  type        String
  price       Decimal  @db.Decimal(18, 2)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("price_lists")
}

model Seal {
  id                 String   @id @default(cuid())
  shipping_company   String
  purchase_date      DateTime
  quantity_purchased Int
  quantity_exported  Int      @default(0)
  quantity_remaining Int
  unit_price         Decimal  @db.Decimal(18, 2)
  total_amount       Decimal  @db.Decimal(18, 2)
  pickup_location    String
  status             String   @default("ACTIVE")
  created_by         String
  updated_by         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  usageHistory       SealUsageHistory[]

  @@index([shipping_company])
  @@index([purchase_date])
  @@index([status])
  @@map("seals")
}

model SealUsageHistory {
  id                String   @id @default(cuid())
  seal_id           String
  seal_number       String
  container_number  String?
  booking_number    String?
  export_date       DateTime @default(now())
  created_by        String
  created_at        DateTime @default(now())
  seal              Seal     @relation(fields: [seal_id], references: [id], onDelete: Cascade)
  creator           User     @relation(fields: [created_by], references: [id])

  @@index([seal_id])
  @@index([export_date])
  @@index([container_number])
  @@map("seal_usage_history")
}

enum EquipmentType {
  CONTAINER
  EQUIPMENT
}

enum InventoryMoveType {
  IN
  OUT
}

enum RepairStatus {
  PENDING
  REJECT
  COMPLETE
  COMPLETE_NEEDREPAIR
}
