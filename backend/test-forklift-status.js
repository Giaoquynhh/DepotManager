/**
 * Test script ƒë·ªÉ ki·ªÉm tra logic tr·∫°ng th√°i m·ªõi c·ªßa Forklift System
 * 
 * Ch·∫°y: node test-forklift-status.js
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testForkliftStatusFlow() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test Forklift Status Flow...\n');

  try {
    // 1. T·∫°o job xe n√¢ng m·ªõi
    console.log('1Ô∏è‚É£ T·∫°o job xe n√¢ng m·ªõi...');
    const newJob = await prisma.forkliftTask.create({
      data: {
        container_no: 'TEST-001',
        status: 'PENDING',
        created_by: 'test-user'
      }
    });
    console.log(`‚úÖ Job t·∫°o th√†nh c√¥ng: ${newJob.id} - Status: ${newJob.status}\n`);

    // 2. G√°n t√†i x·∫ø (chuy·ªÉn sang ASSIGNED)
    console.log('2Ô∏è‚É£ G√°n t√†i x·∫ø...');
    const assignedJob = await prisma.forkliftTask.update({
      where: { id: newJob.id },
      data: {
        assigned_driver_id: 'test-driver',
        status: 'ASSIGNED'
      }
    });
    console.log(`‚úÖ Job ƒë√£ g√°n t√†i x·∫ø: ${assignedJob.id} - Status: ${assignedJob.status}\n`);

    // 3. B·∫Øt ƒë·∫ßu c√¥ng vi·ªác (chuy·ªÉn sang IN_PROGRESS)
    console.log('3Ô∏è‚É£ B·∫Øt ƒë·∫ßu c√¥ng vi·ªác...');
    const inProgressJob = await prisma.forkliftTask.update({
      where: { id: newJob.id },
      data: {
        status: 'IN_PROGRESS'
      }
    });
    console.log(`‚úÖ Job ƒëang th·ª±c hi·ªán: ${inProgressJob.id} - Status: ${inProgressJob.status}\n`);

    // 4. Ho√†n th√†nh c√¥ng vi·ªác (chuy·ªÉn sang COMPLETED)
    console.log('4Ô∏è‚É£ Ho√†n th√†nh c√¥ng vi·ªác...');
    const completedJob = await prisma.forkliftTask.update({
      where: { id: newJob.id },
      data: {
        status: 'COMPLETED'
      }
    });
    console.log(`‚úÖ Job ho√†n th√†nh: ${completedJob.id} - Status: ${completedJob.status}\n`);

         // 5. Test c√°c tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá
     console.log('5Ô∏è‚É£ Test c√°c tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá...');
     
     try {
       // Th·ª≠ b·∫Øt ƒë·∫ßu t·ª´ PENDING (kh√¥ng ƒë∆∞·ª£c ph√©p)
       await prisma.forkliftTask.update({
         where: { id: newJob.id },
         data: { status: 'PENDING' }
       });
       
       await prisma.forkliftTask.update({
         where: { id: newJob.id },
         data: { status: 'IN_PROGRESS' }
       });
       console.log('‚ùå L·ªói: Kh√¥ng ƒë∆∞·ª£c ph√©p b·∫Øt ƒë·∫ßu t·ª´ PENDING');
     } catch (error) {
       console.log('‚úÖ ƒê√∫ng: Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu t·ª´ PENDING');
     }

     // Test g√°n l·∫°i t√†i x·∫ø t·ª´ ASSIGNED (kh√¥ng ƒë∆∞·ª£c ph√©p)
     console.log('\n6Ô∏è‚É£ Test g√°n l·∫°i t√†i x·∫ø t·ª´ ASSIGNED...');
     try {
       const reassignJob = await prisma.forkliftTask.create({
         data: {
           container_no: 'TEST-003',
           status: 'ASSIGNED',
           assigned_driver_id: 'driver-1',
           created_by: 'test-user'
         }
       });
       
       // Th·ª≠ g√°n l·∫°i t√†i x·∫ø kh√°c (kh√¥ng ƒë∆∞·ª£c ph√©p)
       await prisma.forkliftTask.update({
         where: { id: reassignJob.id },
         data: {
           assigned_driver_id: 'driver-2',
           status: 'ASSIGNED'
         }
       });
       console.log('‚ùå L·ªói: Kh√¥ng ƒë∆∞·ª£c ph√©p g√°n l·∫°i t√†i x·∫ø t·ª´ ASSIGNED');
     } catch (error) {
       console.log('‚úÖ ƒê√∫ng: Kh√¥ng th·ªÉ g√°n l·∫°i t√†i x·∫ø t·ª´ ASSIGNED');
     }

         // 7. Test h·ªßy job
     console.log('\n7Ô∏è‚É£ Test h·ªßy job...');
    
    // T·∫°o job m·ªõi ƒë·ªÉ test h·ªßy
    const cancelJob = await prisma.forkliftTask.create({
      data: {
        container_no: 'TEST-002',
        status: 'PENDING',
        created_by: 'test-user'
      }
    });

    const cancelledJob = await prisma.forkliftTask.update({
      where: { id: cancelJob.id },
      data: {
        status: 'CANCELLED',
        cancel_reason: 'Test cancellation'
      }
    });
    console.log(`‚úÖ Job ƒë√£ h·ªßy: ${cancelledJob.id} - Status: ${cancelledJob.status}\n`);

         // 8. Hi·ªÉn th·ªã t·∫•t c·∫£ jobs ƒë·ªÉ ki·ªÉm tra
     console.log('8Ô∏è‚É£ Danh s√°ch t·∫•t c·∫£ jobs:');
    const allJobs = await prisma.forkliftTask.findMany({
      where: {
        container_no: { startsWith: 'TEST-' }
      },
      orderBy: { createdAt: 'desc' }
    });

    allJobs.forEach((job, index) => {
      console.log(`${index + 1}. Container: ${job.container_no} - Status: ${job.status} - Driver: ${job.assigned_driver_id || 'N/A'}`);
    });

    console.log('\nüéâ Test ho√†n th√†nh th√†nh c√¥ng!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function cleanupTestData() {
  console.log('\nüßπ D·ªçn d·∫πp d·ªØ li·ªáu test...');
  
  try {
    const deletedJobs = await prisma.forkliftTask.deleteMany({
      where: {
        container_no: { startsWith: 'TEST-' }
      }
    });
    
    console.log(`‚úÖ ƒê√£ x√≥a ${deletedJobs.count} job test`);
  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªçn d·∫πp:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y test
if (require.main === module) {
  testForkliftStatusFlow()
    .then(() => {
      console.log('\nüìã Test summary:');
      console.log('‚úÖ PENDING ‚Üí ASSIGNED ‚Üí IN_PROGRESS ‚Üí COMPLETED');
      console.log('‚úÖ Validation tr·∫°ng th√°i ho·∫°t ƒë·ªông ƒë√∫ng');
      console.log('‚úÖ H·ªßy job ho·∫°t ƒë·ªông ƒë√∫ng');
      console.log('‚úÖ Workflow m·ªõi ho·∫°t ƒë·ªông nh∆∞ mong ƒë·ª£i');
    })
    .catch(console.error)
    .finally(() => {
      // T·ª± ƒë·ªông d·ªçn d·∫πp sau 5 gi√¢y
      setTimeout(cleanupTestData, 5000);
    });
}

module.exports = { testForkliftStatusFlow, cleanupTestData };
