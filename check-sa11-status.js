/**
 * Script ki·ªÉm tra tr·∫°ng th√°i container SA11
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkSA11Status() {
  try {
    console.log('üîç KI·ªÇM TRA TR·∫†NG TH√ÅI CONTAINER SA11');
    console.log('='.repeat(60));

    const containerNo = 'SA11';

    // 1. Ki·ªÉm tra trong YardPlacement
    console.log('üìç 1. Ki·ªÉm tra v·ªã tr√≠ trong yard:');
    const yardPlacement = await prisma.yardPlacement.findFirst({
      where: {
        container_no: containerNo,
        status: 'OCCUPIED',
        removed_at: null
      },
      include: {
        slot: {
          include: {
            block: {
              include: {
                yard: true
              }
            }
          }
        }
      }
    });

    if (yardPlacement) {
      console.log(`‚úÖ Container ${containerNo} ƒëang trong yard:`);
      console.log(`   - B√£i: ${yardPlacement.slot?.block?.yard?.name || 'N/A'}`);
      console.log(`   - Block: ${yardPlacement.slot?.block?.code || 'N/A'}`);
      console.log(`   - Slot: ${yardPlacement.slot?.code || 'N/A'}`);
      console.log(`   - T·∫ßng: ${yardPlacement.tier || 'N/A'}`);
      console.log(`   - Ng√†y ƒë·∫∑t: ${yardPlacement.placed_at || 'N/A'}`);
      console.log(`   - Tr·∫°ng th√°i: ${yardPlacement.status}`);
    } else {
      console.log(`‚ùå Container ${containerNo} kh√¥ng c√≥ trong yard ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i OCCUPIED`);
    }

    console.log('\n' + '-'.repeat(40) + '\n');

    // 2. Ki·ªÉm tra Container model
    console.log('üì¶ 2. Ki·ªÉm tra Container model:');
    const container = await prisma.container.findUnique({
      where: { container_no: containerNo },
      include: {
        customer: {
          select: { id: true, name: true, code: true }
        },
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        }
      }
    });

    if (container) {
      console.log('‚úÖ T√¨m th·∫•y trong Container:');
      console.log(`   - ID: ${container.id}`);
      console.log(`   - Status: ${container.status}`);
      console.log(`   - Kh√°ch h√†ng: ${container.customer?.name || 'N/A'} (${container.customer?.code || 'N/A'})`);
      console.log(`   - H√£ng t√†u: ${container.shipping_line?.name || 'N/A'} (${container.shipping_line?.code || 'N/A'})`);
      console.log(`   - Lo·∫°i container: ${container.container_type?.description || 'N/A'} (${container.container_type?.code || 'N/A'})`);
      console.log(`   - Seal s·ªë: ${container.seal_number || 'N/A'}`);
      console.log(`   - DEM/DET: ${container.dem_det || 'N/A'}`);
      console.log(`   - Yard: ${container.yard_name || 'N/A'}`);
      console.log(`   - Block: ${container.block_code || 'N/A'}`);
      console.log(`   - Slot: ${container.slot_code || 'N/A'}`);
      console.log(`   - Created by: ${container.created_by}`);
      console.log(`   - Ng√†y t·∫°o: ${container.createdAt}`);
      console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${container.updatedAt}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong Container');
    }

    console.log('\n' + '-'.repeat(40) + '\n');

    // 3. Ki·ªÉm tra YardSlot
    console.log('üìç 3. Ki·ªÉm tra YardSlot:');
    const yardSlot = await prisma.yardSlot.findFirst({
      where: { occupant_container_no: containerNo },
      include: {
        block: {
          include: {
            yard: true
          }
        }
      }
    });

    if (yardSlot) {
      console.log('‚úÖ T√¨m th·∫•y trong YardSlot:');
      console.log(`   - Yard: ${yardSlot.block?.yard?.name || 'N/A'}`);
      console.log(`   - Block: ${yardSlot.block?.code || 'N/A'}`);
      console.log(`   - Slot: ${yardSlot.code || 'N/A'}`);
      console.log(`   - Tr·∫°ng th√°i: ${yardSlot.status || 'N/A'}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y trong YardSlot');
    }

    console.log('\n' + '-'.repeat(40) + '\n');

    // 4. Ki·ªÉm tra ServiceRequest
    console.log('üìã 4. Ki·ªÉm tra ServiceRequest:');
    const serviceRequests = await prisma.serviceRequest.findMany({
      where: { container_no: containerNo },
      orderBy: { createdAt: 'desc' },
      include: {
        shipping_line: {
          select: { id: true, name: true, code: true }
        },
        container_type: {
          select: { id: true, code: true, description: true }
        },
        customer: {
          select: { id: true, name: true, code: true }
        }
      }
    });

    if (serviceRequests.length > 0) {
      console.log(`‚úÖ T√¨m th·∫•y ${serviceRequests.length} ServiceRequest cho ${containerNo}:`);
      serviceRequests.forEach((sr, index) => {
        console.log(`\n   Request ${index + 1}:`);
        console.log(`   - ID: ${sr.id}`);
        console.log(`   - Type: ${sr.type}`);
        console.log(`   - Status: ${sr.status}`);
        console.log(`   - Kh√°ch h√†ng: ${sr.customer?.name || 'N/A'}`);
        console.log(`   - H√£ng t√†u: ${sr.shipping_line?.name || 'N/A'}`);
        console.log(`   - Lo·∫°i container: ${sr.container_type?.description || 'N/A'}`);
        console.log(`   - Ng√†y t·∫°o: ${sr.createdAt}`);
        console.log(`   - Ng√†y c·∫≠p nh·∫≠t: ${sr.updatedAt}`);
      });
    } else {
      console.log(`‚ùå Kh√¥ng c√≥ ServiceRequest n√†o cho ${containerNo}`);
    }

    console.log('\n' + '-'.repeat(40) + '\n');

    // 5. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng
    console.log('üèóÔ∏è 5. Ki·ªÉm tra ƒëi·ªÅu ki·ªán c√≥ th·ªÉ n√¢ng:');
    
    let canLift = false;
    let reason = '';

    if (yardPlacement) {
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 1: EMPTY_IN_YARD (SystemAdmin th√™m)
      if (!serviceRequests.length && container && container.shipping_line_id) {
        canLift = true;
        reason = 'EMPTY_IN_YARD - Container ƒë∆∞·ª£c SystemAdmin th√™m';
      }
      
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán 2: GATE_OUT v·ªõi type IMPORT
      const latestSR = serviceRequests[0];
      if (latestSR && latestSR.status === 'GATE_OUT' && latestSR.type === 'IMPORT') {
        canLift = true;
        reason = 'GATE_OUT (IMPORT) - Container ƒë√£ ho√†n th√†nh quy tr√¨nh import';
      }
    }

    if (canLift) {
      console.log(`‚úÖ Container ${containerNo} C√ì TH·ªÇ N√ÇNG: ${reason}`);
    } else {
      console.log(`‚ùå Container ${containerNo} KH√îNG TH·ªÇ N√ÇNG`);
      if (!yardPlacement) {
        console.log('   - L√Ω do: Container kh√¥ng c√≥ trong yard');
        reason = 'Kh√¥ng c√≥ trong yard';
      } else if (serviceRequests.length === 0 && (!container || !container.shipping_line_id)) {
        console.log('   - L√Ω do: Container kh√¥ng c√≥ shipping_line_id trong Container table');
        reason = 'Kh√¥ng c√≥ shipping_line_id';
      } else if (serviceRequests.length > 0) {
        const latestSR = serviceRequests[0];
        console.log(`   - L√Ω do: ServiceRequest c√≥ status "${latestSR.status}" v√† type "${latestSR.type}" (c·∫ßn GATE_OUT + IMPORT)`);
        reason = `ServiceRequest: ${latestSR.status} (${latestSR.type})`;
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ Ki·ªÉm tra ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y ki·ªÉm tra
if (require.main === module) {
  checkSA11Status();
}

module.exports = { checkSA11Status };
