/**
 * Test script ƒë·ªÉ ki·ªÉm tra gi·∫£i ph√°p ƒë·ªìng b·ªô booking gi·ªØa ServiceRequest v√† SealUsageHistory
 * 
 * Quy tr√¨nh test:
 * 1. T·∫°o ServiceRequest (kh√¥ng c√≥ booking_bill)
 * 2. G√°n seal cho container
 * 3. C·∫≠p nh·∫≠t booking_bill v√†o ServiceRequest
 * 4. Ki·ªÉm tra SealUsageHistory ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t booking_number ch∆∞a
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:5002';
const API_KEY = 'your-api-key-here'; // Thay b·∫±ng API key th·ª±c t·∫ø

// Headers cho API calls
const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`
};

async function testSealBookingSync() {
    console.log('üß™ B·∫Øt ƒë·∫ßu test ƒë·ªìng b·ªô booking gi·ªØa ServiceRequest v√† SealUsageHistory\n');

    try {
        // Step 1: T·∫°o ServiceRequest (kh√¥ng c√≥ booking_bill)
        console.log('üìù Step 1: T·∫°o ServiceRequest (kh√¥ng c√≥ booking_bill)');
        const createRequestData = {
            type: 'EXPORT',
            container_no: `TEST-${Date.now()}`,
            shipping_line_id: 'your-shipping-line-id', // Thay b·∫±ng ID th·ª±c t·∫ø
            container_type_id: 'your-container-type-id', // Thay b·∫±ng ID th·ª±c t·∫ø
            customer_id: 'your-customer-id', // Thay b·∫±ng ID th·ª±c t·∫ø
            // Kh√¥ng c√≥ booking_bill
        };

        const createResponse = await axios.post(`${BASE_URL}/requests/create`, createRequestData, { headers });
        const requestId = createResponse.data.data.id;
        const containerNo = createRequestData.container_no;

        console.log(`‚úÖ T·∫°o ServiceRequest th√†nh c√¥ng: ${requestId}`);
        console.log(`üì¶ Container: ${containerNo}`);
        console.log(`üìã Booking: ${createResponse.data.data.booking_bill || 'null'}\n`);

        // Step 2: G√°n seal cho container
        console.log('üîí Step 2: G√°n seal cho container');
        const sealData = {
            shipping_company: 'Test Shipping Company',
            seal_number: `SEAL-${Date.now()}`,
            container_number: containerNo,
            request_id: requestId
        };

        const sealResponse = await axios.post(`${BASE_URL}/seals/increment-exported`, sealData, { headers });
        console.log(`‚úÖ G√°n seal th√†nh c√¥ng: ${sealData.seal_number}`);
        console.log(`üìä Seal quantity exported: ${sealResponse.data.data.quantity_exported}\n`);

        // Step 3: Ki·ªÉm tra SealUsageHistory tr∆∞·ªõc khi c·∫≠p nh·∫≠t booking
        console.log('üîç Step 3: Ki·ªÉm tra SealUsageHistory tr∆∞·ªõc khi c·∫≠p nh·∫≠t booking');
        const sealId = sealResponse.data.data.id;
        const historyBeforeResponse = await axios.get(`${BASE_URL}/seals/${sealId}/usage-history`, { headers });
        const historyBefore = historyBeforeResponse.data.data;

        console.log('üìã L·ªãch s·ª≠ seal tr∆∞·ªõc khi c·∫≠p nh·∫≠t booking:');
        historyBefore.forEach((item, index) => {
            console.log(`  ${index + 1}. Seal: ${item.seal_number}, Container: ${item.container_number}, Booking: ${item.booking_number || 'null'}`);
        });
        console.log('');

        // Step 4: C·∫≠p nh·∫≠t booking_bill v√†o ServiceRequest
        console.log('üìù Step 4: C·∫≠p nh·∫≠t booking_bill v√†o ServiceRequest');
        const bookingBill = `BOOKING-${Date.now()}`;
        const updateRequestData = {
            booking_bill: bookingBill
        };

        const updateResponse = await axios.patch(`${BASE_URL}/requests/${requestId}`, updateRequestData, { headers });
        console.log(`‚úÖ C·∫≠p nh·∫≠t booking th√†nh c√¥ng: ${bookingBill}\n`);

        // Step 5: Ki·ªÉm tra SealUsageHistory sau khi c·∫≠p nh·∫≠t booking
        console.log('üîç Step 5: Ki·ªÉm tra SealUsageHistory sau khi c·∫≠p nh·∫≠t booking');
        const historyAfterResponse = await axios.get(`${BASE_URL}/seals/${sealId}/usage-history`, { headers });
        const historyAfter = historyAfterResponse.data.data;

        console.log('üìã L·ªãch s·ª≠ seal sau khi c·∫≠p nh·∫≠t booking:');
        historyAfter.forEach((item, index) => {
            console.log(`  ${index + 1}. Seal: ${item.seal_number}, Container: ${item.container_number}, Booking: ${item.booking_number || 'null'}`);
        });
        console.log('');

        // Step 6: Ki·ªÉm tra k·∫øt qu·∫£
        console.log('‚úÖ Step 6: Ki·ªÉm tra k·∫øt qu·∫£');
        const hasBookingUpdated = historyAfter.some(item => item.booking_number === bookingBill);
        
        if (hasBookingUpdated) {
            console.log('üéâ TH√ÄNH C√îNG: Booking ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v√†o SealUsageHistory!');
            console.log(`üìã Booking ${bookingBill} ƒë√£ xu·∫•t hi·ªán trong l·ªãch s·ª≠ seal`);
        } else {
            console.log('‚ùå TH·∫§T B·∫†I: Booking ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô v√†o SealUsageHistory');
            console.log('üîß C√≥ th·ªÉ c·∫ßn g·ªçi API ƒë·ªìng b·ªô th·ªß c√¥ng');
        }

        // Step 7: Test API ƒë·ªìng b·ªô th·ªß c√¥ng (n·∫øu c·∫ßn)
        if (!hasBookingUpdated) {
            console.log('\nüîß Step 7: Test API ƒë·ªìng b·ªô th·ªß c√¥ng');
            try {
                const syncResponse = await axios.post(`${BASE_URL}/requests/${requestId}/sync-seal-booking`, {}, { headers });
                console.log(`‚úÖ ƒê·ªìng b·ªô th·ªß c√¥ng th√†nh c√¥ng: ${syncResponse.data.message}`);
                
                // Ki·ªÉm tra l·∫°i l·ªãch s·ª≠
                const historyFinalResponse = await axios.get(`${BASE_URL}/seals/${sealId}/usage-history`, { headers });
                const historyFinal = historyFinalResponse.data.data;
                
                console.log('üìã L·ªãch s·ª≠ seal sau ƒë·ªìng b·ªô th·ªß c√¥ng:');
                historyFinal.forEach((item, index) => {
                    console.log(`  ${index + 1}. Seal: ${item.seal_number}, Container: ${item.container_number}, Booking: ${item.booking_number || 'null'}`);
                });
            } catch (syncError) {
                console.log(`‚ùå L·ªói khi ƒë·ªìng b·ªô th·ªß c√¥ng: ${syncError.response?.data?.message || syncError.message}`);
            }
        }

        console.log('\nüèÅ Test ho√†n th√†nh!');

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.response?.data || error.message);
    }
}

// Ch·∫°y test
if (require.main === module) {
    testSealBookingSync();
}

module.exports = { testSealBookingSync };
